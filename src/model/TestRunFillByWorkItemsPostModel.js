/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TestRunFillByWorkItemsPostModel model module.
 * @module model/TestRunFillByWorkItemsPostModel
 * @version 2.0.0
 */
class TestRunFillByWorkItemsPostModel {
    /**
     * Constructs a new <code>TestRunFillByWorkItemsPostModel</code>.
     * @alias module:model/TestRunFillByWorkItemsPostModel
     * @param configurationIds {Array.<String>} Specifies the configuration GUIDs, from which test points are created. You can specify several GUIDs.
     * @param workitemIds {Array.<String>} Specifies the work item GUIDs, from which test points are created. You can specify several GUIDs.
     * @param projectId {String} Specifies the GUID of the project, in which a test run will be created.
     * @param testPlanId {String} Specifies the GUID of the test plan, within which the test run will be created.
     */
    constructor(configurationIds, workitemIds, projectId, testPlanId) { 
        
        TestRunFillByWorkItemsPostModel.initialize(this, configurationIds, workitemIds, projectId, testPlanId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, configurationIds, workitemIds, projectId, testPlanId) { 
        obj['configurationIds'] = configurationIds;
        obj['workitemIds'] = workitemIds;
        obj['projectId'] = projectId;
        obj['testPlanId'] = testPlanId;
    }

    /**
     * Constructs a <code>TestRunFillByWorkItemsPostModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestRunFillByWorkItemsPostModel} obj Optional instance to populate.
     * @return {module:model/TestRunFillByWorkItemsPostModel} The populated <code>TestRunFillByWorkItemsPostModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestRunFillByWorkItemsPostModel();

            if (data.hasOwnProperty('configurationIds')) {
                obj['configurationIds'] = ApiClient.convertToType(data['configurationIds'], ['String']);
            }
            if (data.hasOwnProperty('workitemIds')) {
                obj['workitemIds'] = ApiClient.convertToType(data['workitemIds'], ['String']);
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('testPlanId')) {
                obj['testPlanId'] = ApiClient.convertToType(data['testPlanId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('launchSource')) {
                obj['launchSource'] = ApiClient.convertToType(data['launchSource'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Specifies the configuration GUIDs, from which test points are created. You can specify several GUIDs.
 * @member {Array.<String>} configurationIds
 */
TestRunFillByWorkItemsPostModel.prototype['configurationIds'] = undefined;

/**
 * Specifies the work item GUIDs, from which test points are created. You can specify several GUIDs.
 * @member {Array.<String>} workitemIds
 */
TestRunFillByWorkItemsPostModel.prototype['workitemIds'] = undefined;

/**
 * Specifies the GUID of the project, in which a test run will be created.
 * @member {String} projectId
 */
TestRunFillByWorkItemsPostModel.prototype['projectId'] = undefined;

/**
 * Specifies the GUID of the test plan, within which the test run will be created.
 * @member {String} testPlanId
 */
TestRunFillByWorkItemsPostModel.prototype['testPlanId'] = undefined;

/**
 * Specifies the name of the test run.
 * @member {String} name
 */
TestRunFillByWorkItemsPostModel.prototype['name'] = undefined;

/**
 * Specifies the test run description.
 * @member {String} description
 */
TestRunFillByWorkItemsPostModel.prototype['description'] = undefined;

/**
 * Specifies the test run launch source.
 * @member {String} launchSource
 */
TestRunFillByWorkItemsPostModel.prototype['launchSource'] = undefined;






export default TestRunFillByWorkItemsPostModel;

