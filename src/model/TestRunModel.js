/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AutoTestModel from './AutoTestModel';
import TestPlanModel from './TestPlanModel';
import TestResultModel from './TestResultModel';
import TestRunAnalyticResultModel from './TestRunAnalyticResultModel';
import TestRunStateTypeModel from './TestRunStateTypeModel';

/**
 * The TestRunModel model module.
 * @module model/TestRunModel
 * @version 2.0.0
 */
class TestRunModel {
    /**
     * Constructs a new <code>TestRunModel</code>.
     * @alias module:model/TestRunModel
     */
    constructor() { 
        
        TestRunModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TestRunModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestRunModel} obj Optional instance to populate.
     * @return {module:model/TestRunModel} The populated <code>TestRunModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestRunModel();

            if (data.hasOwnProperty('autoTests')) {
                obj['autoTests'] = ApiClient.convertToType(data['autoTests'], [AutoTestModel]);
            }
            if (data.hasOwnProperty('autoTestsCount')) {
                obj['autoTestsCount'] = ApiClient.convertToType(data['autoTestsCount'], 'Number');
            }
            if (data.hasOwnProperty('testSuiteIds')) {
                obj['testSuiteIds'] = ApiClient.convertToType(data['testSuiteIds'], ['String']);
            }
            if (data.hasOwnProperty('isAutomated')) {
                obj['isAutomated'] = ApiClient.convertToType(data['isAutomated'], 'Boolean');
            }
            if (data.hasOwnProperty('analytic')) {
                obj['analytic'] = TestRunAnalyticResultModel.constructFromObject(data['analytic']);
            }
            if (data.hasOwnProperty('testResults')) {
                obj['testResults'] = ApiClient.convertToType(data['testResults'], [TestResultModel]);
            }
            if (data.hasOwnProperty('testPlan')) {
                obj['testPlan'] = TestPlanModel.constructFromObject(data['testPlan']);
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('modifiedDate')) {
                obj['modifiedDate'] = ApiClient.convertToType(data['modifiedDate'], 'Date');
            }
            if (data.hasOwnProperty('createdById')) {
                obj['createdById'] = ApiClient.convertToType(data['createdById'], 'String');
            }
            if (data.hasOwnProperty('modifiedById')) {
                obj['modifiedById'] = ApiClient.convertToType(data['modifiedById'], 'String');
            }
            if (data.hasOwnProperty('createdByUserName')) {
                obj['createdByUserName'] = ApiClient.convertToType(data['createdByUserName'], 'String');
            }
            if (data.hasOwnProperty('startedDate')) {
                obj['startedDate'] = ApiClient.convertToType(data['startedDate'], 'Date');
            }
            if (data.hasOwnProperty('completedDate')) {
                obj['completedDate'] = ApiClient.convertToType(data['completedDate'], 'Date');
            }
            if (data.hasOwnProperty('build')) {
                obj['build'] = ApiClient.convertToType(data['build'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('stateName')) {
                obj['stateName'] = TestRunStateTypeModel.constructFromObject(data['stateName']);
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('testPlanId')) {
                obj['testPlanId'] = ApiClient.convertToType(data['testPlanId'], 'String');
            }
            if (data.hasOwnProperty('runByUserId')) {
                obj['runByUserId'] = ApiClient.convertToType(data['runByUserId'], 'String');
            }
            if (data.hasOwnProperty('stoppedByUserId')) {
                obj['stoppedByUserId'] = ApiClient.convertToType(data['stoppedByUserId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('launchSource')) {
                obj['launchSource'] = ApiClient.convertToType(data['launchSource'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isDeleted')) {
                obj['isDeleted'] = ApiClient.convertToType(data['isDeleted'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {Array.<module:model/AutoTestModel>} autoTests
 */
TestRunModel.prototype['autoTests'] = undefined;

/**
 * @member {Number} autoTestsCount
 */
TestRunModel.prototype['autoTestsCount'] = undefined;

/**
 * @member {Array.<String>} testSuiteIds
 */
TestRunModel.prototype['testSuiteIds'] = undefined;

/**
 * @member {Boolean} isAutomated
 */
TestRunModel.prototype['isAutomated'] = undefined;

/**
 * @member {module:model/TestRunAnalyticResultModel} analytic
 */
TestRunModel.prototype['analytic'] = undefined;

/**
 * @member {Array.<module:model/TestResultModel>} testResults
 */
TestRunModel.prototype['testResults'] = undefined;

/**
 * @member {module:model/TestPlanModel} testPlan
 */
TestRunModel.prototype['testPlan'] = undefined;

/**
 * @member {Date} createdDate
 */
TestRunModel.prototype['createdDate'] = undefined;

/**
 * @member {Date} modifiedDate
 */
TestRunModel.prototype['modifiedDate'] = undefined;

/**
 * @member {String} createdById
 */
TestRunModel.prototype['createdById'] = undefined;

/**
 * @member {String} modifiedById
 */
TestRunModel.prototype['modifiedById'] = undefined;

/**
 * @member {String} createdByUserName
 */
TestRunModel.prototype['createdByUserName'] = undefined;

/**
 * @member {Date} startedDate
 */
TestRunModel.prototype['startedDate'] = undefined;

/**
 * @member {Date} completedDate
 */
TestRunModel.prototype['completedDate'] = undefined;

/**
 * @member {String} build
 */
TestRunModel.prototype['build'] = undefined;

/**
 * @member {String} description
 */
TestRunModel.prototype['description'] = undefined;

/**
 * @member {module:model/TestRunStateTypeModel} stateName
 */
TestRunModel.prototype['stateName'] = undefined;

/**
 * @member {String} projectId
 */
TestRunModel.prototype['projectId'] = undefined;

/**
 * @member {String} testPlanId
 */
TestRunModel.prototype['testPlanId'] = undefined;

/**
 * @member {String} runByUserId
 */
TestRunModel.prototype['runByUserId'] = undefined;

/**
 * @member {String} stoppedByUserId
 */
TestRunModel.prototype['stoppedByUserId'] = undefined;

/**
 * @member {String} name
 */
TestRunModel.prototype['name'] = undefined;

/**
 * @member {String} launchSource
 */
TestRunModel.prototype['launchSource'] = undefined;

/**
 * @member {String} id
 */
TestRunModel.prototype['id'] = undefined;

/**
 * @member {Boolean} isDeleted
 */
TestRunModel.prototype['isDeleted'] = undefined;






export default TestRunModel;

