/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TagShortModel from './TagShortModel';
import TestPlanStatusModel from './TestPlanStatusModel';
import TestPointAnalyticResult from './TestPointAnalyticResult';

/**
 * The TestPlanWithAnalyticModel model module.
 * @module model/TestPlanWithAnalyticModel
 * @version 2.0.0
 */
class TestPlanWithAnalyticModel {
    /**
     * Constructs a new <code>TestPlanWithAnalyticModel</code>.
     * @alias module:model/TestPlanWithAnalyticModel
     * @param name {String} 
     * @param projectId {String} 
     */
    constructor(name, projectId) { 
        
        TestPlanWithAnalyticModel.initialize(this, name, projectId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, projectId) { 
        obj['name'] = name;
        obj['projectId'] = projectId;
    }

    /**
     * Constructs a <code>TestPlanWithAnalyticModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestPlanWithAnalyticModel} obj Optional instance to populate.
     * @return {module:model/TestPlanWithAnalyticModel} The populated <code>TestPlanWithAnalyticModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestPlanWithAnalyticModel();

            if (data.hasOwnProperty('analytic')) {
                obj['analytic'] = TestPointAnalyticResult.constructFromObject(data['analytic']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = TestPlanStatusModel.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('startedOn')) {
                obj['startedOn'] = ApiClient.convertToType(data['startedOn'], 'Date');
            }
            if (data.hasOwnProperty('completedOn')) {
                obj['completedOn'] = ApiClient.convertToType(data['completedOn'], 'Date');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('modifiedDate')) {
                obj['modifiedDate'] = ApiClient.convertToType(data['modifiedDate'], 'Date');
            }
            if (data.hasOwnProperty('createdById')) {
                obj['createdById'] = ApiClient.convertToType(data['createdById'], 'String');
            }
            if (data.hasOwnProperty('modifiedById')) {
                obj['modifiedById'] = ApiClient.convertToType(data['modifiedById'], 'String');
            }
            if (data.hasOwnProperty('globalId')) {
                obj['globalId'] = ApiClient.convertToType(data['globalId'], 'Number');
            }
            if (data.hasOwnProperty('isDeleted')) {
                obj['isDeleted'] = ApiClient.convertToType(data['isDeleted'], 'Boolean');
            }
            if (data.hasOwnProperty('lockedDate')) {
                obj['lockedDate'] = ApiClient.convertToType(data['lockedDate'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lockedById')) {
                obj['lockedById'] = ApiClient.convertToType(data['lockedById'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [TagShortModel]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('build')) {
                obj['build'] = ApiClient.convertToType(data['build'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('productName')) {
                obj['productName'] = ApiClient.convertToType(data['productName'], 'String');
            }
            if (data.hasOwnProperty('hasAutomaticDurationTimer')) {
                obj['hasAutomaticDurationTimer'] = ApiClient.convertToType(data['hasAutomaticDurationTimer'], 'Boolean');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], {'String': Object});
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/TestPointAnalyticResult} analytic
 */
TestPlanWithAnalyticModel.prototype['analytic'] = undefined;

/**
 * @member {module:model/TestPlanStatusModel} status
 */
TestPlanWithAnalyticModel.prototype['status'] = undefined;

/**
 * Set when test plan is starter (status changed to: In Progress)
 * @member {Date} startedOn
 */
TestPlanWithAnalyticModel.prototype['startedOn'] = undefined;

/**
 * set when test plan status is completed (status changed to: Completed)
 * @member {Date} completedOn
 */
TestPlanWithAnalyticModel.prototype['completedOn'] = undefined;

/**
 * @member {Date} createdDate
 */
TestPlanWithAnalyticModel.prototype['createdDate'] = undefined;

/**
 * @member {Date} modifiedDate
 */
TestPlanWithAnalyticModel.prototype['modifiedDate'] = undefined;

/**
 * @member {String} createdById
 */
TestPlanWithAnalyticModel.prototype['createdById'] = undefined;

/**
 * @member {String} modifiedById
 */
TestPlanWithAnalyticModel.prototype['modifiedById'] = undefined;

/**
 * Used for search Test plan
 * @member {Number} globalId
 */
TestPlanWithAnalyticModel.prototype['globalId'] = undefined;

/**
 * @member {Boolean} isDeleted
 */
TestPlanWithAnalyticModel.prototype['isDeleted'] = undefined;

/**
 * @member {Date} lockedDate
 */
TestPlanWithAnalyticModel.prototype['lockedDate'] = undefined;

/**
 * @member {String} id
 */
TestPlanWithAnalyticModel.prototype['id'] = undefined;

/**
 * @member {String} lockedById
 */
TestPlanWithAnalyticModel.prototype['lockedById'] = undefined;

/**
 * @member {Array.<module:model/TagShortModel>} tags
 */
TestPlanWithAnalyticModel.prototype['tags'] = undefined;

/**
 * @member {String} name
 */
TestPlanWithAnalyticModel.prototype['name'] = undefined;

/**
 * Used for analytics
 * @member {Date} startDate
 */
TestPlanWithAnalyticModel.prototype['startDate'] = undefined;

/**
 * Used for analytics
 * @member {Date} endDate
 */
TestPlanWithAnalyticModel.prototype['endDate'] = undefined;

/**
 * @member {String} description
 */
TestPlanWithAnalyticModel.prototype['description'] = undefined;

/**
 * @member {String} build
 */
TestPlanWithAnalyticModel.prototype['build'] = undefined;

/**
 * @member {String} projectId
 */
TestPlanWithAnalyticModel.prototype['projectId'] = undefined;

/**
 * @member {String} productName
 */
TestPlanWithAnalyticModel.prototype['productName'] = undefined;

/**
 * @member {Boolean} hasAutomaticDurationTimer
 */
TestPlanWithAnalyticModel.prototype['hasAutomaticDurationTimer'] = undefined;

/**
 * @member {Object.<String, Object>} attributes
 */
TestPlanWithAnalyticModel.prototype['attributes'] = undefined;






export default TestPlanWithAnalyticModel;

