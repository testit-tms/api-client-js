/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TestPlanGroupByStatus from './TestPlanGroupByStatus';
import TestPlanGroupByTestSuite from './TestPlanGroupByTestSuite';
import TestPlanGroupByTester from './TestPlanGroupByTester';
import TestPlanGroupByTesterAndStatus from './TestPlanGroupByTesterAndStatus';

/**
 * The TestPointAnalyticResult model module.
 * @module model/TestPointAnalyticResult
 * @version 2.0.0
 */
class TestPointAnalyticResult {
    /**
     * Constructs a new <code>TestPointAnalyticResult</code>.
     * @alias module:model/TestPointAnalyticResult
     */
    constructor() { 
        
        TestPointAnalyticResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TestPointAnalyticResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestPointAnalyticResult} obj Optional instance to populate.
     * @return {module:model/TestPointAnalyticResult} The populated <code>TestPointAnalyticResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestPointAnalyticResult();

            if (data.hasOwnProperty('countGroupByStatus')) {
                obj['countGroupByStatus'] = ApiClient.convertToType(data['countGroupByStatus'], [TestPlanGroupByStatus]);
            }
            if (data.hasOwnProperty('sumGroupByTester')) {
                obj['sumGroupByTester'] = ApiClient.convertToType(data['sumGroupByTester'], [TestPlanGroupByTester]);
            }
            if (data.hasOwnProperty('countGroupByTester')) {
                obj['countGroupByTester'] = ApiClient.convertToType(data['countGroupByTester'], [TestPlanGroupByTester]);
            }
            if (data.hasOwnProperty('countGroupByTestSuite')) {
                obj['countGroupByTestSuite'] = ApiClient.convertToType(data['countGroupByTestSuite'], [TestPlanGroupByTestSuite]);
            }
            if (data.hasOwnProperty('countGroupByTesterAndStatus')) {
                obj['countGroupByTesterAndStatus'] = ApiClient.convertToType(data['countGroupByTesterAndStatus'], [TestPlanGroupByTesterAndStatus]);
            }
        }
        return obj;
    }


}

/**
 * @member {Array.<module:model/TestPlanGroupByStatus>} countGroupByStatus
 */
TestPointAnalyticResult.prototype['countGroupByStatus'] = undefined;

/**
 * @member {Array.<module:model/TestPlanGroupByTester>} sumGroupByTester
 */
TestPointAnalyticResult.prototype['sumGroupByTester'] = undefined;

/**
 * @member {Array.<module:model/TestPlanGroupByTester>} countGroupByTester
 */
TestPointAnalyticResult.prototype['countGroupByTester'] = undefined;

/**
 * @member {Array.<module:model/TestPlanGroupByTestSuite>} countGroupByTestSuite
 */
TestPointAnalyticResult.prototype['countGroupByTestSuite'] = undefined;

/**
 * @member {Array.<module:model/TestPlanGroupByTesterAndStatus>} countGroupByTesterAndStatus
 */
TestPointAnalyticResult.prototype['countGroupByTesterAndStatus'] = undefined;






export default TestPointAnalyticResult;

