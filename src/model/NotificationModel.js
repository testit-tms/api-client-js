/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NotificationTypeModel from './NotificationTypeModel';

/**
 * The NotificationModel model module.
 * @module model/NotificationModel
 * @version 2.0.0
 */
class NotificationModel {
    /**
     * Constructs a new <code>NotificationModel</code>.
     * @alias module:model/NotificationModel
     */
    constructor() { 
        
        NotificationModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NotificationModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationModel} obj Optional instance to populate.
     * @return {module:model/NotificationModel} The populated <code>NotificationModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationModel();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('isRead')) {
                obj['isRead'] = ApiClient.convertToType(data['isRead'], 'Boolean');
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('notificationType')) {
                obj['notificationType'] = NotificationTypeModel.constructFromObject(data['notificationType']);
            }
            if (data.hasOwnProperty('projectGlobalId')) {
                obj['projectGlobalId'] = ApiClient.convertToType(data['projectGlobalId'], 'Number');
            }
            if (data.hasOwnProperty('projectName')) {
                obj['projectName'] = ApiClient.convertToType(data['projectName'], 'String');
            }
            if (data.hasOwnProperty('testPlanGlobalId')) {
                obj['testPlanGlobalId'] = ApiClient.convertToType(data['testPlanGlobalId'], 'Number');
            }
            if (data.hasOwnProperty('testPlanName')) {
                obj['testPlanName'] = ApiClient.convertToType(data['testPlanName'], 'String');
            }
            if (data.hasOwnProperty('workitemGlobalId')) {
                obj['workitemGlobalId'] = ApiClient.convertToType(data['workitemGlobalId'], 'Number');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('workItemName')) {
                obj['workItemName'] = ApiClient.convertToType(data['workItemName'], 'String');
            }
            if (data.hasOwnProperty('attributeName')) {
                obj['attributeName'] = ApiClient.convertToType(data['attributeName'], 'String');
            }
            if (data.hasOwnProperty('createdById')) {
                obj['createdById'] = ApiClient.convertToType(data['createdById'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} id
 */
NotificationModel.prototype['id'] = undefined;

/**
 * @member {Date} createdDate
 */
NotificationModel.prototype['createdDate'] = undefined;

/**
 * @member {Boolean} isRead
 */
NotificationModel.prototype['isRead'] = undefined;

/**
 * @member {String} entityId
 */
NotificationModel.prototype['entityId'] = undefined;

/**
 * @member {module:model/NotificationTypeModel} notificationType
 */
NotificationModel.prototype['notificationType'] = undefined;

/**
 * @member {Number} projectGlobalId
 */
NotificationModel.prototype['projectGlobalId'] = undefined;

/**
 * @member {String} projectName
 */
NotificationModel.prototype['projectName'] = undefined;

/**
 * @member {Number} testPlanGlobalId
 */
NotificationModel.prototype['testPlanGlobalId'] = undefined;

/**
 * @member {String} testPlanName
 */
NotificationModel.prototype['testPlanName'] = undefined;

/**
 * @member {Number} workitemGlobalId
 */
NotificationModel.prototype['workitemGlobalId'] = undefined;

/**
 * @member {String} comment
 */
NotificationModel.prototype['comment'] = undefined;

/**
 * @member {String} workItemName
 */
NotificationModel.prototype['workItemName'] = undefined;

/**
 * @member {String} attributeName
 */
NotificationModel.prototype['attributeName'] = undefined;

/**
 * @member {String} createdById
 */
NotificationModel.prototype['createdById'] = undefined;






export default NotificationModel;

