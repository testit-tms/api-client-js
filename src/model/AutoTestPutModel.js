/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AutoTestStepModel from './AutoTestStepModel';
import LabelPostModel from './LabelPostModel';
import LinkPutModel from './LinkPutModel';

/**
 * The AutoTestPutModel model module.
 * @module model/AutoTestPutModel
 * @version 2.0.0
 */
class AutoTestPutModel {
    /**
     * Constructs a new <code>AutoTestPutModel</code>.
     * @alias module:model/AutoTestPutModel
     * @param externalId {String} Specifies the ID of your autotest in the external system.<br />  To test the method, you can use any ID.
     * @param projectId {String} Specifies the project GUID.<br />  You can get it using the `GET /api/v2/projects` method.
     * @param name {String} Specifies autotest name in the test management system.
     */
    constructor(externalId, projectId, name) { 
        
        AutoTestPutModel.initialize(this, externalId, projectId, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, externalId, projectId, name) { 
        obj['externalId'] = externalId;
        obj['projectId'] = projectId;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>AutoTestPutModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AutoTestPutModel} obj Optional instance to populate.
     * @return {module:model/AutoTestPutModel} The populated <code>AutoTestPutModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AutoTestPutModel();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('workItemIdsForLinkWithAutoTest')) {
                obj['workItemIdsForLinkWithAutoTest'] = ApiClient.convertToType(data['workItemIdsForLinkWithAutoTest'], ['String']);
            }
            if (data.hasOwnProperty('externalId')) {
                obj['externalId'] = ApiClient.convertToType(data['externalId'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], [LinkPutModel]);
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('classname')) {
                obj['classname'] = ApiClient.convertToType(data['classname'], 'String');
            }
            if (data.hasOwnProperty('steps')) {
                obj['steps'] = ApiClient.convertToType(data['steps'], [AutoTestStepModel]);
            }
            if (data.hasOwnProperty('setup')) {
                obj['setup'] = ApiClient.convertToType(data['setup'], [AutoTestStepModel]);
            }
            if (data.hasOwnProperty('teardown')) {
                obj['teardown'] = ApiClient.convertToType(data['teardown'], [AutoTestStepModel]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [LabelPostModel]);
            }
            if (data.hasOwnProperty('isFlaky')) {
                obj['isFlaky'] = ApiClient.convertToType(data['isFlaky'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * Used for search autotest. If value equals Guid mask filled with zeros, search will be executed using ExternalId
 * @member {String} id
 */
AutoTestPutModel.prototype['id'] = undefined;

/**
 * @member {Array.<String>} workItemIdsForLinkWithAutoTest
 */
AutoTestPutModel.prototype['workItemIdsForLinkWithAutoTest'] = undefined;

/**
 * Specifies the ID of your autotest in the external system.<br />  To test the method, you can use any ID.
 * @member {String} externalId
 */
AutoTestPutModel.prototype['externalId'] = undefined;

/**
 * Specifies the links in the autotest.
 * @member {Array.<module:model/LinkPutModel>} links
 */
AutoTestPutModel.prototype['links'] = undefined;

/**
 * Specifies the project GUID.<br />  You can get it using the `GET /api/v2/projects` method.
 * @member {String} projectId
 */
AutoTestPutModel.prototype['projectId'] = undefined;

/**
 * Specifies autotest name in the test management system.
 * @member {String} name
 */
AutoTestPutModel.prototype['name'] = undefined;

/**
 * Specifies the name of the namespace in the test management system.
 * @member {String} namespace
 */
AutoTestPutModel.prototype['namespace'] = undefined;

/**
 * Specifies the class name in the test management system.
 * @member {String} classname
 */
AutoTestPutModel.prototype['classname'] = undefined;

/**
 * Specifies the steps in the autotest.
 * @member {Array.<module:model/AutoTestStepModel>} steps
 */
AutoTestPutModel.prototype['steps'] = undefined;

/**
 * Specifies the setup steps and relates them to the autotest. Supported values are the same as in the `steps` parameter.
 * @member {Array.<module:model/AutoTestStepModel>} setup
 */
AutoTestPutModel.prototype['setup'] = undefined;

/**
 * Specifies the teardown steps and relates them to the autotest. Supported values are the same as in the `steps` parameter.
 * @member {Array.<module:model/AutoTestStepModel>} teardown
 */
AutoTestPutModel.prototype['teardown'] = undefined;

/**
 * Specifies the name of the autotest in the autotest card.   The `Name` parameter is responsible for the name in the table.
 * @member {String} title
 */
AutoTestPutModel.prototype['title'] = undefined;

/**
 * Specifies the autotest description in the test management system.
 * @member {String} description
 */
AutoTestPutModel.prototype['description'] = undefined;

/**
 * Specifies autotest labels.
 * @member {Array.<module:model/LabelPostModel>} labels
 */
AutoTestPutModel.prototype['labels'] = undefined;

/**
 * Marks the autotest as flaky.
 * @member {Boolean} isFlaky
 */
AutoTestPutModel.prototype['isFlaky'] = undefined;






export default AutoTestPutModel;

