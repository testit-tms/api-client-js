/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfigurationModel from '../model/ConfigurationModel';
import GetXlsxTestPointsByTestPlanModel from '../model/GetXlsxTestPointsByTestPlanModel';
import ProblemDetails from '../model/ProblemDetails';
import TestPlanChangeModel from '../model/TestPlanChangeModel';
import TestPlanLink from '../model/TestPlanLink';
import TestPlanModel from '../model/TestPlanModel';
import TestPlanPostModel from '../model/TestPlanPostModel';
import TestPlanPutModel from '../model/TestPlanPutModel';
import TestPlanShortModel from '../model/TestPlanShortModel';
import TestPlanWithTestSuiteTreeModel from '../model/TestPlanWithTestSuiteTreeModel';
import TestPointAnalyticResult from '../model/TestPointAnalyticResult';
import TestPointWithLastResultModel from '../model/TestPointWithLastResultModel';
import TestRunModel from '../model/TestRunModel';
import TestRunSearchQueryModel from '../model/TestRunSearchQueryModel';
import TestSuiteV2TreeModel from '../model/TestSuiteV2TreeModel';
import ValidationProblemDetails from '../model/ValidationProblemDetails';
import WorkItemSelectModel from '../model/WorkItemSelectModel';

/**
* TestPlans service.
* @module api/TestPlansApi
* @version 2.0.0
*/
export default class TestPlansApi {

    /**
    * Constructs a new TestPlansApi. 
    * @alias module:api/TestPlansApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addTestPointsWithSections operation.
     * @callback module:api/TestPlansApi~addTestPointsWithSectionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add test-points to test suite with sections
     * @param {String} id Test suite internal identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkItemSelectModel} opts.workItemSelectModel Filter object to retrieve work items for test-suite's project
     * @param {module:api/TestPlansApi~addTestPointsWithSectionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addTestPointsWithSections(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['workItemSelectModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addTestPointsWithSections");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/testPlans/{id}/test-points/withSections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addWorkItemsWithSections operation.
     * @callback module:api/TestPlansApi~addWorkItemsWithSectionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add WorkItems to TestPlan with Sections as TestSuites
     * <br>Use case  <br>User sets TestPlan identifier  <br>User sets WorkItem identifiers (listed in request example)  <br>User runs method execution  <br>System added WorkItems and Sections to TestPlan  <br>System returns no content response
     * @param {String} id Test plan internal (guid format) or global (int  format) identifier
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/TestPlansApi~addWorkItemsWithSectionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addWorkItemsWithSections(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addWorkItemsWithSections");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/testPlans/{id}/workItems/withSections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2TestPlansIdAnalyticsGet operation.
     * @callback module:api/TestPlansApi~apiV2TestPlansIdAnalyticsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestPointAnalyticResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get analytics by TestPlan
     * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System returns analytics by test plan
     * @param {String} id Test plan internal (guid format) or global (int  format) identifier
     * @param {module:api/TestPlansApi~apiV2TestPlansIdAnalyticsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestPointAnalyticResult}
     */
    apiV2TestPlansIdAnalyticsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2TestPlansIdAnalyticsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestPointAnalyticResult;
      return this.apiClient.callApi(
        '/api/v2/testPlans/{id}/analytics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2TestPlansIdAutobalancePost operation.
     * @callback module:api/TestPlansApi~apiV2TestPlansIdAutobalancePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestPlanWithTestSuiteTreeModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Auto-balance for TestPlan with testers
     * <br>Use case  <br>User sets TestPlan identifier  <br>User sets testers identifiers (listed in request example)  <br>User runs method execution  <br>System auto-balances TestPlan  <br>System returns test plan model (listed in response example)
     * @param {String} id Test plan internal (guid format) or global (int  format) identifier
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.testers List of testers internal identifiers
     * @param {module:api/TestPlansApi~apiV2TestPlansIdAutobalancePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestPlanWithTestSuiteTreeModel}
     */
    apiV2TestPlansIdAutobalancePost(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2TestPlansIdAutobalancePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'testers': this.apiClient.buildCollectionParam(opts['testers'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestPlanWithTestSuiteTreeModel;
      return this.apiClient.callApi(
        '/api/v2/testPlans/{id}/autobalance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2TestPlansIdConfigurationsGet operation.
     * @callback module:api/TestPlansApi~apiV2TestPlansIdConfigurationsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConfigurationModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get TestPlan configurations
     * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System return test plan configurations
     * @param {String} id Test plan internal (guid format) or global (int  format) identifier
     * @param {module:api/TestPlansApi~apiV2TestPlansIdConfigurationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConfigurationModel>}
     */
    apiV2TestPlansIdConfigurationsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2TestPlansIdConfigurationsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ConfigurationModel];
      return this.apiClient.callApi(
        '/api/v2/testPlans/{id}/configurations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2TestPlansIdExportTestPointsXlsxPost operation.
     * @callback module:api/TestPlansApi~apiV2TestPlansIdExportTestPointsXlsxPostCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export TestPoints from TestPlan in xls format
     * <br>Use case  <br>User sets test plan identifier  <br>User sets filter model (listed in request example)  <br>User runs method execution  <br>System return export xlsx file
     * @param {String} id Test plan internal (guid format) or global (int  format) identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.timeZoneOffsetInMinutes 
     * @param {module:model/GetXlsxTestPointsByTestPlanModel} opts.getXlsxTestPointsByTestPlanModel 
     * @param {module:api/TestPlansApi~apiV2TestPlansIdExportTestPointsXlsxPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    apiV2TestPlansIdExportTestPointsXlsxPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['getXlsxTestPointsByTestPlanModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2TestPlansIdExportTestPointsXlsxPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'time-Zone-Offset-In-Minutes': opts['timeZoneOffsetInMinutes']
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/api/v2/testPlans/{id}/export/testPoints/xlsx', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2TestPlansIdExportTestResultHistoryXlsxPost operation.
     * @callback module:api/TestPlansApi~apiV2TestPlansIdExportTestResultHistoryXlsxPostCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export TestResults history from TestPlan in xls format
     * <br>Use case  <br>User sets test plan identifier  <br>User sets filter model (listed in request example)  <br>User runs method execution  <br>System return export xlsx file
     * @param {String} id Test plan internal (guid format) or global (int  format) identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.mustReturnOnlyLastTestResult 
     * @param {Boolean} opts.includeSteps 
     * @param {Boolean} opts.includeDeletedTestSuites 
     * @param {Number} opts.timeZoneOffsetInMinutes 
     * @param {module:api/TestPlansApi~apiV2TestPlansIdExportTestResultHistoryXlsxPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    apiV2TestPlansIdExportTestResultHistoryXlsxPost(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2TestPlansIdExportTestResultHistoryXlsxPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'mustReturnOnlyLastTestResult': opts['mustReturnOnlyLastTestResult'],
        'includeSteps': opts['includeSteps'],
        'includeDeletedTestSuites': opts['includeDeletedTestSuites']
      };
      let headerParams = {
        'time-Zone-Offset-In-Minutes': opts['timeZoneOffsetInMinutes']
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/api/v2/testPlans/{id}/export/testResultHistory/xlsx', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2TestPlansIdHistoryGet operation.
     * @callback module:api/TestPlansApi~apiV2TestPlansIdHistoryGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestPlanChangeModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get TestPlan history
     * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System return test plan history
     * @param {String} id Test plan internal (guid format) or global (int  format) identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Amount of items to be skipped (offset)
     * @param {Number} opts.take Amount of items to be taken (limit)
     * @param {String} opts.orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {String} opts.searchField Property name for searching
     * @param {String} opts.searchValue Value for searching
     * @param {module:api/TestPlansApi~apiV2TestPlansIdHistoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestPlanChangeModel>}
     */
    apiV2TestPlansIdHistoryGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2TestPlansIdHistoryGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'Skip': opts['skip'],
        'Take': opts['take'],
        'OrderBy': opts['orderBy'],
        'SearchField': opts['searchField'],
        'SearchValue': opts['searchValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TestPlanChangeModel];
      return this.apiClient.callApi(
        '/api/v2/testPlans/{id}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2TestPlansIdLinksGet operation.
     * @callback module:api/TestPlansApi~apiV2TestPlansIdLinksGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestPlanLink>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Links of TestPlan
     * <br>Use case  <br>User sets test plan identifier  <br>User sets pagination filter (listed in request example)  <br>User runs method execution  <br>System returns links of TestPlan
     * @param {String} id Test plan internal (guid format) or global (int  format) identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip 
     * @param {Number} opts.take 
     * @param {String} opts.orderBy 
     * @param {module:api/TestPlansApi~apiV2TestPlansIdLinksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestPlanLink>}
     */
    apiV2TestPlansIdLinksGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2TestPlansIdLinksGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'skip': opts['skip'],
        'take': opts['take'],
        'orderBy': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TestPlanLink];
      return this.apiClient.callApi(
        '/api/v2/testPlans/{id}/links', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2TestPlansIdTestPointsLastResultsGet operation.
     * @callback module:api/TestPlansApi~apiV2TestPlansIdTestPointsLastResultsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestPointWithLastResultModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get TestPoints with last result from TestPlan
     * <br>Use case  <br>User sets test plan identifier  <br>User sets filter (listed in request example)  <br>User runs method execution  <br>System return test points with last result from test plan
     * @param {String} id Test plan internal (guid format) or global (int  format) identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.mustAddGroupingElements 
     * @param {String} opts.testerId 
     * @param {Number} opts.skip Amount of items to be skipped (offset)
     * @param {Number} opts.take Amount of items to be taken (limit)
     * @param {String} opts.orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {String} opts.searchField Property name for searching
     * @param {String} opts.searchValue Value for searching
     * @param {module:api/TestPlansApi~apiV2TestPlansIdTestPointsLastResultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestPointWithLastResultModel>}
     */
    apiV2TestPlansIdTestPointsLastResultsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2TestPlansIdTestPointsLastResultsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'mustAddGroupingElements': opts['mustAddGroupingElements'],
        'testerId': opts['testerId'],
        'Skip': opts['skip'],
        'Take': opts['take'],
        'OrderBy': opts['orderBy'],
        'SearchField': opts['searchField'],
        'SearchValue': opts['searchValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TestPointWithLastResultModel];
      return this.apiClient.callApi(
        '/api/v2/testPlans/{id}/testPoints/lastResults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2TestPlansIdTestPointsResetPost operation.
     * @callback module:api/TestPlansApi~apiV2TestPlansIdTestPointsResetPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset TestPoints status of TestPlan
     * <br>Use case  <br>User sets test plan identifier  <br>User sets test points identifiers  <br>User runs method execution  <br>System reset test points statuses of test plan
     * @param {String} id Test plan internal (guid format) or global (int  format) identifier
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/TestPlansApi~apiV2TestPlansIdTestPointsResetPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2TestPlansIdTestPointsResetPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2TestPlansIdTestPointsResetPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/testPlans/{id}/testPoints/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2TestPlansIdTestRunsGet operation.
     * @callback module:api/TestPlansApi~apiV2TestPlansIdTestRunsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestRunModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get TestRuns of TestPlan
     * <br>Use case  <br>User sets test plan identifier  <br>User sets TestRun status filter (listed in request example)  <br>User runs method execution  <br>System returns TestRuns for TestPlan
     * @param {String} id Test plan internal (guid format) or global (int  format) identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.notStarted 
     * @param {Boolean} opts.inProgress 
     * @param {Boolean} opts.stopped 
     * @param {Boolean} opts.completed 
     * @param {Number} opts.skip Amount of items to be skipped (offset)
     * @param {Number} opts.take Amount of items to be taken (limit)
     * @param {String} opts.orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {String} opts.searchField Property name for searching
     * @param {String} opts.searchValue Value for searching
     * @param {module:api/TestPlansApi~apiV2TestPlansIdTestRunsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestRunModel>}
     */
    apiV2TestPlansIdTestRunsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2TestPlansIdTestRunsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'notStarted': opts['notStarted'],
        'inProgress': opts['inProgress'],
        'stopped': opts['stopped'],
        'completed': opts['completed'],
        'Skip': opts['skip'],
        'Take': opts['take'],
        'OrderBy': opts['orderBy'],
        'SearchField': opts['searchField'],
        'SearchValue': opts['searchValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TestRunModel];
      return this.apiClient.callApi(
        '/api/v2/testPlans/{id}/testRuns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2TestPlansIdTestRunsSearchPost operation.
     * @callback module:api/TestPlansApi~apiV2TestPlansIdTestRunsSearchPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestRunModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search TestRuns of TestPlan
     * <br>Use case  <br>User sets test plan identifier  <br>User sets TestRuns filter (listed in request example)  <br>User runs method execution  <br>System returns TestRuns for TestPlan
     * @param {String} id Test plan internal (guid format) or global (int  format) identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Amount of items to be skipped (offset)
     * @param {Number} opts.take Amount of items to be taken (limit)
     * @param {String} opts.orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {String} opts.searchField Property name for searching
     * @param {String} opts.searchValue Value for searching
     * @param {module:model/TestRunSearchQueryModel} opts.testRunSearchQueryModel 
     * @param {module:api/TestPlansApi~apiV2TestPlansIdTestRunsSearchPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestRunModel>}
     */
    apiV2TestPlansIdTestRunsSearchPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['testRunSearchQueryModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2TestPlansIdTestRunsSearchPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'Skip': opts['skip'],
        'Take': opts['take'],
        'OrderBy': opts['orderBy'],
        'SearchField': opts['searchField'],
        'SearchValue': opts['searchValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [TestRunModel];
      return this.apiClient.callApi(
        '/api/v2/testPlans/{id}/testRuns/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2TestPlansIdTestRunsTestResultsLastModifiedModifiedDateGet operation.
     * @callback module:api/TestPlansApi~apiV2TestPlansIdTestRunsTestResultsLastModifiedModifiedDateGetCallback
     * @param {String} error Error message, if any.
     * @param {Date} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get max modified date in TestRun for TestPlan
     * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System returns max modified date in TestRun for TestPlan
     * @param {String} id Test plan internal (guid format) or global (int  format) identifier
     * @param {module:api/TestPlansApi~apiV2TestPlansIdTestRunsTestResultsLastModifiedModifiedDateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Date}
     */
    apiV2TestPlansIdTestRunsTestResultsLastModifiedModifiedDateGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2TestPlansIdTestRunsTestResultsLastModifiedModifiedDateGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Date';
      return this.apiClient.callApi(
        '/api/v2/testPlans/{id}/testRuns/testResults/lastModified/modifiedDate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2TestPlansIdUnlockRequestPost operation.
     * @callback module:api/TestPlansApi~apiV2TestPlansIdUnlockRequestPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send unlock TestPlan notification
     * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System send unlock test plan notification
     * @param {String} id Test plan internal (guid format) or global (int  format) identifier
     * @param {module:api/TestPlansApi~apiV2TestPlansIdUnlockRequestPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2TestPlansIdUnlockRequestPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2TestPlansIdUnlockRequestPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/testPlans/{id}/unlock/request', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2TestPlansShortsPost operation.
     * @callback module:api/TestPlansApi~apiV2TestPlansShortsPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestPlanShortModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get TestPlans short models by Project identifiers
     * <br>Use case  <br>User sets projects identifiers  <br>User runs method execution  <br>System return test plans short models (listed in response example)
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isDeleted 
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/TestPlansApi~apiV2TestPlansShortsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestPlanShortModel>}
     */
    apiV2TestPlansShortsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
        'isDeleted': opts['isDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [TestPlanShortModel];
      return this.apiClient.callApi(
        '/api/v2/testPlans/shorts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clone operation.
     * @callback module:api/TestPlansApi~cloneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestPlanModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone TestPlan
     * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System clones test plan  <br>System returns test plan (listed in response example)
     * @param {String} id Test plan internal (guid format) or global (int  format) identifier
     * @param {module:api/TestPlansApi~cloneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestPlanModel}
     */
    clone(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clone");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestPlanModel;
      return this.apiClient.callApi(
        '/api/v2/testPlans/{id}/clone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the complete operation.
     * @callback module:api/TestPlansApi~completeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete TestPlan
     * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System completes the test plan and updates test plan status  <br>System returns no content response
     * @param {String} id Test plan internal (guid format) or global (int  format) identifier
     * @param {module:api/TestPlansApi~completeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    complete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling complete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/testPlans/{id}/complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTestPlan operation.
     * @callback module:api/TestPlansApi~createTestPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestPlanModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create TestPlan
     * <br>Use case  <br>User sets test plan properties (listed in request example)  <br>User runs method execution  <br>System creates test plan  <br>System returns test plan (listed in response example)
     * @param {Object} opts Optional parameters
     * @param {module:model/TestPlanPostModel} opts.testPlanPostModel 
     * @param {module:api/TestPlansApi~createTestPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestPlanModel}
     */
    createTestPlan(opts, callback) {
      opts = opts || {};
      let postBody = opts['testPlanPostModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestPlanModel;
      return this.apiClient.callApi(
        '/api/v2/testPlans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTestPlan operation.
     * @callback module:api/TestPlansApi~deleteTestPlanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete TestPlan
     * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System delete test plan  <br>System returns no content response
     * @param {String} id Test plan internal (guid format) or global (int  format) identifier
     * @param {module:api/TestPlansApi~deleteTestPlanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTestPlan(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTestPlan");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/testPlans/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTestPlanById operation.
     * @callback module:api/TestPlansApi~getTestPlanByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestPlanModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get TestPlan by Id
     * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System search  test plan by the identifier  <br>System returns test plan
     * @param {String} id Test plan internal (guid format) or global (int  format) identifier
     * @param {module:api/TestPlansApi~getTestPlanByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestPlanModel}
     */
    getTestPlanById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTestPlanById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestPlanModel;
      return this.apiClient.callApi(
        '/api/v2/testPlans/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTestSuitesById operation.
     * @callback module:api/TestPlansApi~getTestSuitesByIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestSuiteV2TreeModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get TestSuites Tree By Id
     * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System finds test suites related to the test plan  <br>System returns test suites as a tree model (listed in response example)
     * @param {String} id Test plan internal (guid format) or global (int  format) identifier
     * @param {module:api/TestPlansApi~getTestSuitesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestSuiteV2TreeModel>}
     */
    getTestSuitesById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTestSuitesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TestSuiteV2TreeModel];
      return this.apiClient.callApi(
        '/api/v2/testPlans/{id}/testSuites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pause operation.
     * @callback module:api/TestPlansApi~pauseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pause TestPlan
     * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System pauses the test plan and updates test plan status  <br>System returns no content response
     * @param {String} id Test plan internal (guid format) or global (int  format) identifier
     * @param {module:api/TestPlansApi~pauseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pause(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling pause");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/testPlans/{id}/pause', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreTestPlan operation.
     * @callback module:api/TestPlansApi~restoreTestPlanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore TestPlan
     * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System restores test plan  <br>System returns no content response
     * @param {String} id Test plan internal (guid format) or global (int  format) identifier
     * @param {module:api/TestPlansApi~restoreTestPlanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restoreTestPlan(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling restoreTestPlan");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/testPlans/{id}/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the start operation.
     * @callback module:api/TestPlansApi~startCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start TestPlan
     * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System starts the test plan and updates test plan status  <br>System returns no content response
     * @param {String} id Test plan internal (guid format) or global (int  format) identifier
     * @param {module:api/TestPlansApi~startCallback} callback The callback function, accepting three arguments: error, data, response
     */
    start(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling start");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/testPlans/{id}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTestPlan operation.
     * @callback module:api/TestPlansApi~updateTestPlanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update TestPlan
     * <br>Use case  <br>User sets test plan properties(listed in request example)  <br>User runs method execution  <br>System updates test plan  <br>System returns no content response
     * @param {Object} opts Optional parameters
     * @param {module:model/TestPlanPutModel} opts.testPlanPutModel 
     * @param {module:api/TestPlansApi~updateTestPlanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateTestPlan(opts, callback) {
      opts = opts || {};
      let postBody = opts['testPlanPutModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/testPlans', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
