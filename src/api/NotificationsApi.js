/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NotificationModel from '../model/NotificationModel';
import NotificationTypeModel from '../model/NotificationTypeModel';
import ProblemDetails from '../model/ProblemDetails';
import ValidationProblemDetails from '../model/ValidationProblemDetails';

/**
* Notifications service.
* @module api/NotificationsApi
* @version 2.0.0
*/
export default class NotificationsApi {

    /**
    * Constructs a new NotificationsApi. 
    * @alias module:api/NotificationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2NotificationsCountGet operation.
     * @callback module:api/NotificationsApi~apiV2NotificationsCountGetCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get unread Notifications total in last 7 days
     * <br>Use case  <br>User runs method execution  <br>System returns unread notifications total (listed in the response example)
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isRead 
     * @param {module:api/NotificationsApi~apiV2NotificationsCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    apiV2NotificationsCountGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'isRead': opts['isRead']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/v2/notifications/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2NotificationsGet operation.
     * @callback module:api/NotificationsApi~apiV2NotificationsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NotificationModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Notifications for current User
     * <br>Use case  <br>User runs method execution  <br>System returns notifications (listed in the response example)
     * @param {Object} opts Optional parameters
     * @param {module:model/NotificationTypeModel} opts.notificationType 
     * @param {Number} opts.skip Amount of items to be skipped (offset)
     * @param {Number} opts.take Amount of items to be taken (limit)
     * @param {String} opts.orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {String} opts.searchField Property name for searching
     * @param {String} opts.searchValue Value for searching
     * @param {module:api/NotificationsApi~apiV2NotificationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NotificationModel>}
     */
    apiV2NotificationsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'notificationType': opts['notificationType'],
        'Skip': opts['skip'],
        'Take': opts['take'],
        'OrderBy': opts['orderBy'],
        'SearchField': opts['searchField'],
        'SearchValue': opts['searchValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NotificationModel];
      return this.apiClient.callApi(
        '/api/v2/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2NotificationsIdReadPost operation.
     * @callback module:api/NotificationsApi~apiV2NotificationsIdReadPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Notification as read
     * <br>Use case  <br>User sets notification internal (guid format) identifier  <br>User runs method execution  <br>System set notification as read
     * @param {String} id 
     * @param {module:api/NotificationsApi~apiV2NotificationsIdReadPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2NotificationsIdReadPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2NotificationsIdReadPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/notifications/{id}/read', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2NotificationsReadPost operation.
     * @callback module:api/NotificationsApi~apiV2NotificationsReadPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set all Notifications as read
     * <br>Use case  <br>User runs method execution  <br>System set all notifications as read
     * @param {module:api/NotificationsApi~apiV2NotificationsReadPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2NotificationsReadPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/notifications/read', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
