/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AutoTestResultsForTestRunModel from '../model/AutoTestResultsForTestRunModel';
import ProblemDetails from '../model/ProblemDetails';
import TestPointResultModel from '../model/TestPointResultModel';
import TestRunFillByAutoTestsPostModel from '../model/TestRunFillByAutoTestsPostModel';
import TestRunFillByConfigurationsPostModel from '../model/TestRunFillByConfigurationsPostModel';
import TestRunFillByWorkItemsPostModel from '../model/TestRunFillByWorkItemsPostModel';
import TestRunV2GetModel from '../model/TestRunV2GetModel';
import TestRunV2PostShortModel from '../model/TestRunV2PostShortModel';
import TestRunV2PutModel from '../model/TestRunV2PutModel';
import ValidationProblemDetails from '../model/ValidationProblemDetails';

/**
* TestRuns service.
* @module api/TestRunsApi
* @version 2.0.0
*/
export default class TestRunsApi {

    /**
    * Constructs a new TestRunsApi. 
    * @alias module:api/TestRunsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2TestRunsIdTestPointsResultsGet operation.
     * @callback module:api/TestRunsApi~apiV2TestRunsIdTestPointsResultsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestPointResultModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/TestRunsApi~apiV2TestRunsIdTestPointsResultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestPointResultModel>}
     */
    apiV2TestRunsIdTestPointsResultsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2TestRunsIdTestPointsResultsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TestPointResultModel];
      return this.apiClient.callApi(
        '/api/v2/testRuns/{id}/testPoints/results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2TestRunsIdTestResultsLastModifiedModificationDateGet operation.
     * @callback module:api/TestRunsApi~apiV2TestRunsIdTestResultsLastModifiedModificationDateGetCallback
     * @param {String} error Error message, if any.
     * @param {Date} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/TestRunsApi~apiV2TestRunsIdTestResultsLastModifiedModificationDateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Date}
     */
    apiV2TestRunsIdTestResultsLastModifiedModificationDateGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2TestRunsIdTestResultsLastModifiedModificationDateGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Date';
      return this.apiClient.callApi(
        '/api/v2/testRuns/{id}/testResults/lastModified/modificationDate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the completeTestRun operation.
     * @callback module:api/TestRunsApi~completeTestRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete TestRun
     * <br>Use case  <br>User sets test run identifier  <br>User runs method execution  <br>System completes test run  <br>System returns no content response
     * @param {String} id Test Run internal identifier (GUID format)
     * @param {module:api/TestRunsApi~completeTestRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    completeTestRun(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling completeTestRun");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/testRuns/{id}/complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAndFillByAutoTests operation.
     * @callback module:api/TestRunsApi~createAndFillByAutoTestsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestRunV2GetModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create test runs based on autotests and configurations
     * This method creates a test run based on an autotest and a configuration.  The difference between the `POST /api/v2/testRuns/byWorkItems` and `POST /api/v2/testRuns/byConfigurations` methods is  that in this method there is no need to create a test plan and work items (test cases and checklists).
     * @param {Object} opts Optional parameters
     * @param {module:model/TestRunFillByAutoTestsPostModel} opts.testRunFillByAutoTestsPostModel 
     * @param {module:api/TestRunsApi~createAndFillByAutoTestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestRunV2GetModel}
     */
    createAndFillByAutoTests(opts, callback) {
      opts = opts || {};
      let postBody = opts['testRunFillByAutoTestsPostModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestRunV2GetModel;
      return this.apiClient.callApi(
        '/api/v2/testRuns/byAutoTests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAndFillByConfigurations operation.
     * @callback module:api/TestRunsApi~createAndFillByConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestRunV2GetModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create test runs picking the needed test points
     * This method creates a test run based on a combination of a configuration and a work item(test case or checklist).  Before you create a test run using this method, make sure to create a test plan. Work items must be automated.  This method is different from the `POST /api/v2/testRuns/byWorkItems` method because of the ability to send a  jagged array within the \"<b>testPointSelectors</b>\" parameter.
     * @param {Object} opts Optional parameters
     * @param {module:model/TestRunFillByConfigurationsPostModel} opts.testRunFillByConfigurationsPostModel 
     * @param {module:api/TestRunsApi~createAndFillByConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestRunV2GetModel}
     */
    createAndFillByConfigurations(opts, callback) {
      opts = opts || {};
      let postBody = opts['testRunFillByConfigurationsPostModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestRunV2GetModel;
      return this.apiClient.callApi(
        '/api/v2/testRuns/byConfigurations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAndFillByWorkItems operation.
     * @callback module:api/TestRunsApi~createAndFillByWorkItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestRunV2GetModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create test run based on configurations and work items
     * This method creates a test run based on a combination of configuration and work item (test case or checklist).  Before you create a test run using this method, make sure to create a test plan.  Work items must be automated.
     * @param {Object} opts Optional parameters
     * @param {module:model/TestRunFillByWorkItemsPostModel} opts.testRunFillByWorkItemsPostModel 
     * @param {module:api/TestRunsApi~createAndFillByWorkItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestRunV2GetModel}
     */
    createAndFillByWorkItems(opts, callback) {
      opts = opts || {};
      let postBody = opts['testRunFillByWorkItemsPostModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestRunV2GetModel;
      return this.apiClient.callApi(
        '/api/v2/testRuns/byWorkItems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEmpty operation.
     * @callback module:api/TestRunsApi~createEmptyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestRunV2GetModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create empty TestRun
     * <br>Use case  <br>User sets test run model (listed in the request example)  <br>User runs method execution  <br>System creates test run  <br>System returns test run model
     * @param {Object} opts Optional parameters
     * @param {module:model/TestRunV2PostShortModel} opts.testRunV2PostShortModel 
     * @param {module:api/TestRunsApi~createEmptyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestRunV2GetModel}
     */
    createEmpty(opts, callback) {
      opts = opts || {};
      let postBody = opts['testRunV2PostShortModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestRunV2GetModel;
      return this.apiClient.callApi(
        '/api/v2/testRuns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTestRunById operation.
     * @callback module:api/TestRunsApi~getTestRunByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestRunV2GetModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get TestRun by Id
     * <br>Use case  <br>User sets test run identifier  <br>User runs method execution  <br>System finds test run  <br>System returns test run
     * @param {String} id Test Run internal identifier (GUID format)
     * @param {module:api/TestRunsApi~getTestRunByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestRunV2GetModel}
     */
    getTestRunById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTestRunById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestRunV2GetModel;
      return this.apiClient.callApi(
        '/api/v2/testRuns/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setAutoTestResultsForTestRun operation.
     * @callback module:api/TestRunsApi~setAutoTestResultsForTestRunCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send test results to the test runs in the system
     * This method sends test results to the test management system.
     * @param {String} id Test Run internal identifier (GUID format)
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/AutoTestResultsForTestRunModel>} opts.autoTestResultsForTestRunModel 
     * @param {module:api/TestRunsApi~setAutoTestResultsForTestRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    setAutoTestResultsForTestRun(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['autoTestResultsForTestRunModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setAutoTestResultsForTestRun");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v2/testRuns/{id}/testResults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startTestRun operation.
     * @callback module:api/TestRunsApi~startTestRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start TestRun
     * <br>Use case  <br>User sets test run identifier  <br>User runs method execution  <br>System starts test run  <br>System returns no content response
     * @param {String} id Test Run internal identifier (GUID format)
     * @param {module:api/TestRunsApi~startTestRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startTestRun(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling startTestRun");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/testRuns/{id}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopTestRun operation.
     * @callback module:api/TestRunsApi~stopTestRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop TestRun
     * <br>Use case  <br>User sets test run identifier  <br>User runs method execution  <br>System stops test run  <br>System returns no content response
     * @param {String} id Test Run internal identifier (GUID format)
     * @param {module:api/TestRunsApi~stopTestRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopTestRun(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stopTestRun");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/testRuns/{id}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmpty operation.
     * @callback module:api/TestRunsApi~updateEmptyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update empty TestRun
     * <br>Use case  <br>User sets test run properties (listed in the request example)  <br>User runs method execution  <br>System updates test run  <br>System returns returns no content response
     * @param {Object} opts Optional parameters
     * @param {module:model/TestRunV2PutModel} opts.testRunV2PutModel 
     * @param {module:api/TestRunsApi~updateEmptyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateEmpty(opts, callback) {
      opts = opts || {};
      let postBody = opts['testRunV2PutModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/testRuns', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
