/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProblemDetails from '../model/ProblemDetails';
import TagShortModel from '../model/TagShortModel';
import ValidationProblemDetails from '../model/ValidationProblemDetails';

/**
* Tags service.
* @module api/TagsApi
* @version 2.0.0
*/
export default class TagsApi {

    /**
    * Constructs a new TagsApi. 
    * @alias module:api/TagsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2TagsGet operation.
     * @callback module:api/TagsApi~apiV2TagsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Tags
     * <br>Use case  <br>User runs method execution  <br>System returns tags (listed in the response example)
     * @param {module:api/TagsApi~apiV2TagsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2TagsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2TagsTestPlansTagsGet operation.
     * @callback module:api/TagsApi~apiV2TagsTestPlansTagsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagShortModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Tags that are used in TestPlans
     * <br>Use case  <br>User runs method execution  <br>System returns tags (listed in the response example)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Amount of items to be skipped (offset)
     * @param {Number} opts.take Amount of items to be taken (limit)
     * @param {String} opts.orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {String} opts.searchField Property name for searching
     * @param {String} opts.searchValue Value for searching
     * @param {module:api/TagsApi~apiV2TagsTestPlansTagsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagShortModel>}
     */
    apiV2TagsTestPlansTagsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Skip': opts['skip'],
        'Take': opts['take'],
        'OrderBy': opts['orderBy'],
        'SearchField': opts['searchField'],
        'SearchValue': opts['searchValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TagShortModel];
      return this.apiClient.callApi(
        '/api/v2/tags/testPlansTags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
