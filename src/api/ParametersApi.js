/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ParameterGroupModel from '../model/ParameterGroupModel';
import ParameterModel from '../model/ParameterModel';
import ParameterPostModel from '../model/ParameterPostModel';
import ParameterPutModel from '../model/ParameterPutModel';
import ProblemDetails from '../model/ProblemDetails';
import ValidationProblemDetails from '../model/ValidationProblemDetails';

/**
* Parameters service.
* @module api/ParametersApi
* @version 2.0.0
*/
export default class ParametersApi {

    /**
    * Constructs a new ParametersApi. 
    * @alias module:api/ParametersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2ParametersBulkPost operation.
     * @callback module:api/ParametersApi~apiV2ParametersBulkPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ParameterModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create multiple parameters
     * <br>Use case  <br>User sets list of parameter model (listed in the request example)  <br>User runs method execution  <br>System creates parameters  <br>System returns list of parameter model (listed in the response example)
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ParameterPostModel>} opts.parameterPostModel 
     * @param {module:api/ParametersApi~apiV2ParametersBulkPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ParameterModel>}
     */
    apiV2ParametersBulkPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['parameterPostModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ParameterModel];
      return this.apiClient.callApi(
        '/api/v2/parameters/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ParametersBulkPut operation.
     * @callback module:api/ParametersApi~apiV2ParametersBulkPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update multiple parameters
     * <br>Use case  <br>User sets list of parameter model (listed in the request example)  <br>User runs method execution  <br>System updates parameters
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ParameterPutModel>} opts.parameterPutModel 
     * @param {module:api/ParametersApi~apiV2ParametersBulkPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2ParametersBulkPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['parameterPutModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/parameters/bulk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ParametersGroupsGet operation.
     * @callback module:api/ParametersApi~apiV2ParametersGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ParameterGroupModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get parameters as group
     * <br>Use case  <br>User runs method execution  <br>System search parameters  <br>System returns parameters models as groups (listed in the response example)
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isDeleted 
     * @param {Array.<String>} opts.parameterKeyIds 
     * @param {Number} opts.skip Amount of items to be skipped (offset)
     * @param {Number} opts.take Amount of items to be taken (limit)
     * @param {String} opts.orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {String} opts.searchField Property name for searching
     * @param {String} opts.searchValue Value for searching
     * @param {module:api/ParametersApi~apiV2ParametersGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ParameterGroupModel>}
     */
    apiV2ParametersGroupsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'isDeleted': opts['isDeleted'],
        'parameterKeyIds': this.apiClient.buildCollectionParam(opts['parameterKeyIds'], 'multi'),
        'Skip': opts['skip'],
        'Take': opts['take'],
        'OrderBy': opts['orderBy'],
        'SearchField': opts['searchField'],
        'SearchValue': opts['searchValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ParameterGroupModel];
      return this.apiClient.callApi(
        '/api/v2/parameters/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ParametersKeyNameNameExistsGet operation.
     * @callback module:api/ParametersApi~apiV2ParametersKeyNameNameExistsGetCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check existence parameter key in system
     * <br>Use case  <br>User sets name of parameter key  <br>User runs method execution  <br>System search parameter key  <br>System returns the flag for the existence of the parameter key in the system
     * @param {String} name 
     * @param {module:api/ParametersApi~apiV2ParametersKeyNameNameExistsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    apiV2ParametersKeyNameNameExistsGet(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling apiV2ParametersKeyNameNameExistsGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/api/v2/parameters/key/name/{name}/exists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ParametersKeyValuesGet operation.
     * @callback module:api/ParametersApi~apiV2ParametersKeyValuesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all parameter key values
     * <br>Use case  <br>User sets parameter key (string format)  <br>User runs method execution  <br>System search parameter values using the key  <br>System returns parameter
     * @param {String} key Parameter key (string format)
     * @param {module:api/ParametersApi~apiV2ParametersKeyValuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    apiV2ParametersKeyValuesGet(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling apiV2ParametersKeyValuesGet");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v2/parameters/{key}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ParametersKeysGet operation.
     * @callback module:api/ParametersApi~apiV2ParametersKeysGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all parameter keys
     * <br>Use case  <br>User runs method execution  <br>System search all parameter keys  <br>System returns parameter keys
     * @param {module:api/ParametersApi~apiV2ParametersKeysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    apiV2ParametersKeysGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v2/parameters/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createParameter operation.
     * @callback module:api/ParametersApi~createParameterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ParameterModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create parameter
     * <br>Use case  <br>User sets parameter model (listed in the request example)  <br>User runs method execution  <br>System creates parameter  <br>System returns parameter model
     * @param {Object} opts Optional parameters
     * @param {module:model/ParameterPostModel} opts.parameterPostModel 
     * @param {module:api/ParametersApi~createParameterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ParameterModel}
     */
    createParameter(opts, callback) {
      opts = opts || {};
      let postBody = opts['parameterPostModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ParameterModel;
      return this.apiClient.callApi(
        '/api/v2/parameters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteByName operation.
     * @callback module:api/ParametersApi~deleteByNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete parameter by name
     * Deletes parameter and all it's values
     * @param {String} name Name of the parameter
     * @param {module:api/ParametersApi~deleteByNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteByName(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteByName");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/parameters/name/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteByParameterKeyId operation.
     * @callback module:api/ParametersApi~deleteByParameterKeyIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete parameters by parameter key identifier
     * Deletes parameter and all it's values by parameter key identifier
     * @param {String} keyId 
     * @param {module:api/ParametersApi~deleteByParameterKeyIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteByParameterKeyId(keyId, callback) {
      let postBody = null;
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling deleteByParameterKeyId");
      }

      let pathParams = {
        'keyId': keyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/parameters/keyId/{keyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteParameter operation.
     * @callback module:api/ParametersApi~deleteParameterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete parameter
     * <br>Use case  <br>User sets parameter internal (guid format) identifier  <br>System search and delete parameter  <br>System returns deleted parameter
     * @param {String} id Parameter internal (UUID) identifier
     * @param {module:api/ParametersApi~deleteParameterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteParameter(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteParameter");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/parameters/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllParameters operation.
     * @callback module:api/ParametersApi~getAllParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ParameterModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all parameters
     * <br>Use case  <br>[Optional] User sets isDeleted field value  <br>[Optional] If User sets isDeleted field value as true, System search all deleted parameters  <br>[Optional] If User sets isDeleted field value as false, System search all parameters which are not deleted  <br>If User did not set isDeleted field value, System search all parameters  <br>System returns array of all found parameters(listed in response model)
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isDeleted If result must consist of only actual/deleted parameters
     * @param {Number} opts.skip Amount of items to be skipped (offset)
     * @param {Number} opts.take Amount of items to be taken (limit)
     * @param {String} opts.orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {String} opts.searchField Property name for searching
     * @param {String} opts.searchValue Value for searching
     * @param {module:api/ParametersApi~getAllParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ParameterModel}
     */
    getAllParameters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'isDeleted': opts['isDeleted'],
        'Skip': opts['skip'],
        'Take': opts['take'],
        'OrderBy': opts['orderBy'],
        'SearchField': opts['searchField'],
        'SearchValue': opts['searchValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ParameterModel;
      return this.apiClient.callApi(
        '/api/v2/parameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getParameterById operation.
     * @callback module:api/ParametersApi~getParameterByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ParameterModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get parameter by ID
     * <br>Use case  <br>User sets parameter internal (guid format) identifier  <br>User runs method execution  <br>System search parameter using the identifier  <br>System returns parameter
     * @param {String} id Parameter internal (UUID) identifier
     * @param {module:api/ParametersApi~getParameterByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ParameterModel}
     */
    getParameterById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getParameterById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ParameterModel;
      return this.apiClient.callApi(
        '/api/v2/parameters/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the obsoleteDeleteByName operation.
     * @callback module:api/ParametersApi~obsoleteDeleteByNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {module:api/ParametersApi~obsoleteDeleteByNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    obsoleteDeleteByName(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/parameters/deleteByName', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateParameter operation.
     * @callback module:api/ParametersApi~updateParameterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update parameter
     * <br>Use case  <br>User sets parameter updated properties(listed in the request example)  <br>User runs method execution  <br>System updated parameter using updated properties  <br>System returns no content response
     * @param {Object} opts Optional parameters
     * @param {module:model/ParameterPutModel} opts.parameterPutModel 
     * @param {module:api/ParametersApi~updateParameterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateParameter(opts, callback) {
      opts = opts || {};
      let postBody = opts['parameterPutModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/parameters', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
