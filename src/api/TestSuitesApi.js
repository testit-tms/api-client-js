/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfigurationModel from '../model/ConfigurationModel';
import ProblemDetails from '../model/ProblemDetails';
import TestPointByTestSuiteModel from '../model/TestPointByTestSuiteModel';
import TestResultV2ShortModel from '../model/TestResultV2ShortModel';
import TestSuiteV2GetModel from '../model/TestSuiteV2GetModel';
import TestSuiteV2PostModel from '../model/TestSuiteV2PostModel';
import TestSuiteV2PutModel from '../model/TestSuiteV2PutModel';
import TestSuiteWorkItemsSearchModel from '../model/TestSuiteWorkItemsSearchModel';
import ValidationProblemDetails from '../model/ValidationProblemDetails';
import WorkItemSelectModel from '../model/WorkItemSelectModel';
import WorkItemShortModel from '../model/WorkItemShortModel';

/**
* TestSuites service.
* @module api/TestSuitesApi
* @version 2.0.0
*/
export default class TestSuitesApi {

    /**
    * Constructs a new TestSuitesApi. 
    * @alias module:api/TestSuitesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addTestPointsToTestSuite operation.
     * @callback module:api/TestSuitesApi~addTestPointsToTestSuiteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add test-points to test suite
     * @param {String} id Test suite internal identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkItemSelectModel} opts.workItemSelectModel Filter object to retrieve work items for test-suite's project
     * @param {module:api/TestSuitesApi~addTestPointsToTestSuiteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addTestPointsToTestSuite(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['workItemSelectModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addTestPointsToTestSuite");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/testSuites/{id}/test-points', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTestSuite operation.
     * @callback module:api/TestSuitesApi~createTestSuiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestSuiteV2GetModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create TestSuite
     * <br>Use case  <br>User sets test suite model (listed in request parameters)  <br>User runs method execution  <br>System creates test suite  <br>System returns test suite
     * @param {Object} opts Optional parameters
     * @param {module:model/TestSuiteV2PostModel} opts.testSuiteV2PostModel 
     * @param {module:api/TestSuitesApi~createTestSuiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestSuiteV2GetModel}
     */
    createTestSuite(opts, callback) {
      opts = opts || {};
      let postBody = opts['testSuiteV2PostModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestSuiteV2GetModel;
      return this.apiClient.callApi(
        '/api/v2/testSuites', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTestSuite operation.
     * @callback module:api/TestSuitesApi~deleteTestSuiteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete TestSuite
     * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System deletes test suite  <br>System returns no content response
     * @param {String} id Test suite internal (guid format) identifier\"
     * @param {module:api/TestSuitesApi~deleteTestSuiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    deleteTestSuite(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTestSuite");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v2/testSuites/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigurationsByTestSuiteId operation.
     * @callback module:api/TestSuitesApi~getConfigurationsByTestSuiteIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConfigurationModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Configurations By Id
     * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search configurations related to the test points  <br>System returns configurations array
     * @param {String} id Test suite internal (guid format) identifier\"
     * @param {module:api/TestSuitesApi~getConfigurationsByTestSuiteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConfigurationModel>}
     */
    getConfigurationsByTestSuiteId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getConfigurationsByTestSuiteId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ConfigurationModel];
      return this.apiClient.callApi(
        '/api/v2/testSuites/{id}/configurations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTestPointsById operation.
     * @callback module:api/TestSuitesApi~getTestPointsByIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestPointByTestSuiteModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get TestPoints By Id
     * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System returns test points array
     * @param {String} id Test suite internal (guid format) identifier\"
     * @param {module:api/TestSuitesApi~getTestPointsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestPointByTestSuiteModel>}
     */
    getTestPointsById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTestPointsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TestPointByTestSuiteModel];
      return this.apiClient.callApi(
        '/api/v2/testSuites/{id}/testPoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTestResultsById operation.
     * @callback module:api/TestSuitesApi~getTestResultsByIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestResultV2ShortModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get TestResults By Id
     * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search test results related to the test points  <br>System returns test results array
     * @param {String} id Test suite internal (guid format) identifier\"
     * @param {module:api/TestSuitesApi~getTestResultsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestResultV2ShortModel>}
     */
    getTestResultsById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTestResultsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TestResultV2ShortModel];
      return this.apiClient.callApi(
        '/api/v2/testSuites/{id}/testResults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTestSuiteById operation.
     * @callback module:api/TestSuitesApi~getTestSuiteByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestSuiteV2GetModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get TestSuite by Id
     * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System returns test suite
     * @param {String} id Test suite internal (guid format) identifier\"
     * @param {module:api/TestSuitesApi~getTestSuiteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestSuiteV2GetModel}
     */
    getTestSuiteById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTestSuiteById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestSuiteV2GetModel;
      return this.apiClient.callApi(
        '/api/v2/testSuites/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkItemsById operation.
     * @callback module:api/TestSuitesApi~getWorkItemsByIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkItemShortModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isDeleted  (default to false)
     * @param {Array.<String>} opts.tagNames 
     * @param {Number} opts.skip Amount of items to be skipped (offset)
     * @param {Number} opts.take Amount of items to be taken (limit)
     * @param {String} opts.orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {String} opts.searchField Property name for searching
     * @param {String} opts.searchValue Value for searching
     * @param {module:api/TestSuitesApi~getWorkItemsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkItemShortModel>}
     */
    getWorkItemsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWorkItemsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'isDeleted': opts['isDeleted'],
        'tagNames': this.apiClient.buildCollectionParam(opts['tagNames'], 'multi'),
        'Skip': opts['skip'],
        'Take': opts['take'],
        'OrderBy': opts['orderBy'],
        'SearchField': opts['searchField'],
        'SearchValue': opts['searchValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkItemShortModel];
      return this.apiClient.callApi(
        '/api/v2/testSuites/{id}/workItems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchWorkItems operation.
     * @callback module:api/TestSuitesApi~searchWorkItemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkItemShortModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search WorkItems
     * <br>Use case  <br>User sets test suite identifier  <br>[Optional] User sets filter  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search workitems related to the test points  <br>                      [Optional] User sets filter, system applies filter                     <br>System returns workitems array
     * @param {String} id Test suite internal (guid format) identifier\"
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Amount of items to be skipped (offset)
     * @param {Number} opts.take Amount of items to be taken (limit)
     * @param {String} opts.orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {String} opts.searchField Property name for searching
     * @param {String} opts.searchValue Value for searching
     * @param {module:model/TestSuiteWorkItemsSearchModel} opts.testSuiteWorkItemsSearchModel 
     * @param {module:api/TestSuitesApi~searchWorkItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkItemShortModel>}
     */
    searchWorkItems(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['testSuiteWorkItemsSearchModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling searchWorkItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'Skip': opts['skip'],
        'Take': opts['take'],
        'OrderBy': opts['orderBy'],
        'SearchField': opts['searchField'],
        'SearchValue': opts['searchValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [WorkItemShortModel];
      return this.apiClient.callApi(
        '/api/v2/testSuites/{id}/workItems/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setConfigurationsByTestSuiteId operation.
     * @callback module:api/TestSuitesApi~setConfigurationsByTestSuiteIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConfigurationModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Configurations By TestSuite Id
     * <br>Use case  <br>User sets test suite identifier  <br>User sets collection of configuration identifiers  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search configuration  <br>System restores(if exist) or creates test points with listed configuration  <br>System returns no content response
     * @param {String} id Test suite internal (guid format) identifier\"
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody Collection of configuration identifiers\"
     * @param {module:api/TestSuitesApi~setConfigurationsByTestSuiteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConfigurationModel>}
     */
    setConfigurationsByTestSuiteId(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setConfigurationsByTestSuiteId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ConfigurationModel];
      return this.apiClient.callApi(
        '/api/v2/testSuites/{id}/configurations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setWorkItemsByTestSuiteId operation.
     * @callback module:api/TestSuitesApi~setWorkItemsByTestSuiteIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkItemShortModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set WorkItems By TestSuite Id
     * <br>Use case  <br>User sets test suite identifier  <br>User sets collection of workitems identifiers  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search workitems  <br>System restores(if exist) or creates test points with listed workitems  <br>System returns no content response
     * @param {String} id Test suite internal (guid format) identifier\"
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody Collection of workitem identifiers\"
     * @param {module:api/TestSuitesApi~setWorkItemsByTestSuiteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkItemShortModel>}
     */
    setWorkItemsByTestSuiteId(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setWorkItemsByTestSuiteId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [WorkItemShortModel];
      return this.apiClient.callApi(
        '/api/v2/testSuites/{id}/workItems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTestSuite operation.
     * @callback module:api/TestSuitesApi~updateTestSuiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestSuiteV2GetModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update TestSuite
     * <br>Use case  <br>User sets test suite model (listed in request parameters)  <br>User runs method execution  <br>System updates test suite  <br>System returns test suite
     * @param {Object} opts Optional parameters
     * @param {module:model/TestSuiteV2PutModel} opts.testSuiteV2PutModel 
     * @param {module:api/TestSuitesApi~updateTestSuiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestSuiteV2GetModel}
     */
    updateTestSuite(opts, callback) {
      opts = opts || {};
      let postBody = opts['testSuiteV2PutModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestSuiteV2GetModel;
      return this.apiClient.callApi(
        '/api/v2/testSuites', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
