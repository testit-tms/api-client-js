/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { ProblemDetails } from '../model/problemDetails';
import { TestPlanTestPointsAnalyticsApiModel } from '../model/testPlanTestPointsAnalyticsApiModel';
import { TestPlanTestPointsAnalyticsApiResult } from '../model/testPlanTestPointsAnalyticsApiResult';
import { TestPlanTestPointsApiModel } from '../model/testPlanTestPointsApiModel';
import { TestPlanTestPointsAutoTestsRerunApiModel } from '../model/testPlanTestPointsAutoTestsRerunApiModel';
import { TestPlanTestPointsAutoTestsRunApiModel } from '../model/testPlanTestPointsAutoTestsRunApiModel';
import { TestPlanTestPointsGroupSearchApiResult } from '../model/testPlanTestPointsGroupSearchApiResult';
import { TestPlanTestPointsSetTestersApiModel } from '../model/testPlanTestPointsSetTestersApiModel';
import { TestRunNameApiResult } from '../model/testRunNameApiResult';
import { ValidationProblemDetails } from '../model/validationProblemDetails';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'http://localhost';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ProjectTestPlanTestPointsApiApiKeys {
    'Bearer or PrivateToken',
}

export class ProjectTestPlanTestPointsApi {
    protected _basePath = defaultBasePath;
    
    protected _defaultHeaders : any = {};
    protected _rejectUnauthorized : boolean = true;
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'Bearer or PrivateToken': new ApiKeyAuth('header', 'Authorization'),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: ProjectTestPlanTestPointsApiApiKeys, value: string) {
        (this.authentications as any)[ProjectTestPlanTestPointsApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    public setRejectUnauthorized(value: boolean) {
        this._rejectUnauthorized = value;
    }

    /**
     * 
     * @summary Get test points analytics.
     * @param projectId 
     * @param testPlanId 
     * @param testPlanTestPointsAnalyticsApiModel 
     */
    public async apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAnalyticsPost (projectId: string, testPlanId: string, testPlanTestPointsAnalyticsApiModel?: TestPlanTestPointsAnalyticsApiModel, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TestPlanTestPointsAnalyticsApiResult;  }> {
        const localVarPath = this.basePath + '/api/v2/projects/{projectId}/test-plans/{testPlanId}/test-points/analytics'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'testPlanId' + '}', encodeURIComponent(String(testPlanId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAnalyticsPost.');
        }

        // verify required parameter 'testPlanId' is not null or undefined
        if (testPlanId === null || testPlanId === undefined) {
            throw new Error('Required parameter testPlanId was null or undefined when calling apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAnalyticsPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        
    let localVarRequestOptions: localVarRequest.Options = {
            rejectUnauthorized: this._rejectUnauthorized,
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(testPlanTestPointsAnalyticsApiModel, "TestPlanTestPointsAnalyticsApiModel")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications['Bearer or PrivateToken'].apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications['Bearer or PrivateToken'].applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: TestPlanTestPointsAnalyticsApiResult;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "TestPlanTestPointsAnalyticsApiResult");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @summary Rerun autotests.
     * @param projectId 
     * @param testPlanId 
     * @param testPlanTestPointsAutoTestsRerunApiModel 
     */
    public async apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAutotestsRerunPost (projectId: string, testPlanId: string, testPlanTestPointsAutoTestsRerunApiModel?: TestPlanTestPointsAutoTestsRerunApiModel, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/api/v2/projects/{projectId}/test-plans/{testPlanId}/test-points/autotests/rerun'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'testPlanId' + '}', encodeURIComponent(String(testPlanId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAutotestsRerunPost.');
        }

        // verify required parameter 'testPlanId' is not null or undefined
        if (testPlanId === null || testPlanId === undefined) {
            throw new Error('Required parameter testPlanId was null or undefined when calling apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAutotestsRerunPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        
    let localVarRequestOptions: localVarRequest.Options = {
            rejectUnauthorized: this._rejectUnauthorized,
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(testPlanTestPointsAutoTestsRerunApiModel, "TestPlanTestPointsAutoTestsRerunApiModel")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications['Bearer or PrivateToken'].apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications['Bearer or PrivateToken'].applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @summary Run autotests.
     * @param projectId 
     * @param testPlanId 
     * @param testPlanTestPointsAutoTestsRunApiModel 
     */
    public async apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAutotestsRunPost (projectId: string, testPlanId: string, testPlanTestPointsAutoTestsRunApiModel?: TestPlanTestPointsAutoTestsRunApiModel, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TestRunNameApiResult;  }> {
        const localVarPath = this.basePath + '/api/v2/projects/{projectId}/test-plans/{testPlanId}/test-points/autotests/run'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'testPlanId' + '}', encodeURIComponent(String(testPlanId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAutotestsRunPost.');
        }

        // verify required parameter 'testPlanId' is not null or undefined
        if (testPlanId === null || testPlanId === undefined) {
            throw new Error('Required parameter testPlanId was null or undefined when calling apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAutotestsRunPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        
    let localVarRequestOptions: localVarRequest.Options = {
            rejectUnauthorized: this._rejectUnauthorized,
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(testPlanTestPointsAutoTestsRunApiModel, "TestPlanTestPointsAutoTestsRunApiModel")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications['Bearer or PrivateToken'].apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications['Bearer or PrivateToken'].applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: TestRunNameApiResult;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "TestRunNameApiResult");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @summary Search test points in test plan.
     * @param projectId 
     * @param testPlanId 
     * @param testPlanTestPointsApiModel 
     */
    public async apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsGroupingSearchPost (projectId: string, testPlanId: string, testPlanTestPointsApiModel?: TestPlanTestPointsApiModel, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TestPlanTestPointsGroupSearchApiResult;  }> {
        const localVarPath = this.basePath + '/api/v2/projects/{projectId}/test-plans/{testPlanId}/test-points/grouping-search'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'testPlanId' + '}', encodeURIComponent(String(testPlanId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsGroupingSearchPost.');
        }

        // verify required parameter 'testPlanId' is not null or undefined
        if (testPlanId === null || testPlanId === undefined) {
            throw new Error('Required parameter testPlanId was null or undefined when calling apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsGroupingSearchPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        
    let localVarRequestOptions: localVarRequest.Options = {
            rejectUnauthorized: this._rejectUnauthorized,
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(testPlanTestPointsApiModel, "TestPlanTestPointsApiModel")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications['Bearer or PrivateToken'].apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications['Bearer or PrivateToken'].applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: TestPlanTestPointsGroupSearchApiResult;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "TestPlanTestPointsGroupSearchApiResult");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @summary Distribute test points between the users.
     * @param projectId 
     * @param testPlanId 
     * @param testPlanTestPointsSetTestersApiModel 
     */
    public async apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsTestersPost (projectId: string, testPlanId: string, testPlanTestPointsSetTestersApiModel?: TestPlanTestPointsSetTestersApiModel, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/api/v2/projects/{projectId}/test-plans/{testPlanId}/test-points/testers'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'testPlanId' + '}', encodeURIComponent(String(testPlanId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsTestersPost.');
        }

        // verify required parameter 'testPlanId' is not null or undefined
        if (testPlanId === null || testPlanId === undefined) {
            throw new Error('Required parameter testPlanId was null or undefined when calling apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsTestersPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        
    let localVarRequestOptions: localVarRequest.Options = {
            rejectUnauthorized: this._rejectUnauthorized,
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(testPlanTestPointsSetTestersApiModel, "TestPlanTestPointsSetTestersApiModel")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications['Bearer or PrivateToken'].apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications['Bearer or PrivateToken'].applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
