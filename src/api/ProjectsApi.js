/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AutoTestNamespaceModel from '../model/AutoTestNamespaceModel';
import ConfigurationModel from '../model/ConfigurationModel';
import CustomAttributeModel from '../model/CustomAttributeModel';
import CustomAttributePostModel from '../model/CustomAttributePostModel';
import CustomAttributePutModel from '../model/CustomAttributePutModel';
import CustomAttributeTestPlanProjectRelationPutModel from '../model/CustomAttributeTestPlanProjectRelationPutModel';
import FailureClassModel from '../model/FailureClassModel';
import FilterModel from '../model/FilterModel';
import ProblemDetails from '../model/ProblemDetails';
import ProjectExportQueryModel from '../model/ProjectExportQueryModel';
import ProjectExportWithTestPlansPostModel from '../model/ProjectExportWithTestPlansPostModel';
import ProjectModel from '../model/ProjectModel';
import ProjectPostModel from '../model/ProjectPostModel';
import ProjectPutModel from '../model/ProjectPutModel';
import ProjectSelectModel from '../model/ProjectSelectModel';
import PublicTestRunModel from '../model/PublicTestRunModel';
import SectionModel from '../model/SectionModel';
import TagShortModel from '../model/TagShortModel';
import TestPlanModel from '../model/TestPlanModel';
import TestPlanSearchQueryModel from '../model/TestPlanSearchQueryModel';
import TestPlanWithAnalyticModel from '../model/TestPlanWithAnalyticModel';
import TestRunModel from '../model/TestRunModel';
import TestRunV2GetModel from '../model/TestRunV2GetModel';
import ValidationProblemDetails from '../model/ValidationProblemDetails';
import WorkItemShortModel from '../model/WorkItemShortModel';

/**
* Projects service.
* @module api/ProjectsApi
* @version 2.0.0
*/
export default class ProjectsApi {

    /**
    * Constructs a new ProjectsApi. 
    * @alias module:api/ProjectsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2ProjectsIdCustomAttributeTemplatesTemplateIdDelete operation.
     * @callback module:api/ProjectsApi~apiV2ProjectsIdCustomAttributeTemplatesTemplateIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete CustomAttributeTemplate from Project
     * <br>Use case  <br>User sets project internal or global identifier   <br>User sets attribute template internal identifier   <br>User runs method execution  <br>System delete attribute template from project
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {String} templateId CustomAttributeTemplate internal (UUID) identifier
     * @param {module:api/ProjectsApi~apiV2ProjectsIdCustomAttributeTemplatesTemplateIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2ProjectsIdCustomAttributeTemplatesTemplateIdDelete(id, templateId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2ProjectsIdCustomAttributeTemplatesTemplateIdDelete");
      }
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling apiV2ProjectsIdCustomAttributeTemplatesTemplateIdDelete");
      }

      let pathParams = {
        'id': id,
        'templateId': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/customAttributeTemplates/{templateId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ProjectsIdCustomAttributeTemplatesTemplateIdPost operation.
     * @callback module:api/ProjectsApi~apiV2ProjectsIdCustomAttributeTemplatesTemplateIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add CustomAttributeTemplate to Project
     * <br>Use case  <br>User sets project internal or global identifier   <br>User sets attribute template internal identifier   <br>User runs method execution  <br>System add attribute template to project
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {String} templateId CustomAttributeTemplate internal (UUID) identifier
     * @param {module:api/ProjectsApi~apiV2ProjectsIdCustomAttributeTemplatesTemplateIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2ProjectsIdCustomAttributeTemplatesTemplateIdPost(id, templateId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2ProjectsIdCustomAttributeTemplatesTemplateIdPost");
      }
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling apiV2ProjectsIdCustomAttributeTemplatesTemplateIdPost");
      }

      let pathParams = {
        'id': id,
        'templateId': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/customAttributeTemplates/{templateId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ProjectsIdFailureClassesGet operation.
     * @callback module:api/ProjectsApi~apiV2ProjectsIdFailureClassesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FailureClassModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Project FailureClasses
     * <br>Use case  <br>User sets project internal or global identifier   <br>User runs method execution  <br>System returns project failre classes
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isDeleted 
     * @param {module:api/ProjectsApi~apiV2ProjectsIdFailureClassesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FailureClassModel>}
     */
    apiV2ProjectsIdFailureClassesGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2ProjectsIdFailureClassesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'isDeleted': opts['isDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FailureClassModel];
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/failureClasses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ProjectsIdFavoritePut operation.
     * @callback module:api/ProjectsApi~apiV2ProjectsIdFavoritePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark Project as favorite
     * User permissions for project:  {Read only}  {Execute}  {Write}  {Full control}
     * @param {String} id 
     * @param {module:api/ProjectsApi~apiV2ProjectsIdFavoritePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2ProjectsIdFavoritePut(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2ProjectsIdFavoritePut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/favorite', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ProjectsIdFiltersGet operation.
     * @callback module:api/ProjectsApi~apiV2ProjectsIdFiltersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FilterModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Project filters
     * <br>Use case  <br>User sets project internal or global identifier   <br>User runs method execution  <br>System returns project filters
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {module:api/ProjectsApi~apiV2ProjectsIdFiltersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FilterModel>}
     */
    apiV2ProjectsIdFiltersGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2ProjectsIdFiltersGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FilterModel];
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ProjectsIdTestPlansAnalyticsGet operation.
     * @callback module:api/ProjectsApi~apiV2ProjectsIdTestPlansAnalyticsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestPlanWithAnalyticModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get TestPlans analytics
     * <br>Use case  <br>User sets project internal identifier  <br>User sets query params  <br>User runs method execution  <br>System return analytics
     * @param {String} id Project internal (UUID) identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isDeleted 
     * @param {Boolean} opts.mustUpdateCache  (default to false)
     * @param {Number} opts.skip Amount of items to be skipped (offset)
     * @param {Number} opts.take Amount of items to be taken (limit)
     * @param {String} opts.orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {String} opts.searchField Property name for searching
     * @param {String} opts.searchValue Value for searching
     * @param {module:api/ProjectsApi~apiV2ProjectsIdTestPlansAnalyticsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestPlanWithAnalyticModel>}
     */
    apiV2ProjectsIdTestPlansAnalyticsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2ProjectsIdTestPlansAnalyticsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'isDeleted': opts['isDeleted'],
        'mustUpdateCache': opts['mustUpdateCache'],
        'Skip': opts['skip'],
        'Take': opts['take'],
        'OrderBy': opts['orderBy'],
        'SearchField': opts['searchField'],
        'SearchValue': opts['searchValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TestPlanWithAnalyticModel];
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/testPlans/analytics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ProjectsIdTestPlansSearchPost operation.
     * @callback module:api/ProjectsApi~apiV2ProjectsIdTestPlansSearchPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestPlanWithAnalyticModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Project TestPlans with analytics
     * <br>Use case  <br>User sets project internal or global identifier   <br>User sets request body   <br>User runs method execution  <br>System returns project testplans with analytics
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.mustUpdateCache  (default to false)
     * @param {Number} opts.skip Amount of items to be skipped (offset)
     * @param {Number} opts.take Amount of items to be taken (limit)
     * @param {String} opts.orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {String} opts.searchField Property name for searching
     * @param {String} opts.searchValue Value for searching
     * @param {module:model/TestPlanSearchQueryModel} opts.testPlanSearchQueryModel 
     * @param {module:api/ProjectsApi~apiV2ProjectsIdTestPlansSearchPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestPlanWithAnalyticModel>}
     */
    apiV2ProjectsIdTestPlansSearchPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['testPlanSearchQueryModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2ProjectsIdTestPlansSearchPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'mustUpdateCache': opts['mustUpdateCache'],
        'Skip': opts['skip'],
        'Take': opts['take'],
        'OrderBy': opts['orderBy'],
        'SearchField': opts['searchField'],
        'SearchValue': opts['searchValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [TestPlanWithAnalyticModel];
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/testPlans/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ProjectsIdTestRunsActiveGet operation.
     * @callback module:api/ProjectsApi~apiV2ProjectsIdTestRunsActiveGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PublicTestRunModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get active Project TestRuns
     * <br>Use case  <br>User sets project internal or global identifier   <br>User runs method execution  <br>System returns active testruns
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {module:api/ProjectsApi~apiV2ProjectsIdTestRunsActiveGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PublicTestRunModel>}
     */
    apiV2ProjectsIdTestRunsActiveGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2ProjectsIdTestRunsActiveGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PublicTestRunModel];
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/testRuns/active', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ProjectsIdTestRunsFullGet operation.
     * @callback module:api/ProjectsApi~apiV2ProjectsIdTestRunsFullGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestRunModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Project TestRuns full models
     * <br>Use case  <br>User sets project internal or global identifier   <br>User sets query params   <br>User runs method execution  <br>System returns project test runs full models
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeTestResults  (default to false)
     * @param {Boolean} opts.mustAggregateTestResults  (default to true)
     * @param {Boolean} opts.notStarted 
     * @param {Boolean} opts.inProgress 
     * @param {Boolean} opts.stopped 
     * @param {Boolean} opts.completed 
     * @param {Date} opts.createdDateFrom 
     * @param {Date} opts.createdDateTo 
     * @param {String} opts.testPlanId 
     * @param {Number} opts.skip Amount of items to be skipped (offset)
     * @param {Number} opts.take Amount of items to be taken (limit)
     * @param {String} opts.orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {String} opts.searchField Property name for searching
     * @param {String} opts.searchValue Value for searching
     * @param {module:api/ProjectsApi~apiV2ProjectsIdTestRunsFullGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestRunModel>}
     */
    apiV2ProjectsIdTestRunsFullGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2ProjectsIdTestRunsFullGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'includeTestResults': opts['includeTestResults'],
        'mustAggregateTestResults': opts['mustAggregateTestResults'],
        'notStarted': opts['notStarted'],
        'inProgress': opts['inProgress'],
        'stopped': opts['stopped'],
        'completed': opts['completed'],
        'createdDateFrom': opts['createdDateFrom'],
        'createdDateTo': opts['createdDateTo'],
        'testPlanId': opts['testPlanId'],
        'Skip': opts['skip'],
        'Take': opts['take'],
        'OrderBy': opts['orderBy'],
        'SearchField': opts['searchField'],
        'SearchValue': opts['searchValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TestRunModel];
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/testRuns/full', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ProjectsIdWorkItemsTagsGet operation.
     * @callback module:api/ProjectsApi~apiV2ProjectsIdWorkItemsTagsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagShortModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get WorkItems Tags
     * <br>Use case  <br>User sets project internal identifier   <br>User runs method execution  <br>System returns work items tags
     * @param {String} id Project internal (UUID) identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isDeleted 
     * @param {module:api/ProjectsApi~apiV2ProjectsIdWorkItemsTagsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagShortModel>}
     */
    apiV2ProjectsIdWorkItemsTagsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2ProjectsIdWorkItemsTagsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'isDeleted': opts['isDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TagShortModel];
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/workItems/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ProjectsSearchPost operation.
     * @callback module:api/ProjectsApi~apiV2ProjectsSearchPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Amount of items to be skipped (offset)
     * @param {Number} opts.take Amount of items to be taken (limit)
     * @param {String} opts.orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {String} opts.searchField Property name for searching
     * @param {String} opts.searchValue Value for searching
     * @param {module:model/ProjectSelectModel} opts.projectSelectModel 
     * @param {module:api/ProjectsApi~apiV2ProjectsSearchPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectModel>}
     */
    apiV2ProjectsSearchPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['projectSelectModel'];

      let pathParams = {
      };
      let queryParams = {
        'Skip': opts['skip'],
        'Take': opts['take'],
        'OrderBy': opts['orderBy'],
        'SearchField': opts['searchField'],
        'SearchValue': opts['searchValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProjectModel];
      return this.apiClient.callApi(
        '/api/v2/projects/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callExport operation.
     * @callback module:api/ProjectsApi~callExportCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export project as JSON file
     * <br>This method exports the selected project or its part (sections, work items) to a `.json` file.  <br>In the request body, you can specify sections and test cases to be exported.  <br>Example of a request to export two sections and two test cases:  <br>    <code>              curl -X POST \"http://{domain}.com/api/v2/projects/27a32ce6-d972-4ef8-bef5-51be4bf9e468/export\" \\              -H \"accept: application/json\" -H \"Authorization: PrivateToken {token}\" -H \"Content-Type: application/json-patch+json\" \\              -d \"{\\\"sectionIds\\\":[\\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\\",\\\"9fa85f64-5717-4562-b3fc-2c963f66a000\\\"],\\\"workItemIds\\\":[\\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\\",\\\"90085f64-5717-4562-b3fc-2c963f66a000\\\"]}\"              </code>    <br>In the response, you get:  <br>              - A `.zip` file with attachments and a.json file if you enable attachments export.<br />              - A `.json` file with the project if you do not enable attachments export.              
     * @param {String} id Specifies the ID of the project you want to export.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeAttachments Enables attachment export. (default to false)
     * @param {module:model/ProjectExportQueryModel} opts.projectExportQueryModel 
     * @param {module:api/ProjectsApi~callExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    callExport(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['projectExportQueryModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling callExport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'includeAttachments': opts['includeAttachments']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callImport operation.
     * @callback module:api/ProjectsApi~callImportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import project from JSON file
     * <br>    <b>A project can only be exported to another TMS instance, different from the one it was imported from.</b>    <br>This method imports a `.json` file with a project to the test management system.  <br>In the body of the request, send the `.json` file received by the `POST /api/v2/projects/export` method:  <br>    <code>              curl -X POST \"http://{domain.com}/api/v2/projects/import\" \\              -H \"accept: /\" -H \"Authorization: PrivateToken {token}\" -H \"Content-Type: multipart/form-data\" \\              -F \"file=@import.txt;type=text/plain\"              </code>    <br>              In the second instance, a project with the name of the imported one is created.              User attributes and the test library (along with content and structure) are imported.                <br>Test plan execution history from the first instance of TMS cannot be transferred.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeAttachments Enables attachment import. (default to false)
     * @param {File} opts.file Select file
     * @param {module:api/ProjectsApi~callImportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    callImport(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'includeAttachments': opts['includeAttachments']
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/projects/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCustomAttributeTestPlanProjectRelations operation.
     * @callback module:api/ProjectsApi~createCustomAttributeTestPlanProjectRelationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add attributes to project's test plans
     * <br>Use case  <br>User sets project internal or global identifier and attributes identifiers  <br>User runs method execution  <br>System updates project and add attributes to project for test plans  <br>System returns no content response
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/ProjectsApi~createCustomAttributeTestPlanProjectRelationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createCustomAttributeTestPlanProjectRelations(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createCustomAttributeTestPlanProjectRelations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/testPlans/attributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProject operation.
     * @callback module:api/ProjectsApi~createProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create project
     * <br>Use case  <br>User sets project parameters (listed in request example) and runs method execution  <br>System creates project  <br>System returns project model (example listed in response parameters)
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectPostModel} opts.projectPostModel 
     * @param {module:api/ProjectsApi~createProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectModel}
     */
    createProject(opts, callback) {
      opts = opts || {};
      let postBody = opts['projectPostModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectModel;
      return this.apiClient.callApi(
        '/api/v2/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProjectsAttribute operation.
     * @callback module:api/ProjectsApi~createProjectsAttributeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomAttributeModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create project attribute
     * <br>Use case  <br>User sets attribute parameters (listed in request example) and runs method execution  <br>System search project  <br>System creates attribute and relates it to the project  <br>System returns project attribute properties (example listed in response parameters)
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomAttributePostModel} opts.customAttributePostModel 
     * @param {module:api/ProjectsApi~createProjectsAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomAttributeModel}
     */
    createProjectsAttribute(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['customAttributePostModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createProjectsAttribute");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomAttributeModel;
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/attributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomAttributeTestPlanProjectRelations operation.
     * @callback module:api/ProjectsApi~deleteCustomAttributeTestPlanProjectRelationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete attribute from project's test plans
     * <br>Use case  <br>User sets project internal or global identifier and attribute identifier  <br>User runs method execution  <br>System updates project and delete attribute from project for test plans  <br>System returns no content response
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {String} attributeId 
     * @param {module:api/ProjectsApi~deleteCustomAttributeTestPlanProjectRelationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCustomAttributeTestPlanProjectRelations(id, attributeId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCustomAttributeTestPlanProjectRelations");
      }
      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling deleteCustomAttributeTestPlanProjectRelations");
      }

      let pathParams = {
        'id': id,
        'attributeId': attributeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/testPlans/attribute/{attributeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProject operation.
     * @callback module:api/ProjectsApi~deleteProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete project
     * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search and delete project  <br>System returns no content response
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {module:api/ProjectsApi~deleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProject(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProject");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/projects/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProjectAutoTests operation.
     * @callback module:api/ProjectsApi~deleteProjectAutoTestsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete project
     * <br>Use case  <br>User sets project internal or global identifier   <br>User runs method execution  <br>System delete all autotests from project  <br>System returns no content response
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {module:api/ProjectsApi~deleteProjectAutoTestsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProjectAutoTests(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProjectAutoTests");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/autoTests', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProjectsAttribute operation.
     * @callback module:api/ProjectsApi~deleteProjectsAttributeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete project attribute
     * <br>Use case  <br>User sets project identifier and runs method execution  <br>User sets attribute identifier  <br>User runs method execution  <br>System search project  <br>System search and delete attribute  <br>System returns no content response
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {String} attributeId Project attribute internal (UUID) or global (integer) identifier
     * @param {module:api/ProjectsApi~deleteProjectsAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProjectsAttribute(id, attributeId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProjectsAttribute");
      }
      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling deleteProjectsAttribute");
      }

      let pathParams = {
        'id': id,
        'attributeId': attributeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/attributes/{attributeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportWithTestPlansAndConfigurations operation.
     * @callback module:api/ProjectsApi~exportWithTestPlansAndConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export project with test plans, test suites and test points as JSON file
     * <br>    <b>You cannot export test cases execution history.</b>    <br>This method exports the project with the test library and specified test plans to another TMS instance.  <br>              After sending a correct request, the project is exported to a `.json` file.              If you enable attachment export, the `.json` file and the attachments are placed in a `.zip` file.              You can import such a project by using the `POST /api/v2/projects/import` method.              
     * @param {String} id Specifies the ID of the project you want to export.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeAttachments Enables attachment export. (default to false)
     * @param {module:model/ProjectExportWithTestPlansPostModel} opts.projectExportWithTestPlansPostModel 
     * @param {module:api/ProjectsApi~exportWithTestPlansAndConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    exportWithTestPlansAndConfigurations(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['projectExportWithTestPlansPostModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportWithTestPlansAndConfigurations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'includeAttachments': opts['includeAttachments']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/export-by-testPlans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllProjects operation.
     * @callback module:api/ProjectsApi~getAllProjectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all projects
     * <br>Use case  <br>[Optional] User sets isDeleted field value  <br>[Optional] If User sets isDeleted field value as true, System search all deleted projects  <br>[Optional] If User sets isDeleted field value as false, System search all projects which are not deleted  <br>If User did not set isDeleted field value, System search all projects  <br>System returns array of all found projects(listed in response model)
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isDeleted If result must consist of only actual/deleted parameters
     * @param {String} opts.projectName 
     * @param {Number} opts.skip Amount of items to be skipped (offset)
     * @param {Number} opts.take Amount of items to be taken (limit)
     * @param {String} opts.orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {String} opts.searchField Property name for searching
     * @param {String} opts.searchValue Value for searching
     * @param {module:api/ProjectsApi~getAllProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectModel>}
     */
    getAllProjects(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'isDeleted': opts['isDeleted'],
        'projectName': opts['projectName'],
        'Skip': opts['skip'],
        'Take': opts['take'],
        'OrderBy': opts['orderBy'],
        'SearchField': opts['searchField'],
        'SearchValue': opts['searchValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectModel];
      return this.apiClient.callApi(
        '/api/v2/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttributeByProjectId operation.
     * @callback module:api/ProjectsApi~getAttributeByProjectIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomAttributeModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project attribute
     * <br>Use case  <br>User sets project internal or global identifier  <br>User sets project attribute identifier  <br>User runs method execution  <br>System search project  <br>System search project attribute   <br>System returns project attribute (listed in response model)
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {String} attributeId Project attribute internal (UUID) or global (integer) identifier
     * @param {module:api/ProjectsApi~getAttributeByProjectIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomAttributeModel}
     */
    getAttributeByProjectId(id, attributeId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAttributeByProjectId");
      }
      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling getAttributeByProjectId");
      }

      let pathParams = {
        'id': id,
        'attributeId': attributeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomAttributeModel;
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/attributes/{attributeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttributesByProjectId operation.
     * @callback module:api/ProjectsApi~getAttributesByProjectIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomAttributeModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project attributes
     * <br>Use case  <br>User sets project internal or global identifier  <br>[Optional] User sets isDeleted field value  <br>User runs method execution  <br>System search project  <br>[Optional] If User sets isDeleted field value as true, System search all deleted attributes related to project  <br>[Optional] If User sets isDeleted field value as false, System search all attributes related to project which are not deleted  <br>[Optional] If User did not set isDeleted field value, System search all attributes related to project  <br>System returns array of found attributes (listed in response model)
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isDeleted If result must consist of only actual/deleted work items (default to false)
     * @param {module:api/ProjectsApi~getAttributesByProjectIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomAttributeModel>}
     */
    getAttributesByProjectId(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAttributesByProjectId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'isDeleted': opts['isDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CustomAttributeModel];
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAutoTestsNamespaces operation.
     * @callback module:api/ProjectsApi~getAutoTestsNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AutoTestNamespaceModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get namespaces of autotests in project
     * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search project  <br>System search all autotest related to the project  <br>System returns array of autotest with namespaces and classnames (listed in response)
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {module:api/ProjectsApi~getAutoTestsNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AutoTestNamespaceModel>}
     */
    getAutoTestsNamespaces(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAutoTestsNamespaces");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AutoTestNamespaceModel];
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/autoTestsNamespaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigurationsByProjectId operation.
     * @callback module:api/ProjectsApi~getConfigurationsByProjectIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConfigurationModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project configurations
     * <br>Use case  <br>User sets project internal or global identifier  <br>User runs method execution  <br>System search project  <br>System search all configurations related to project  <br>System returns array of found configurations (listed in response model)
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {module:api/ProjectsApi~getConfigurationsByProjectIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConfigurationModel>}
     */
    getConfigurationsByProjectId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getConfigurationsByProjectId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ConfigurationModel];
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/configurations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomAttributeTestPlanProjectRelations operation.
     * @callback module:api/ProjectsApi~getCustomAttributeTestPlanProjectRelationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomAttributeModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project's test plan attributes
     * <br>Use case  <br>User runs method execution  <br>System returns project for test plans attributes by project identifier
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {module:api/ProjectsApi~getCustomAttributeTestPlanProjectRelationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomAttributeModel>}
     */
    getCustomAttributeTestPlanProjectRelations(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCustomAttributeTestPlanProjectRelations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CustomAttributeModel];
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/testPlans/attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectById operation.
     * @callback module:api/ProjectsApi~getProjectByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project by ID
     * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search project  <br>System returns project (example listed in response parameters)
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {module:api/ProjectsApi~getProjectByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectModel}
     */
    getProjectById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProjectById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectModel;
      return this.apiClient.callApi(
        '/api/v2/projects/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSectionsByProjectId operation.
     * @callback module:api/ProjectsApi~getSectionsByProjectIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SectionModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project sections
     * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search project  <br>System search all sections related to the project  <br>System returns array of sections (listed in response)
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Amount of items to be skipped (offset)
     * @param {Number} opts.take Amount of items to be taken (limit)
     * @param {String} opts.orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {String} opts.searchField Property name for searching
     * @param {String} opts.searchValue Value for searching
     * @param {module:api/ProjectsApi~getSectionsByProjectIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SectionModel>}
     */
    getSectionsByProjectId(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSectionsByProjectId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'Skip': opts['skip'],
        'Take': opts['take'],
        'OrderBy': opts['orderBy'],
        'SearchField': opts['searchField'],
        'SearchValue': opts['searchValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SectionModel];
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/sections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTestPlansByProjectId operation.
     * @callback module:api/ProjectsApi~getTestPlansByProjectIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestPlanModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project test plans
     * <br>Use case  <br>User sets project internal or global identifier  <br>[Optional] User sets isDeleted field value  <br>User runs method execution  <br>System search project  <br>[Optional] If User sets isDeleted field value as true, System search all deleted test plans related to project  <br>[Optional] If User sets isDeleted field value as false, System search all test plans related to project which are not deleted  <br>[Optional] If User did not set isDeleted field value, System search all v related to project  <br>System returns array of found test plans (listed in response model)
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isDeleted If result must consist of only actual/archived test plans
     * @param {module:api/ProjectsApi~getTestPlansByProjectIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestPlanModel>}
     */
    getTestPlansByProjectId(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTestPlansByProjectId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'isDeleted': opts['isDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TestPlanModel];
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/testPlans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTestRunsByProjectId operation.
     * @callback module:api/ProjectsApi~getTestRunsByProjectIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestRunV2GetModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project test runs
     * <br>Use case  <br>User sets project internal or global identifier  <br>User runs method execution  <br>System search project  <br>System search all test runs related to project  <br>System returns array of found test runs (listed in response model)
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.notStarted 
     * @param {Boolean} opts.inProgress 
     * @param {Boolean} opts.stopped 
     * @param {Boolean} opts.completed 
     * @param {Date} opts.createdDateFrom 
     * @param {Date} opts.createdDateTo 
     * @param {String} opts.testPlanId 
     * @param {Number} opts.skip Amount of items to be skipped (offset)
     * @param {Number} opts.take Amount of items to be taken (limit)
     * @param {String} opts.orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {String} opts.searchField Property name for searching
     * @param {String} opts.searchValue Value for searching
     * @param {module:api/ProjectsApi~getTestRunsByProjectIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestRunV2GetModel>}
     */
    getTestRunsByProjectId(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTestRunsByProjectId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'notStarted': opts['notStarted'],
        'inProgress': opts['inProgress'],
        'stopped': opts['stopped'],
        'completed': opts['completed'],
        'createdDateFrom': opts['createdDateFrom'],
        'createdDateTo': opts['createdDateTo'],
        'testPlanId': opts['testPlanId'],
        'Skip': opts['skip'],
        'Take': opts['take'],
        'OrderBy': opts['orderBy'],
        'SearchField': opts['searchField'],
        'SearchValue': opts['searchValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TestRunV2GetModel];
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/testRuns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkItemsByProjectId operation.
     * @callback module:api/ProjectsApi~getWorkItemsByProjectIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkItemShortModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project work items
     * <br>Use case  <br>User sets project internal or global identifier  <br>[Optional] User sets isDeleted field value  <br>User runs method execution  <br>System search project  <br>[Optional] If User sets isDeleted field value as true, System search all deleted workitems related to project  <br>[Optional] If User sets isDeleted field value as false, System search all workitems related to project which are not deleted  <br>If User did not set isDeleted field value, System search all  workitems related to project  <br>System returns array of found workitems (listed in response model)
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isDeleted If result must consist of only actual/deleted work items (default to false)
     * @param {Array.<String>} opts.tagNames List of tags to filter by
     * @param {Boolean} opts.includeIterations  (default to true)
     * @param {Number} opts.skip Amount of items to be skipped (offset)
     * @param {Number} opts.take Amount of items to be taken (limit)
     * @param {String} opts.orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {String} opts.searchField Property name for searching
     * @param {String} opts.searchValue Value for searching
     * @param {module:api/ProjectsApi~getWorkItemsByProjectIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkItemShortModel>}
     */
    getWorkItemsByProjectId(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWorkItemsByProjectId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'isDeleted': opts['isDeleted'],
        'tagNames': this.apiClient.buildCollectionParam(opts['tagNames'], 'multi'),
        'includeIterations': opts['includeIterations'],
        'Skip': opts['skip'],
        'Take': opts['take'],
        'OrderBy': opts['orderBy'],
        'SearchField': opts['searchField'],
        'SearchValue': opts['searchValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkItemShortModel];
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/workItems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importToExistingProject operation.
     * @callback module:api/ProjectsApi~importToExistingProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import project from JSON file into existing project
     * <br>Use case  <br>User attaches project as json file taken from export or export-by-testPlans method  <br>User runs method execution  <br>System updates project  <br>System returns no content response
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeAttachments 
     * @param {File} opts.file Select file
     * @param {module:api/ProjectsApi~importToExistingProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    importToExistingProject(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling importToExistingProject");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'includeAttachments': opts['includeAttachments']
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreProject operation.
     * @callback module:api/ProjectsApi~restoreProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore project
     * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search and restores deleted project  <br>System returns no content response
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {module:api/ProjectsApi~restoreProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restoreProject(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling restoreProject");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomAttributeTestPlanProjectRelations operation.
     * @callback module:api/ProjectsApi~updateCustomAttributeTestPlanProjectRelationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update attribute of project's test plans
     * <br>Use case  <br>User sets project internal or global identifier and attribute model  <br>User runs method execution  <br>System updates project and project attribute for test plan  <br>System returns no content response
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomAttributeTestPlanProjectRelationPutModel} opts.customAttributeTestPlanProjectRelationPutModel 
     * @param {module:api/ProjectsApi~updateCustomAttributeTestPlanProjectRelationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCustomAttributeTestPlanProjectRelations(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['customAttributeTestPlanProjectRelationPutModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCustomAttributeTestPlanProjectRelations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/testPlans/attribute', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProject operation.
     * @callback module:api/ProjectsApi~updateProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project
     * <br>Use case  <br>User sets project parameters (listed in request example) and runs method execution  <br>System updates project  <br>System returns updated project model (example listed in response parameters)
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectPutModel} opts.projectPutModel 
     * @param {module:api/ProjectsApi~updateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateProject(opts, callback) {
      opts = opts || {};
      let postBody = opts['projectPutModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/projects', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProjectsAttribute operation.
     * @callback module:api/ProjectsApi~updateProjectsAttributeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project attribute
     * <br>Use case  <br>User sets project parameters (listed in request example) and runs method execution  <br>System updates project  <br>System updates attribute related to the project  <br>System returns no content response
     * @param {String} id Project internal (UUID) or global (integer) identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomAttributePutModel} opts.customAttributePutModel 
     * @param {module:api/ProjectsApi~updateProjectsAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateProjectsAttribute(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['customAttributePutModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProjectsAttribute");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/projects/{id}/attributes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
