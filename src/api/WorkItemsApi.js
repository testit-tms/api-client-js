/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AutoTestModel from '../model/AutoTestModel';
import IterationModel from '../model/IterationModel';
import ProblemDetails from '../model/ProblemDetails';
import SharedStepReferenceModel from '../model/SharedStepReferenceModel';
import TestResultChronologyModel from '../model/TestResultChronologyModel';
import TestResultHistoryReportModel from '../model/TestResultHistoryReportModel';
import ValidationProblemDetails from '../model/ValidationProblemDetails';
import WorkItemChangeModel from '../model/WorkItemChangeModel';
import WorkItemLikeModel from '../model/WorkItemLikeModel';
import WorkItemModel from '../model/WorkItemModel';
import WorkItemMovePostModel from '../model/WorkItemMovePostModel';
import WorkItemPostModel from '../model/WorkItemPostModel';
import WorkItemPutModel from '../model/WorkItemPutModel';
import WorkItemShortModel from '../model/WorkItemShortModel';
import WorkItemVersionModel from '../model/WorkItemVersionModel';

/**
* WorkItems service.
* @module api/WorkItemsApi
* @version 2.0.0
*/
export default class WorkItemsApi {

    /**
    * Constructs a new WorkItemsApi. 
    * @alias module:api/WorkItemsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2WorkItemsIdActualPost operation.
     * @callback module:api/WorkItemsApi~apiV2WorkItemsIdActualPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkItemModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set WorkItem as actual
     * <br>Use case  <br>User sets workitem identifier  <br>User runs method execution  <br>System set WorkItem as actual
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.versionId 
     * @param {module:api/WorkItemsApi~apiV2WorkItemsIdActualPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkItemModel}
     */
    apiV2WorkItemsIdActualPost(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2WorkItemsIdActualPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'versionId': opts['versionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkItemModel;
      return this.apiClient.callApi(
        '/api/v2/workItems/{id}/actual', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2WorkItemsIdCheckListTransformToTestCasePost operation.
     * @callback module:api/WorkItemsApi~apiV2WorkItemsIdCheckListTransformToTestCasePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkItemModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transform CheckList to TestCase
     * <br>Use case  <br>User sets checklist identifier  <br>User runs method execution  <br>System transform CheckList to TestCase
     * @param {String} id 
     * @param {module:api/WorkItemsApi~apiV2WorkItemsIdCheckListTransformToTestCasePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkItemModel}
     */
    apiV2WorkItemsIdCheckListTransformToTestCasePost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2WorkItemsIdCheckListTransformToTestCasePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkItemModel;
      return this.apiClient.callApi(
        '/api/v2/workItems/{id}/checkList/transformTo/testCase', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2WorkItemsIdHistoryGet operation.
     * @callback module:api/WorkItemsApi~apiV2WorkItemsIdHistoryGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkItemChangeModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get change history of WorkItem
     * <br>Use case  <br>User sets workitem identifier  <br>User runs method execution  <br>System return change history of WorkItem
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip Amount of items to be skipped (offset)
     * @param {Number} opts.take Amount of items to be taken (limit)
     * @param {String} opts.orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {String} opts.searchField Property name for searching
     * @param {String} opts.searchValue Value for searching
     * @param {module:api/WorkItemsApi~apiV2WorkItemsIdHistoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkItemChangeModel>}
     */
    apiV2WorkItemsIdHistoryGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2WorkItemsIdHistoryGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'Skip': opts['skip'],
        'Take': opts['take'],
        'OrderBy': opts['orderBy'],
        'SearchField': opts['searchField'],
        'SearchValue': opts['searchValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkItemChangeModel];
      return this.apiClient.callApi(
        '/api/v2/workItems/{id}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2WorkItemsIdLikeDelete operation.
     * @callback module:api/WorkItemsApi~apiV2WorkItemsIdLikeDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete like from WorkItem
     * <br>Use case  <br>User sets WorkItem identifier  <br>User runs method execution  <br>System delete like from WorkItem
     * @param {String} id 
     * @param {module:api/WorkItemsApi~apiV2WorkItemsIdLikeDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2WorkItemsIdLikeDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2WorkItemsIdLikeDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/workItems/{id}/like', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2WorkItemsIdLikePost operation.
     * @callback module:api/WorkItemsApi~apiV2WorkItemsIdLikePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set like to WorkItem
     * <br>Use case  <br>User sets WorkItem identifier  <br>User runs method execution  <br>System set like to WorkItem
     * @param {String} id 
     * @param {module:api/WorkItemsApi~apiV2WorkItemsIdLikePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2WorkItemsIdLikePost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2WorkItemsIdLikePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/workItems/{id}/like', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2WorkItemsIdLikesCountGet operation.
     * @callback module:api/WorkItemsApi~apiV2WorkItemsIdLikesCountGetCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get likes count of WorkItem
     * <br>Use case  <br>User sets WorkItem identifier  <br>User runs method execution  <br>System return likes count of WorkItem
     * @param {String} id 
     * @param {module:api/WorkItemsApi~apiV2WorkItemsIdLikesCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    apiV2WorkItemsIdLikesCountGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2WorkItemsIdLikesCountGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/v2/workItems/{id}/likes/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2WorkItemsIdLikesGet operation.
     * @callback module:api/WorkItemsApi~apiV2WorkItemsIdLikesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkItemLikeModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get likes of WorkItem
     * <br>Use case  <br>User sets WorkItem identifier  <br>User runs method execution  <br>System return likes of WorkItem
     * @param {String} id 
     * @param {module:api/WorkItemsApi~apiV2WorkItemsIdLikesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkItemLikeModel>}
     */
    apiV2WorkItemsIdLikesGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2WorkItemsIdLikesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkItemLikeModel];
      return this.apiClient.callApi(
        '/api/v2/workItems/{id}/likes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2WorkItemsIdTestResultsHistoryGet operation.
     * @callback module:api/WorkItemsApi~apiV2WorkItemsIdTestResultsHistoryGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestResultHistoryReportModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get test results history of WorkItem
     * <br>Use case  <br>User sets WorkItem identifier  <br>User runs method execution  <br>System return test results history of WorkItem
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.from Take results from this date
     * @param {Date} opts.to Take results until this date
     * @param {Array.<String>} opts.configurationIds Identifiers of test result configurations
     * @param {Array.<String>} opts.testPlanIds Identifiers of test plans which contain test results
     * @param {Array.<String>} opts.userIds Identifiers of users who set test results
     * @param {Array.<String>} opts.outcomes List of outcomes of test results
     * @param {Boolean} opts.isAutomated OBSOLETE: Use `Automated` instead
     * @param {Boolean} opts.automated If result must consist of only manual/automated test results
     * @param {Array.<String>} opts.testRunIds Identifiers of test runs which contain test results
     * @param {Number} opts.skip Amount of items to be skipped (offset)
     * @param {Number} opts.take Amount of items to be taken (limit)
     * @param {String} opts.orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {String} opts.searchField Property name for searching
     * @param {String} opts.searchValue Value for searching
     * @param {module:api/WorkItemsApi~apiV2WorkItemsIdTestResultsHistoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestResultHistoryReportModel>}
     */
    apiV2WorkItemsIdTestResultsHistoryGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2WorkItemsIdTestResultsHistoryGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'configurationIds': this.apiClient.buildCollectionParam(opts['configurationIds'], 'multi'),
        'testPlanIds': this.apiClient.buildCollectionParam(opts['testPlanIds'], 'multi'),
        'userIds': this.apiClient.buildCollectionParam(opts['userIds'], 'multi'),
        'outcomes': this.apiClient.buildCollectionParam(opts['outcomes'], 'multi'),
        'isAutomated': opts['isAutomated'],
        'automated': opts['automated'],
        'testRunIds': this.apiClient.buildCollectionParam(opts['testRunIds'], 'multi'),
        'Skip': opts['skip'],
        'Take': opts['take'],
        'OrderBy': opts['orderBy'],
        'SearchField': opts['searchField'],
        'SearchValue': opts['searchValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TestResultHistoryReportModel];
      return this.apiClient.callApi(
        '/api/v2/workItems/{id}/testResults/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2WorkItemsMovePost operation.
     * @callback module:api/WorkItemsApi~apiV2WorkItemsMovePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkItemShortModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move WorkItem to another section
     * <br>Use case  <br>User sets WorkItem identifier  <br>User runs method execution  <br>System move WorkItem to another section
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkItemMovePostModel} opts.workItemMovePostModel 
     * @param {module:api/WorkItemsApi~apiV2WorkItemsMovePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkItemShortModel}
     */
    apiV2WorkItemsMovePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['workItemMovePostModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkItemShortModel;
      return this.apiClient.callApi(
        '/api/v2/workItems/move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2WorkItemsSharedStepsSharedStepIdReferencesGet operation.
     * @callback module:api/WorkItemsApi~apiV2WorkItemsSharedStepsSharedStepIdReferencesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SharedStepReferenceModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get SharedStep references
     * <br>Use case  <br>User sets SharedStep identifier  <br>User runs method execution  <br>System return SharedStep references
     * @param {String} sharedStepId 
     * @param {module:api/WorkItemsApi~apiV2WorkItemsSharedStepsSharedStepIdReferencesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SharedStepReferenceModel>}
     */
    apiV2WorkItemsSharedStepsSharedStepIdReferencesGet(sharedStepId, callback) {
      let postBody = null;
      // verify the required parameter 'sharedStepId' is set
      if (sharedStepId === undefined || sharedStepId === null) {
        throw new Error("Missing the required parameter 'sharedStepId' when calling apiV2WorkItemsSharedStepsSharedStepIdReferencesGet");
      }

      let pathParams = {
        'sharedStepId': sharedStepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SharedStepReferenceModel];
      return this.apiClient.callApi(
        '/api/v2/workItems/sharedSteps/{sharedStepId}/references', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWorkItem operation.
     * @callback module:api/WorkItemsApi~createWorkItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkItemModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Test Case, Checklist or Shared Step
     * <br>Use case  <br>User sets workitem properties (listed in request parameters)  <br>User runs method execution  <br>System creates workitem by identifier  <br>System returns workitem model (listed in response parameters)
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkItemPostModel} opts.workItemPostModel 
     * @param {module:api/WorkItemsApi~createWorkItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkItemModel}
     */
    createWorkItem(opts, callback) {
      opts = opts || {};
      let postBody = opts['workItemPostModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkItemModel;
      return this.apiClient.callApi(
        '/api/v2/workItems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllWorkItemsFromAutoTest operation.
     * @callback module:api/WorkItemsApi~deleteAllWorkItemsFromAutoTestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all links AutoTests from WorkItem by Id or GlobalId
     * <br>Use case  <br>User sets workitem identifier  <br>User runs method execution  <br>System search workitem by identifier  <br>System search and delete all autotests, related to found workitem  <br>System returns no content response
     * @param {String} id WorkItem internal (guid format) or  global(integer format) identifier\"
     * @param {module:api/WorkItemsApi~deleteAllWorkItemsFromAutoTestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAllWorkItemsFromAutoTest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAllWorkItemsFromAutoTest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/workItems/{id}/autoTests', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkItem operation.
     * @callback module:api/WorkItemsApi~deleteWorkItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Test Case, Checklist or Shared Step by Id or GlobalId
     * <br>Use case  <br>User sets workitem identifier  <br>User runs method execution  <br>System deletes workitem  <br>System returns no content response
     * @param {String} id WorkItem internal (guid format) or  global(integer format) identifier\"
     * @param {module:api/WorkItemsApi~deleteWorkItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWorkItem(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteWorkItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/workItems/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAutoTestsForWorkItem operation.
     * @callback module:api/WorkItemsApi~getAutoTestsForWorkItemCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AutoTestModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all AutoTests linked to WorkItem by Id or GlobalId
     * <br>Use case  <br>User sets workitem identifier  <br>User runs method execution  <br>System search workitem by identifier  <br>System search all autotests, related to found workitem  <br>System returns list of found autotests
     * @param {String} id WorkItem internal (guid format) or  global(integer format) identifier\"
     * @param {module:api/WorkItemsApi~getAutoTestsForWorkItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AutoTestModel>}
     */
    getAutoTestsForWorkItem(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAutoTestsForWorkItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AutoTestModel];
      return this.apiClient.callApi(
        '/api/v2/workItems/{id}/autoTests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIterations operation.
     * @callback module:api/WorkItemsApi~getIterationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IterationModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get iterations by workitem Id or GlobalId
     * @param {String} id WorkItem internal (guid format) or  global(integer format) identifier\"
     * @param {Object} opts Optional parameters
     * @param {String} opts.versionId WorkItem version (guid format) identifier
     * @param {Number} opts.versionNumber WorkItem version number (0 is the last version)\"
     * @param {module:api/WorkItemsApi~getIterationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IterationModel>}
     */
    getIterations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIterations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'versionId': opts['versionId'],
        'versionNumber': opts['versionNumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IterationModel];
      return this.apiClient.callApi(
        '/api/v2/workItems/{id}/iterations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkItemById operation.
     * @callback module:api/WorkItemsApi~getWorkItemByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkItemModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Test Case, Checklist or Shared Step by Id or GlobalId
     * <br>Use case  <br>User sets workitem identifier  <br>[Optional] User sets workitem version identifier  <br>[Optional] User sets workitem version number  <br>User runs method execution  <br>System search workitem by identifier  <br>[Optional] if User sets workitem version identifier, system search workitem version by identifier.  <br>[Optional] if user sets workitem version number, system search workitem version by number  <br>Otherwise, system search last workitem version  <br>System returns workitem 
     * @param {String} id WorkItem internal (guid format) or  global(integer format) identifier\"
     * @param {Object} opts Optional parameters
     * @param {String} opts.versionId WorkItem version (guid format) identifier\"
     * @param {Number} opts.versionNumber WorkItem version number (0 is the last version)\"
     * @param {module:api/WorkItemsApi~getWorkItemByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkItemModel}
     */
    getWorkItemById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWorkItemById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'versionId': opts['versionId'],
        'versionNumber': opts['versionNumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkItemModel;
      return this.apiClient.callApi(
        '/api/v2/workItems/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkItemChronology operation.
     * @callback module:api/WorkItemsApi~getWorkItemChronologyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestResultChronologyModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get WorkItem chronology by Id or GlobalId
     * <br>Use case  <br>User sets workitem identifier  <br>User runs method execution  <br>System search workitem by identifier  <br>System search test results of all autotests, related to found workitem  <br>System sort results by CompletedOn ascending, then by CreatedDate ascending  <br>System returns sorted collection of test results
     * @param {String} id 
     * @param {module:api/WorkItemsApi~getWorkItemChronologyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestResultChronologyModel>}
     */
    getWorkItemChronology(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWorkItemChronology");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TestResultChronologyModel];
      return this.apiClient.callApi(
        '/api/v2/workItems/{id}/chronology', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkItemVersions operation.
     * @callback module:api/WorkItemsApi~getWorkItemVersionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkItemVersionModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get WorkItem versions
     * <br>Use case  <br>User sets workitem identifier  <br>[Optional] User sets workitem version identifier  <br>User runs method execution  <br>System search workitem by identifier  <br>                      [Optional] If User set workitem version identifier, System search workitem version by version identifier                      Otherwise, system search all version of workitem                    <br>System returns array of workitem version models (listed in response example)
     * @param {String} id WorkItem internal (guid format) or  global(integer format) identifier\"
     * @param {Object} opts Optional parameters
     * @param {String} opts.workItemVersionId WorkItem version (guid format)  identifier\"
     * @param {Number} opts.versionNumber WorkItem version (integer format)  number\"
     * @param {module:api/WorkItemsApi~getWorkItemVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkItemVersionModel>}
     */
    getWorkItemVersions(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWorkItemVersions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'workItemVersionId': opts['workItemVersionId'],
        'versionNumber': opts['versionNumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkItemVersionModel];
      return this.apiClient.callApi(
        '/api/v2/workItems/{id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkItem operation.
     * @callback module:api/WorkItemsApi~updateWorkItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Test Case, Checklist or Shared Step
     * <br>Use case  <br>User sets workitem properties (listed in request parameters)  <br>User runs method execution  <br>System updates workitem by identifier  <br>System returns updated workitem model (listed in response parameters)
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkItemPutModel} opts.workItemPutModel 
     * @param {module:api/WorkItemsApi~updateWorkItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateWorkItem(opts, callback) {
      opts = opts || {};
      let postBody = opts['workItemPutModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/workItems', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
