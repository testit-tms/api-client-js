/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AutoTestAverageDurationModel from '../model/AutoTestAverageDurationModel';
import AutoTestModel from '../model/AutoTestModel';
import AutoTestPostModel from '../model/AutoTestPostModel';
import AutoTestPutModel from '../model/AutoTestPutModel';
import FlakyBulkDto from '../model/FlakyBulkDto';
import ProblemDetails from '../model/ProblemDetails';
import TestResultChronologyModel from '../model/TestResultChronologyModel';
import TestResultHistoryReportModel from '../model/TestResultHistoryReportModel';
import TestRunShortModel from '../model/TestRunShortModel';
import ValidationProblemDetails from '../model/ValidationProblemDetails';
import WorkItemIdModel from '../model/WorkItemIdModel';
import WorkItemIdentifierModel from '../model/WorkItemIdentifierModel';

/**
* AutoTests service.
* @module api/AutoTestsApi
* @version 2.0.0
*/
export default class AutoTestsApi {

    /**
    * Constructs a new AutoTestsApi. 
    * @alias module:api/AutoTestsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2AutoTestsFlakyBulkPost operation.
     * @callback module:api/AutoTestsApi~apiV2AutoTestsFlakyBulkPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set \"Flaky\" status for multiple autotests
     * User permissions for project:  - Read only  - Execute  - Write  - Full control
     * @param {Object} opts Optional parameters
     * @param {module:model/FlakyBulkDto} opts.flakyBulkDto 
     * @param {module:api/AutoTestsApi~apiV2AutoTestsFlakyBulkPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2AutoTestsFlakyBulkPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['flakyBulkDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/autoTests/flaky/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2AutoTestsIdWorkItemsChangedIdGet operation.
     * @callback module:api/AutoTestsApi~apiV2AutoTestsIdWorkItemsChangedIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get identifiers of changed linked work items
     * User permissions for project:  - Read only  - Execute  - Write  - Full control
     * @param {String} id 
     * @param {module:api/AutoTestsApi~apiV2AutoTestsIdWorkItemsChangedIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    apiV2AutoTestsIdWorkItemsChangedIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2AutoTestsIdWorkItemsChangedIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/v2/autoTests/{id}/workItems/changed/id', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2AutoTestsIdWorkItemsChangedWorkItemIdApprovePost operation.
     * @callback module:api/AutoTestsApi~apiV2AutoTestsIdWorkItemsChangedWorkItemIdApprovePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Approve changes to work items linked to autotest
     * User permissions for project:  - Read only  - Execute  - Write  - Full control
     * @param {String} id 
     * @param {String} workItemId 
     * @param {module:api/AutoTestsApi~apiV2AutoTestsIdWorkItemsChangedWorkItemIdApprovePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2AutoTestsIdWorkItemsChangedWorkItemIdApprovePost(id, workItemId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2AutoTestsIdWorkItemsChangedWorkItemIdApprovePost");
      }
      // verify the required parameter 'workItemId' is set
      if (workItemId === undefined || workItemId === null) {
        throw new Error("Missing the required parameter 'workItemId' when calling apiV2AutoTestsIdWorkItemsChangedWorkItemIdApprovePost");
      }

      let pathParams = {
        'id': id,
        'workItemId': workItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/autoTests/{id}/workItems/changed/{workItemId}/approve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAutoTest operation.
     * @callback module:api/AutoTestsApi~createAutoTestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutoTestModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create autotest
     * <br>This method creates a new autotest.  <br>To add an autotest to the test plan, link it to a work item using the `POST /api/v2/autoTests/{autoTestId}/workItems` method.  <br>Use the `POST /api/v2/testRuns/byAutoTests` method to run autotest outside the test plan.
     * @param {Object} opts Optional parameters
     * @param {module:model/AutoTestPostModel} opts.autoTestPostModel 
     * @param {module:api/AutoTestsApi~createAutoTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutoTestModel}
     */
    createAutoTest(opts, callback) {
      opts = opts || {};
      let postBody = opts['autoTestPostModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AutoTestModel;
      return this.apiClient.callApi(
        '/api/v2/autoTests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMultiple operation.
     * @callback module:api/AutoTestsApi~createMultipleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AutoTestModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create multiple autotests
     * <br>Use case  <br>User sets autotest parameters (listed in the example) and runs method execution  <br>System creates autotest  <br>[Optional] If steps enumeration is set, system creates step items and relates them to autotest  <br>[Optional] If setup enumeration is set, system creates setup items and relates them to autotest  <br>[Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest  <br>[Optional] If label enumeration is set, system creates labels and relates them to autotest  <br>[Optional] If link enumeration is set, system creates links and relates them to autotest  <br>System returns autotest model (example listed in response parameters)
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/AutoTestPostModel>} opts.autoTestPostModel 
     * @param {module:api/AutoTestsApi~createMultipleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AutoTestModel>}
     */
    createMultiple(opts, callback) {
      opts = opts || {};
      let postBody = opts['autoTestPostModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [AutoTestModel];
      return this.apiClient.callApi(
        '/api/v2/autoTests/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAutoTest operation.
     * @callback module:api/AutoTestsApi~deleteAutoTestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete autotest
     * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier and runs method execution  <br>System finds the autotest by the identifier  <br>System deletes autotest and returns no content response
     * @param {String} id Autotest internal (UUID) or global (integer) identifier
     * @param {module:api/AutoTestsApi~deleteAutoTestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAutoTest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAutoTest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/autoTests/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAutoTestLinkFromWorkItem operation.
     * @callback module:api/AutoTestsApi~deleteAutoTestLinkFromWorkItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlink autotest from work item
     * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>[Optional] User sets workitem internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System finds the autotest by the autotest identifier  <br>              [Optional] if workitem id is set by User, System finds the workitem by the workitem identifier and unlinks it              from autotest.                <br>[Optional] Otherwise, if workitem id is not specified, System unlinks all workitems linked to autotest.  <br>System returns no content response
     * @param {String} id Autotest internal (UUID) or global (integer) identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.workItemId Work item internal (UUID) or global (integer) identifier
     * @param {module:api/AutoTestsApi~deleteAutoTestLinkFromWorkItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAutoTestLinkFromWorkItem(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAutoTestLinkFromWorkItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'workItemId': opts['workItemId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/autoTests/{id}/workItems', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllAutoTests operation.
     * @callback module:api/AutoTestsApi~getAllAutoTestsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AutoTestModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all autotests
     * <br>Use case  <br>[Optional] User sets search parameters (listed in request parameters) and runs method execution  <br>System returns all autotests, matching search criteria
     * @param {Object} opts Optional parameters
     * @param {String} opts.projectId Project internal ID
     * @param {String} opts.externalId Autotest external ID
     * @param {Number} opts.globalId Autotest global ID
     * @param {String} opts.namespace Namespace in which autotest is located
     * @param {Boolean} opts.isNamespaceNull OBSOLETE: Use `includeEmptyNamespaces` instead
     * @param {Boolean} opts.includeEmptyNamespaces If result must contain autotests without namespace
     * @param {String} opts.className Name of class in which autotest is located
     * @param {Boolean} opts.isClassnameNull OBSOLETE: Use `includeEmptyClassNames` instead
     * @param {Boolean} opts.includeEmptyClassNames If result must contain autotests without class
     * @param {Boolean} opts.isDeleted OBSOLETE: Use `deleted` instead
     * @param {Boolean} opts.deleted Is autotest deleted
     * @param {Array.<String>} opts.labels Include only autotests with provided labels
     * @param {Number} opts.stabilityMinimal OBSOLETE: Use `minStability` instead
     * @param {Number} opts.minStability Minimum stability value of autotest
     * @param {Number} opts.stabilityMaximal OBSOLETE: Use `maxStability` instead
     * @param {Number} opts.maxStability Maximum stability value of autotest
     * @param {Boolean} opts.isFlaky OBSOLETE: Use `flaky` instead
     * @param {Boolean} opts.flaky Is autotest marked as \"Flaky\"
     * @param {Boolean} opts.includeSteps If result must also include autotest steps
     * @param {Boolean} opts.includeLabels If result must also include autotest labels
     * @param {Number} opts.skip Amount of items to be skipped (offset)
     * @param {Number} opts.take Amount of items to be taken (limit)
     * @param {String} opts.orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {String} opts.searchField Property name for searching
     * @param {String} opts.searchValue Value for searching
     * @param {module:api/AutoTestsApi~getAllAutoTestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AutoTestModel>}
     */
    getAllAutoTests(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'projectId': opts['projectId'],
        'externalId': opts['externalId'],
        'globalId': opts['globalId'],
        'namespace': opts['namespace'],
        'isNamespaceNull': opts['isNamespaceNull'],
        'includeEmptyNamespaces': opts['includeEmptyNamespaces'],
        'className': opts['className'],
        'isClassnameNull': opts['isClassnameNull'],
        'includeEmptyClassNames': opts['includeEmptyClassNames'],
        'isDeleted': opts['isDeleted'],
        'deleted': opts['deleted'],
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'multi'),
        'stabilityMinimal': opts['stabilityMinimal'],
        'minStability': opts['minStability'],
        'stabilityMaximal': opts['stabilityMaximal'],
        'maxStability': opts['maxStability'],
        'isFlaky': opts['isFlaky'],
        'flaky': opts['flaky'],
        'includeSteps': opts['includeSteps'],
        'includeLabels': opts['includeLabels'],
        'Skip': opts['skip'],
        'Take': opts['take'],
        'OrderBy': opts['orderBy'],
        'SearchField': opts['searchField'],
        'SearchValue': opts['searchValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AutoTestModel];
      return this.apiClient.callApi(
        '/api/v2/autoTests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAutoTestAverageDuration operation.
     * @callback module:api/AutoTestsApi~getAutoTestAverageDurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutoTestAverageDurationModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get average autotest duration
     * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System calculates pass average duration and fail average duration of autotest from all related test results  <br>System returns pass average duration and fail average duration for autotest
     * @param {String} id Autotest internal (UUID) or global (integer) identifier
     * @param {module:api/AutoTestsApi~getAutoTestAverageDurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutoTestAverageDurationModel}
     */
    getAutoTestAverageDuration(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAutoTestAverageDuration");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AutoTestAverageDurationModel;
      return this.apiClient.callApi(
        '/api/v2/autoTests/{id}/averageDuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAutoTestById operation.
     * @callback module:api/AutoTestsApi~getAutoTestByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutoTestModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get autotest by internal or global ID
     * <br>Use case  <br>User sets autotest internal or global identifier and runs method execution  <br>System returns autotest, which internal or global identifier equals the identifier value set in the previous action
     * @param {String} id Autotest internal (UUID) or global (integer) identifier
     * @param {module:api/AutoTestsApi~getAutoTestByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutoTestModel}
     */
    getAutoTestById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAutoTestById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AutoTestModel;
      return this.apiClient.callApi(
        '/api/v2/autoTests/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAutoTestChronology operation.
     * @callback module:api/AutoTestsApi~getAutoTestChronologyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestResultChronologyModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get autotest chronology
     * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System search all test results related to autotest (with default limit equal 100)  <br>System orders the test results by CompletedOn property descending and then orders by CreatedDate property descending  <br>System returns test result chronology for autotest
     * @param {String} id Autotest internal (UUID) or global (integer) identifier
     * @param {module:api/AutoTestsApi~getAutoTestChronologyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestResultChronologyModel>}
     */
    getAutoTestChronology(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAutoTestChronology");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TestResultChronologyModel];
      return this.apiClient.callApi(
        '/api/v2/autoTests/{id}/chronology', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTestRuns operation.
     * @callback module:api/AutoTestsApi~getTestRunsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestRunShortModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get completed tests runs for autotests
     * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System search for all test runs related to the autotest  <br>System returns the enumeration of test runs
     * @param {String} id Autotest internal (UUID) or global (integer) identifier
     * @param {module:api/AutoTestsApi~getTestRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestRunShortModel>}
     */
    getTestRuns(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTestRuns");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TestRunShortModel];
      return this.apiClient.callApi(
        '/api/v2/autoTests/{id}/testRuns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkItemResults operation.
     * @callback module:api/AutoTestsApi~getWorkItemResultsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestResultHistoryReportModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get test results history for autotest
     * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User sets getTestResultHistoryReportQuery (listed in the example)  <br>User runs method execution  <br>System search for test results using filters set by user in getTestResultHistoryReportQuery and id  <br>System returns the enumeration of test results
     * @param {String} id Autotest internal (UUID) or global (integer) identifier
     * @param {Object} opts Optional parameters
     * @param {Date} opts.from Take results from this date
     * @param {Date} opts.to Take results until this date
     * @param {Array.<String>} opts.configurationIds Identifiers of test result configurations
     * @param {Array.<String>} opts.testPlanIds Identifiers of test plans which contain test results
     * @param {Array.<String>} opts.userIds Identifiers of users who set test results
     * @param {Array.<String>} opts.outcomes List of outcomes of test results
     * @param {Boolean} opts.isAutomated OBSOLETE: Use `Automated` instead
     * @param {Boolean} opts.automated If result must consist of only manual/automated test results
     * @param {Array.<String>} opts.testRunIds Identifiers of test runs which contain test results
     * @param {Number} opts.skip Amount of items to be skipped (offset)
     * @param {Number} opts.take Amount of items to be taken (limit)
     * @param {String} opts.orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {String} opts.searchField Property name for searching
     * @param {String} opts.searchValue Value for searching
     * @param {module:api/AutoTestsApi~getWorkItemResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestResultHistoryReportModel>}
     */
    getWorkItemResults(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWorkItemResults");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'configurationIds': this.apiClient.buildCollectionParam(opts['configurationIds'], 'multi'),
        'testPlanIds': this.apiClient.buildCollectionParam(opts['testPlanIds'], 'multi'),
        'userIds': this.apiClient.buildCollectionParam(opts['userIds'], 'multi'),
        'outcomes': this.apiClient.buildCollectionParam(opts['outcomes'], 'multi'),
        'isAutomated': opts['isAutomated'],
        'automated': opts['automated'],
        'testRunIds': this.apiClient.buildCollectionParam(opts['testRunIds'], 'multi'),
        'Skip': opts['skip'],
        'Take': opts['take'],
        'OrderBy': opts['orderBy'],
        'SearchField': opts['searchField'],
        'SearchValue': opts['searchValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TestResultHistoryReportModel];
      return this.apiClient.callApi(
        '/api/v2/autoTests/{id}/testResultHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkItemsLinkedToAutoTest operation.
     * @callback module:api/AutoTestsApi~getWorkItemsLinkedToAutoTestCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkItemIdentifierModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get work items linked to autotest
     * <br>              This method links an autotest to a test case or a checklist.              A manual test case with a linked automated work item is marked in the test management system as an autotest.              You can run it from graphical user interface (GUI). To do that:                <br>              1. Open the project in GUI.<br />              2. Go to <b>Test plans</b> section and switch to the <b>Execution</b> tab.<br />              3. Select the autotest(s) you want to run using checkboxes.<br />              4. In the toolbar above the test list, click <b>Run autotests</b>.              
     * @param {String} id Specifies the autotest entity ID.<br />  You can copy it from the address bar in your web browser or use autotest GUID.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isDeleted Specifies that a test is deleted or still relevant.
     * @param {Boolean} opts.isWorkItemDeleted OBSOLETE: Use `isDeleted` instead (default to false)
     * @param {module:api/AutoTestsApi~getWorkItemsLinkedToAutoTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkItemIdentifierModel>}
     */
    getWorkItemsLinkedToAutoTest(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWorkItemsLinkedToAutoTest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'isDeleted': opts['isDeleted'],
        'isWorkItemDeleted': opts['isWorkItemDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkItemIdentifierModel];
      return this.apiClient.callApi(
        '/api/v2/autoTests/{id}/workItems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the linkAutoTestToWorkItem operation.
     * @callback module:api/AutoTestsApi~linkAutoTestToWorkItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Link autotest with work items
     * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User sets work item internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System finds the autotest by the autotest identifier  <br>System finds the work item by the work item identifier  <br>System relates the work item with the autotest and returns no content response
     * @param {String} id Autotest internal (UUID) or global (integer) identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/WorkItemIdModel} opts.workItemIdModel 
     * @param {module:api/AutoTestsApi~linkAutoTestToWorkItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    linkAutoTestToWorkItem(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['workItemIdModel'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling linkAutoTestToWorkItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/autoTests/{id}/workItems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAutoTest operation.
     * @callback module:api/AutoTestsApi~updateAutoTestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update autotest
     * <br>Use case  <br>User sets autotest updated parameters values (listed in the example) and runs method execution  <br>System finds the autotest by the identifier  <br>System updates autotest parameters   <br>              [Optional] If steps enumeration is set, system creates step items, relates them to autotest              and deletes relations with current steps( if exist)                <br>              [Optional] If Setup enumeration is set, system creates setup items and relates them to autotest              and deletes relations with current Setup items (if exist)                <br>              [Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest              and deletes relations with current teardown items (if exist)                <br>              [Optional] If label enumeration is set, system creates labels and relates them to autotest              and deletes relations with current Labels (if exist)                <br>              [Optional] If link enumeration is set, system creates links and relates them to autotest              and deletes relations with current Links (if exist)                <br>System updates autotest and returns no content response
     * @param {Object} opts Optional parameters
     * @param {module:model/AutoTestPutModel} opts.autoTestPutModel 
     * @param {module:api/AutoTestsApi~updateAutoTestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateAutoTest(opts, callback) {
      opts = opts || {};
      let postBody = opts['autoTestPutModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/autoTests', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMultiple operation.
     * @callback module:api/AutoTestsApi~updateMultipleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update multiple autotests
     * <br>Use case  <br>User sets autotest updated parameters values (listed in the example) and runs method execution  <br>System finds the autotest by the identifier  <br>System updates autotest parameters   <br>              [Optional] If steps enumeration is set, system creates step items, relates them to autotest              and deletes relations with current steps( if exist)                <br>              [Optional] If Setup enumeration is set, system creates setup items and relates them to autotest              and deletes relations with current Setup items (if exist)                <br>              [Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest              and deletes relations with current teardown items (if exist)                <br>              [Optional] If label enumeration is set, system creates labels and relates them to autotest              and deletes relations with current Labels (if exist)                <br>              [Optional] If link enumeration is set, system creates links and relates them to autotest              and deletes relations with current Links (if exist)                <br>System updates autotest and returns no content response
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/AutoTestPutModel>} opts.autoTestPutModel 
     * @param {module:api/AutoTestsApi~updateMultipleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMultiple(opts, callback) {
      opts = opts || {};
      let postBody = opts['autoTestPutModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/autoTests/bulk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
