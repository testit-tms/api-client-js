/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProblemDetails from '../model/ProblemDetails';
import SectionMoveModel from '../model/SectionMoveModel';
import SectionPostModel from '../model/SectionPostModel';
import SectionPutModel from '../model/SectionPutModel';
import SectionRenameModel from '../model/SectionRenameModel';
import SectionWithStepsModel from '../model/SectionWithStepsModel';
import ValidationProblemDetails from '../model/ValidationProblemDetails';
import WorkItemShortModel from '../model/WorkItemShortModel';

/**
* Sections service.
* @module api/SectionsApi
* @version 2.0.0
*/
export default class SectionsApi {

    /**
    * Constructs a new SectionsApi. 
    * @alias module:api/SectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSection operation.
     * @callback module:api/SectionsApi~createSectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SectionWithStepsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create section
     * <br>Use case  <br>User sets section properties (listed in request example)  <br>User runs method execution  <br>System creates section property values  <br>System returns section (listed in response example)
     * @param {Object} opts Optional parameters
     * @param {module:model/SectionPostModel} opts.sectionPostModel 
     * @param {module:api/SectionsApi~createSectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SectionWithStepsModel}
     */
    createSection(opts, callback) {
      opts = opts || {};
      let postBody = opts['sectionPostModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SectionWithStepsModel;
      return this.apiClient.callApi(
        '/api/v2/sections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSection operation.
     * @callback module:api/SectionsApi~deleteSectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete section
     * <br>Use case  <br>User sets section identifier  <br>User runs method execution  <br>System search section by the identifier  <br>System search and delete nested sections of the found section  <br>System search and delete workitems related to the found nested sections  <br>System deletes initial section and related workitem  <br>System returns no content response
     * @param {String} id Section internal (UUID) identifier
     * @param {module:api/SectionsApi~deleteSectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSection(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSection");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/sections/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSectionById operation.
     * @callback module:api/SectionsApi~getSectionByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SectionWithStepsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get section
     * <br>Use case  <br>User sets section internal (guid format) identifier  <br>User runs method execution  <br>System search section by the section identifier  <br>              [Optional] If isDeleted flag equals false, deleted work items are not being searched.              If true, deleted work items are also being searched, null for all work items.                <br>System returns section
     * @param {String} id Section internal (UUID) identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isDeleted Requested section is deleted (default to false)
     * @param {module:api/SectionsApi~getSectionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SectionWithStepsModel}
     */
    getSectionById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSectionById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'isDeleted': opts['isDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SectionWithStepsModel;
      return this.apiClient.callApi(
        '/api/v2/sections/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkItemsBySectionId operation.
     * @callback module:api/SectionsApi~getWorkItemsBySectionIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkItemShortModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get section work items
     * <br>Use case  <br>User sets section identifier  <br>User runs method execution  <br>System search section by the identifier  <br>System search work items related to the section  <br>              [Optional] If isDeleted flag equals false, deleted work items are not being searched.              If true, deleted work items are also being searched, null for all work items.                <br>System returns work item collection
     * @param {String} id Section internal (UUID) identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isDeleted Requested section is deleted (default to false)
     * @param {Array.<String>} opts.tagNames List of work item tags
     * @param {Boolean} opts.includeIterations  (default to true)
     * @param {Number} opts.skip Amount of items to be skipped (offset)
     * @param {Number} opts.take Amount of items to be taken (limit)
     * @param {String} opts.orderBy SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {String} opts.searchField Property name for searching
     * @param {String} opts.searchValue Value for searching
     * @param {module:api/SectionsApi~getWorkItemsBySectionIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkItemShortModel>}
     */
    getWorkItemsBySectionId(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWorkItemsBySectionId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'isDeleted': opts['isDeleted'],
        'tagNames': this.apiClient.buildCollectionParam(opts['tagNames'], 'multi'),
        'includeIterations': opts['includeIterations'],
        'Skip': opts['skip'],
        'Take': opts['take'],
        'OrderBy': opts['orderBy'],
        'SearchField': opts['searchField'],
        'SearchValue': opts['searchValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkItemShortModel];
      return this.apiClient.callApi(
        '/api/v2/sections/{id}/workItems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the move operation.
     * @callback module:api/SectionsApi~moveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move section
     * <br>Can be moved inside another section. It is possible to indicate a project  <br>Use case  <br>User sets section identifier, old parent identifier, parent identifier and  next section identifier (listed in request example)  <br>User runs method execution  <br>System search section by the identifier  <br>System unlink section from the old parent and links to the new one  <br>System updates section rank using the next section identifier  <br>System returns no content response
     * @param {Object} opts Optional parameters
     * @param {module:model/SectionMoveModel} opts.sectionMoveModel 
     * @param {module:api/SectionsApi~moveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    move(opts, callback) {
      opts = opts || {};
      let postBody = opts['sectionMoveModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/sections/move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rename operation.
     * @callback module:api/SectionsApi~renameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename section
     * <br>Use case  <br>User sets section identifier and new name (listed in request example)  <br>User runs method execution  <br>System search section by the identifier  <br>System updates section name using the new name  <br>System returns no content response
     * @param {Object} opts Optional parameters
     * @param {module:model/SectionRenameModel} opts.sectionRenameModel 
     * @param {module:api/SectionsApi~renameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rename(opts, callback) {
      opts = opts || {};
      let postBody = opts['sectionRenameModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/sections/rename', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSection operation.
     * @callback module:api/SectionsApi~updateSectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update section
     * <br>Use case  <br>User sets section properties (listed in request example)  <br>User runs method execution  <br>System search section by the identifier  <br>System updates section using the property values  <br>System returns no content response
     * @param {Object} opts Optional parameters
     * @param {module:model/SectionPutModel} opts.sectionPutModel 
     * @param {module:api/SectionsApi~updateSectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSection(opts, callback) {
      opts = opts || {};
      let postBody = opts['sectionPutModel'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer or PrivateToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/sections', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
