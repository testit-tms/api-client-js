"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkItemsApiFp = exports.WorkItemsApiAxiosParamCreator = exports.TestSuitesApi = exports.TestSuitesApiFactory = exports.TestSuitesApiFp = exports.TestSuitesApiAxiosParamCreator = exports.TestRunsApi = exports.TestRunsApiFactory = exports.TestRunsApiFp = exports.TestRunsApiAxiosParamCreator = exports.TestResultsApi = exports.TestResultsApiFactory = exports.TestResultsApiFp = exports.TestResultsApiAxiosParamCreator = exports.TestPlansApi = exports.TestPlansApiFactory = exports.TestPlansApiFp = exports.TestPlansApiAxiosParamCreator = exports.SectionsApi = exports.SectionsApiFactory = exports.SectionsApiFp = exports.SectionsApiAxiosParamCreator = exports.ProjectsApi = exports.ProjectsApiFactory = exports.ProjectsApiFp = exports.ProjectsApiAxiosParamCreator = exports.ParametersApi = exports.ParametersApiFactory = exports.ParametersApiFp = exports.ParametersApiAxiosParamCreator = exports.ConfigurationsApi = exports.ConfigurationsApiFactory = exports.ConfigurationsApiFp = exports.ConfigurationsApiAxiosParamCreator = exports.AutoTestsApi = exports.AutoTestsApiFactory = exports.AutoTestsApiFp = exports.AutoTestsApiAxiosParamCreator = exports.AttachmentsApi = exports.AttachmentsApiFactory = exports.AttachmentsApiFp = exports.AttachmentsApiAxiosParamCreator = exports.WorkItemStates = exports.WorkItemPriorityModel = exports.WorkItemEntityTypes = exports.TestRunStateTypeModel = exports.TestPlanStatusModel = exports.LinkType = exports.ImageResizeOption = exports.CustomAttributeTypesEnum = void 0;
exports.WorkItemsApi = exports.WorkItemsApiFactory = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
/**
 *
 * @export
 * @enum {string}
 */
exports.CustomAttributeTypesEnum = {
    String: 'string',
    Datetime: 'datetime',
    Options: 'options',
    User: 'user',
    MultipleOptions: 'multipleOptions'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.ImageResizeOption = {
    Crop: 'Crop',
    AddBackgroundStripes: 'AddBackgroundStripes'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.LinkType = {
    Related: 'Related',
    BlockedBy: 'BlockedBy',
    Defect: 'Defect',
    Issue: 'Issue',
    Requirement: 'Requirement',
    Repository: 'Repository'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.TestPlanStatusModel = {
    New: 'New',
    InProgress: 'InProgress',
    Paused: 'Paused',
    Completed: 'Completed'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.TestRunStateTypeModel = {
    NotStarted: 'NotStarted',
    InProgress: 'InProgress',
    Stopped: 'Stopped',
    Completed: 'Completed'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.WorkItemEntityTypes = {
    TestCases: 'TestCases',
    CheckLists: 'CheckLists',
    SharedSteps: 'SharedSteps'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.WorkItemPriorityModel = {
    Lowest: 'Lowest',
    Low: 'Low',
    Medium: 'Medium',
    High: 'High',
    Highest: 'Highest'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.WorkItemStates = {
    NeedsWork: 'NeedsWork',
    NotReady: 'NotReady',
    Ready: 'Ready'
};
/**
 * AttachmentsApi - axios parameter creator
 * @export
 */
var AttachmentsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * <br>Use case  <br>User send file  <br>User runs method execution  <br>System upload file  <br>System create attachment  <br>System return attachment model (listed in response parameters)
         * @summary Create attachment
         * @param {string} [apiVersion]
         * @param {File} [file] Select file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAttachment: function (apiVersion, file, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/attachments";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (apiVersion !== undefined) {
                                localVarQueryParameter['apiVersion'] = apiVersion;
                            }
                            if (file !== undefined) {
                                localVarFormParams.append('file', file);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.AttachmentsApiAxiosParamCreator = AttachmentsApiAxiosParamCreator;
/**
 * AttachmentsApi - functional programming interface
 * @export
 */
var AttachmentsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AttachmentsApiAxiosParamCreator)(configuration);
    return {
        /**
         * <br>Use case  <br>User send file  <br>User runs method execution  <br>System upload file  <br>System create attachment  <br>System return attachment model (listed in response parameters)
         * @summary Create attachment
         * @param {string} [apiVersion]
         * @param {File} [file] Select file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAttachment: function (apiVersion, file, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addAttachment(apiVersion, file, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.AttachmentsApiFp = AttachmentsApiFp;
/**
 * AttachmentsApi - factory interface
 * @export
 */
var AttachmentsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AttachmentsApiFp)(configuration);
    return {
        /**
         * <br>Use case  <br>User send file  <br>User runs method execution  <br>System upload file  <br>System create attachment  <br>System return attachment model (listed in response parameters)
         * @summary Create attachment
         * @param {string} [apiVersion]
         * @param {File} [file] Select file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAttachment: function (apiVersion, file, options) {
            return localVarFp.addAttachment(apiVersion, file, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AttachmentsApiFactory = AttachmentsApiFactory;
/**
 * AttachmentsApi - object-oriented interface
 * @export
 * @class AttachmentsApi
 * @extends {BaseAPI}
 */
var AttachmentsApi = /** @class */ (function (_super) {
    __extends(AttachmentsApi, _super);
    function AttachmentsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * <br>Use case  <br>User send file  <br>User runs method execution  <br>System upload file  <br>System create attachment  <br>System return attachment model (listed in response parameters)
     * @summary Create attachment
     * @param {string} [apiVersion]
     * @param {File} [file] Select file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApi
     */
    AttachmentsApi.prototype.addAttachment = function (apiVersion, file, options) {
        var _this = this;
        return (0, exports.AttachmentsApiFp)(this.configuration).addAttachment(apiVersion, file, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AttachmentsApi;
}(base_1.BaseAPI));
exports.AttachmentsApi = AttachmentsApi;
/**
 * AutoTestsApi - axios parameter creator
 * @export
 */
var AutoTestsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * <br>Use case  <br>User sets autotest parameters (listed in the example) and runs method execution  <br>System creates autotest  <br>[Optional] If steps enumeration is set, system creates step items and relates them to autotest  <br>[Optional] If setup enumeration is set, system creates setup items and relates them to autotest  <br>[Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest  <br>[Optional] If label enumeration is set, system creates labels and relates them to autotest  <br>[Optional] If link enumeration is set, system creates links and relates them to autotest  <br>System returns autotest model (example listed in response parameters)
         * @summary Create AutoTest
         * @param {AutoTestPostModel} [autoTestPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAutoTest: function (autoTestPostModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/autoTests";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(autoTestPostModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets autotest parameters (listed in the example) and runs method execution  <br>System creates autotest  <br>[Optional] If steps enumeration is set, system creates step items and relates them to autotest  <br>[Optional] If setup enumeration is set, system creates setup items and relates them to autotest  <br>[Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest  <br>[Optional] If label enumeration is set, system creates labels and relates them to autotest  <br>[Optional] If link enumeration is set, system creates links and relates them to autotest  <br>System returns autotest model (example listed in response parameters)
         * @summary Create AutoTests multiple
         * @param {Array<AutoTestPostModel>} [autoTestPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultiple: function (autoTestPostModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/autoTests/bulk";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(autoTestPostModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier and runs method execution  <br>System finds the autotest by the identifier  <br>System deletes autotest and returns no content response
         * @summary Delete AutoTest by Id or GlobalId
         * @param {string} autoTestId Autotest internal (guid format) or global  (integer format) identifier \&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAutoTest: function (autoTestId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'autoTestId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteAutoTest', 'autoTestId', autoTestId);
                            localVarPath = "/api/v2/autoTests/{autoTestId}"
                                .replace("{".concat("autoTestId", "}"), encodeURIComponent(String(autoTestId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>[Optional] User sets workitem internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System finds the autotest by the autotest identifier  <br>                      [Optional] if workitem id is set by User, System finds the workitem by the workitem identifier and unlinks it                      from autotest.                    <br>[Optional] Otherwise, if workitem id is not specified, System unlinks all workitems linked to autotest.  <br>System returns no content response
         * @summary Delete AutoTest link from WorkItem by Id or GlobalId  (if workItemId is not specified, then remove all links WorkItems to AutoTest)
         * @param {string} autoTestId autotest internal (guid format) or global  (integer format) identifier
         * @param {string} [workItemId] workItem internal (guid format) or global  (integer format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAutoTestLinkFromWorkItem: function (autoTestId, workItemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'autoTestId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteAutoTestLinkFromWorkItem', 'autoTestId', autoTestId);
                            localVarPath = "/api/v2/autoTests/{autoTestId}/workItems"
                                .replace("{".concat("autoTestId", "}"), encodeURIComponent(String(autoTestId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (workItemId !== undefined) {
                                localVarQueryParameter['workItemId'] = workItemId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>[Optional] User sets search parameters (listed in request parameters) and runs method execution  <br>System returns all autotests, matching search criteria
         * @summary Get all AutoTests (if parameters are specified, then it\'s filtered by them.)
         * @param {string} [projectId] Project internal identifier
         * @param {string} [externalId] Autotest external identifier
         * @param {number} [globalId] Autotest global identifier
         * @param {string} [namespace] Name of abstract storage where autotest is located
         * @param {boolean} [isNamespaceNull] Boolean flag which defines if search must include autotests with null  value Namespace attribute
         * @param {string} [classname] Name of the class where autotest is located
         * @param {boolean} [isClassnameNull] Boolean flag which defines if search must include autotests with null  value Classname attribute
         * @param {boolean} [isDeleted] Boolean flag which defines if search must include deleted autotests
         * @param {Array<string>} [labels] List of autotests labels to filter by
         * @param {number} [stabilityMinimal] Minimal stability value to filter by
         * @param {number} [stabilityMaximal] Maximal stability value to filter by
         * @param {boolean} [isFlaky] [Optional] If flaky is set
         * @param {boolean} [includeSteps] Boolean flag which defines if setup, steps and teardown fields must be included
         * @param {boolean} [includeLabels] Boolean flag which defines if labels field must be included
         * @param {number} [skip] Amount of items to be skipped (offset)
         * @param {number} [take] Amount of items to be taken (limit)
         * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {string} [searchField] Property name for searching
         * @param {string} [searchValue] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAutoTests: function (projectId, externalId, globalId, namespace, isNamespaceNull, classname, isClassnameNull, isDeleted, labels, stabilityMinimal, stabilityMaximal, isFlaky, includeSteps, includeLabels, skip, take, orderBy, searchField, searchValue, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/autoTests";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (projectId !== undefined) {
                                localVarQueryParameter['projectId'] = projectId;
                            }
                            if (externalId !== undefined) {
                                localVarQueryParameter['externalId'] = externalId;
                            }
                            if (globalId !== undefined) {
                                localVarQueryParameter['globalId'] = globalId;
                            }
                            if (namespace !== undefined) {
                                localVarQueryParameter['Namespace'] = namespace;
                            }
                            if (isNamespaceNull !== undefined) {
                                localVarQueryParameter['isNamespaceNull'] = isNamespaceNull;
                            }
                            if (classname !== undefined) {
                                localVarQueryParameter['classname'] = classname;
                            }
                            if (isClassnameNull !== undefined) {
                                localVarQueryParameter['isClassnameNull'] = isClassnameNull;
                            }
                            if (isDeleted !== undefined) {
                                localVarQueryParameter['isDeleted'] = isDeleted;
                            }
                            if (labels) {
                                localVarQueryParameter['labels'] = labels;
                            }
                            if (stabilityMinimal !== undefined) {
                                localVarQueryParameter['stabilityMinimal'] = stabilityMinimal;
                            }
                            if (stabilityMaximal !== undefined) {
                                localVarQueryParameter['stabilityMaximal'] = stabilityMaximal;
                            }
                            if (isFlaky !== undefined) {
                                localVarQueryParameter['isFlaky'] = isFlaky;
                            }
                            if (includeSteps !== undefined) {
                                localVarQueryParameter['includeSteps'] = includeSteps;
                            }
                            if (includeLabels !== undefined) {
                                localVarQueryParameter['includeLabels'] = includeLabels;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['Skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['Take'] = take;
                            }
                            if (orderBy !== undefined) {
                                localVarQueryParameter['OrderBy'] = orderBy;
                            }
                            if (searchField !== undefined) {
                                localVarQueryParameter['SearchField'] = searchField;
                            }
                            if (searchValue !== undefined) {
                                localVarQueryParameter['SearchValue'] = searchValue;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System calculates pass average duration and fail average duration of autotest from all related test results  <br>System returns pass average duration and fail average duration for autotest
         * @summary Get AutoTest average duration by Id or GlobalId
         * @param {string} autoTestId autotest internal (guid format) or global  (integer format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoTestAverageDuration: function (autoTestId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'autoTestId' is not null or undefined
                            (0, common_1.assertParamExists)('getAutoTestAverageDuration', 'autoTestId', autoTestId);
                            localVarPath = "/api/v2/autoTests/{autoTestId}/averageDuration"
                                .replace("{".concat("autoTestId", "}"), encodeURIComponent(String(autoTestId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets autotest internal or global identifier and runs method execution  <br>                      System returns autotest, which internal or global identifier equals the identifier value set in the previous                      action
         * @summary Get AutoTest by Id or GlobalId
         * @param {string} autoTestId Autotest internal identifier (guid format) or  global identifier (integer format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoTestById: function (autoTestId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'autoTestId' is not null or undefined
                            (0, common_1.assertParamExists)('getAutoTestById', 'autoTestId', autoTestId);
                            localVarPath = "/api/v2/autoTests/{autoTestId}"
                                .replace("{".concat("autoTestId", "}"), encodeURIComponent(String(autoTestId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System search all test results related to autotest (with default limit equal 100)  <br>                      System orders the test results by CompletedOn property descending and then orders by CreatedDate property                      descending                    <br>System returns test result chronology for autotest
         * @summary Get AutoTest chronology by Id or GlobalId
         * @param {string} autoTestId autotest internal (guid format) or global  (integer format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoTestChronology: function (autoTestId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'autoTestId' is not null or undefined
                            (0, common_1.assertParamExists)('getAutoTestChronology', 'autoTestId', autoTestId);
                            localVarPath = "/api/v2/autoTests/{autoTestId}/chronology"
                                .replace("{".concat("autoTestId", "}"), encodeURIComponent(String(autoTestId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System search for all test runs related to the autotest  <br>System returns the enumeration of test runs
         * @summary Stopped and completed TestRuns which contain AutoTest by Id or GlobalId
         * @param {string} autoTestId autotest internal (guid format) or global  (integer format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestRuns: function (autoTestId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'autoTestId' is not null or undefined
                            (0, common_1.assertParamExists)('getTestRuns', 'autoTestId', autoTestId);
                            localVarPath = "/api/v2/autoTests/{autoTestId}/testRuns"
                                .replace("{".concat("autoTestId", "}"), encodeURIComponent(String(autoTestId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User sets getTestResultHistoryReportQuery (listed in the example)  <br>User runs method execution  <br>System search for test results using filters set by user in getTestResultHistoryReportQuery and autoTestId  <br>System returns the enumeration of test results
         * @summary History of TestResults for AutoTest by Id or GlobalId
         * @param {string} autoTestId autotest internal (guid format) or global  (integer format) identifier
         * @param {string} [from]
         * @param {string} [to]
         * @param {Array<string>} [configurationIds]
         * @param {Array<string>} [testPlanIds]
         * @param {Array<string>} [userIds]
         * @param {Array<string>} [outcomes]
         * @param {boolean} [isAutomated]
         * @param {Array<string>} [testRunIds]
         * @param {number} [skip] Amount of items to be skipped (offset)
         * @param {number} [take] Amount of items to be taken (limit)
         * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {string} [searchField] Property name for searching
         * @param {string} [searchValue] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemResults: function (autoTestId, from, to, configurationIds, testPlanIds, userIds, outcomes, isAutomated, testRunIds, skip, take, orderBy, searchField, searchValue, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'autoTestId' is not null or undefined
                            (0, common_1.assertParamExists)('getWorkItemResults', 'autoTestId', autoTestId);
                            localVarPath = "/api/v2/autoTests/{autoTestId}/testResultHistory"
                                .replace("{".concat("autoTestId", "}"), encodeURIComponent(String(autoTestId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (from !== undefined) {
                                localVarQueryParameter['From'] = (from instanceof Date) ?
                                    from.toISOString() :
                                    from;
                            }
                            if (to !== undefined) {
                                localVarQueryParameter['To'] = (to instanceof Date) ?
                                    to.toISOString() :
                                    to;
                            }
                            if (configurationIds) {
                                localVarQueryParameter['ConfigurationIds'] = configurationIds;
                            }
                            if (testPlanIds) {
                                localVarQueryParameter['TestPlanIds'] = testPlanIds;
                            }
                            if (userIds) {
                                localVarQueryParameter['UserIds'] = userIds;
                            }
                            if (outcomes) {
                                localVarQueryParameter['Outcomes'] = outcomes;
                            }
                            if (isAutomated !== undefined) {
                                localVarQueryParameter['IsAutomated'] = isAutomated;
                            }
                            if (testRunIds) {
                                localVarQueryParameter['TestRunIds'] = testRunIds;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['Skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['Take'] = take;
                            }
                            if (orderBy !== undefined) {
                                localVarQueryParameter['OrderBy'] = orderBy;
                            }
                            if (searchField !== undefined) {
                                localVarQueryParameter['SearchField'] = searchField;
                            }
                            if (searchValue !== undefined) {
                                localVarQueryParameter['SearchValue'] = searchValue;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier and runs method execution  <br>System finds the autotest by the identifier  <br>System finds all actual and not deleted WorkItems related to the found autotest  <br>System returns the enumeration of WorkItems
         * @summary Get all WorkItems Ids linked to AutoTest by Id or GlobalId
         * @param {string} autoTestId Autotest internal (guid format) or global  (integer format) identifier
         * @param {boolean} [isWorkItemDeleted] Boolean flag which defines if search must include deleted worItems
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemsLinkedToAutoTest: function (autoTestId, isWorkItemDeleted, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'autoTestId' is not null or undefined
                            (0, common_1.assertParamExists)('getWorkItemsLinkedToAutoTest', 'autoTestId', autoTestId);
                            localVarPath = "/api/v2/autoTests/{autoTestId}/workItems"
                                .replace("{".concat("autoTestId", "}"), encodeURIComponent(String(autoTestId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (isWorkItemDeleted !== undefined) {
                                localVarQueryParameter['isWorkItemDeleted'] = isWorkItemDeleted;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User sets workitem internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System finds the autotest by the autotest identifier  <br>System finds the workitem by the workitem identifier  <br>System relates the workitem with the autotest and returns no content response
         * @summary Link AutoTest to WorkItem by Id or GlobalId
         * @param {string} autoTestId Autotest internal (guid format) or global  (integer format) identifier
         * @param {WorkItemIdModel} [workItemIdModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkAutoTestToWorkItem: function (autoTestId, workItemIdModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'autoTestId' is not null or undefined
                            (0, common_1.assertParamExists)('linkAutoTestToWorkItem', 'autoTestId', autoTestId);
                            localVarPath = "/api/v2/autoTests/{autoTestId}/workItems"
                                .replace("{".concat("autoTestId", "}"), encodeURIComponent(String(autoTestId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(workItemIdModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets autotest updated parameters values (listed in the example) and runs method execution  <br>System finds the autotest by the identifier  <br>System updates autotest parameters   <br>                      [Optional] If steps enumeration is set, system creates step items, relates them to autotest                      and deletes relations with current steps( if exist)                    <br>                      [Optional] If Setup enumeration is set, system creates setup items and relates them to autotest                      and deletes relations with current Setup items (if exist)                    <br>                      [Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest                      and deletes relations with current teardown items (if exist)                    <br>                      [Optional] If label enumeration is set, system creates labels and relates them to autotest                      and deletes relations with current Labels (if exist)                    <br>                      [Optional] If link enumeration is set, system creates links and relates them to autotest                      and deletes relations with current Links (if exist)                    <br>System updates autotest and returns no content response
         * @summary Update AutoTest
         * @param {AutoTestPutModel} [autoTestPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAutoTest: function (autoTestPutModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/autoTests";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(autoTestPutModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets autotest updated parameters values (listed in the example) and runs method execution  <br>System finds the autotest by the identifier  <br>System updates autotest parameters   <br>                      [Optional] If steps enumeration is set, system creates step items, relates them to autotest                      and deletes relations with current steps( if exist)                    <br>                      [Optional] If Setup enumeration is set, system creates setup items and relates them to autotest                      and deletes relations with current Setup items (if exist)                    <br>                      [Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest                      and deletes relations with current teardown items (if exist)                    <br>                      [Optional] If label enumeration is set, system creates labels and relates them to autotest                      and deletes relations with current Labels (if exist)                    <br>                      [Optional] If link enumeration is set, system creates links and relates them to autotest                      and deletes relations with current Links (if exist)                    <br>System updates autotest and returns no content response
         * @summary Update AutoTests multiple
         * @param {Array<AutoTestPutModel>} [autoTestPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMultiple: function (autoTestPutModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/autoTests/bulk";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(autoTestPutModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.AutoTestsApiAxiosParamCreator = AutoTestsApiAxiosParamCreator;
/**
 * AutoTestsApi - functional programming interface
 * @export
 */
var AutoTestsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AutoTestsApiAxiosParamCreator)(configuration);
    return {
        /**
         * <br>Use case  <br>User sets autotest parameters (listed in the example) and runs method execution  <br>System creates autotest  <br>[Optional] If steps enumeration is set, system creates step items and relates them to autotest  <br>[Optional] If setup enumeration is set, system creates setup items and relates them to autotest  <br>[Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest  <br>[Optional] If label enumeration is set, system creates labels and relates them to autotest  <br>[Optional] If link enumeration is set, system creates links and relates them to autotest  <br>System returns autotest model (example listed in response parameters)
         * @summary Create AutoTest
         * @param {AutoTestPostModel} [autoTestPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAutoTest: function (autoTestPostModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createAutoTest(autoTestPostModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets autotest parameters (listed in the example) and runs method execution  <br>System creates autotest  <br>[Optional] If steps enumeration is set, system creates step items and relates them to autotest  <br>[Optional] If setup enumeration is set, system creates setup items and relates them to autotest  <br>[Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest  <br>[Optional] If label enumeration is set, system creates labels and relates them to autotest  <br>[Optional] If link enumeration is set, system creates links and relates them to autotest  <br>System returns autotest model (example listed in response parameters)
         * @summary Create AutoTests multiple
         * @param {Array<AutoTestPostModel>} [autoTestPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultiple: function (autoTestPostModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createMultiple(autoTestPostModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier and runs method execution  <br>System finds the autotest by the identifier  <br>System deletes autotest and returns no content response
         * @summary Delete AutoTest by Id or GlobalId
         * @param {string} autoTestId Autotest internal (guid format) or global  (integer format) identifier \&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAutoTest: function (autoTestId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteAutoTest(autoTestId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>[Optional] User sets workitem internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System finds the autotest by the autotest identifier  <br>                      [Optional] if workitem id is set by User, System finds the workitem by the workitem identifier and unlinks it                      from autotest.                    <br>[Optional] Otherwise, if workitem id is not specified, System unlinks all workitems linked to autotest.  <br>System returns no content response
         * @summary Delete AutoTest link from WorkItem by Id or GlobalId  (if workItemId is not specified, then remove all links WorkItems to AutoTest)
         * @param {string} autoTestId autotest internal (guid format) or global  (integer format) identifier
         * @param {string} [workItemId] workItem internal (guid format) or global  (integer format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAutoTestLinkFromWorkItem: function (autoTestId, workItemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteAutoTestLinkFromWorkItem(autoTestId, workItemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>[Optional] User sets search parameters (listed in request parameters) and runs method execution  <br>System returns all autotests, matching search criteria
         * @summary Get all AutoTests (if parameters are specified, then it\'s filtered by them.)
         * @param {string} [projectId] Project internal identifier
         * @param {string} [externalId] Autotest external identifier
         * @param {number} [globalId] Autotest global identifier
         * @param {string} [namespace] Name of abstract storage where autotest is located
         * @param {boolean} [isNamespaceNull] Boolean flag which defines if search must include autotests with null  value Namespace attribute
         * @param {string} [classname] Name of the class where autotest is located
         * @param {boolean} [isClassnameNull] Boolean flag which defines if search must include autotests with null  value Classname attribute
         * @param {boolean} [isDeleted] Boolean flag which defines if search must include deleted autotests
         * @param {Array<string>} [labels] List of autotests labels to filter by
         * @param {number} [stabilityMinimal] Minimal stability value to filter by
         * @param {number} [stabilityMaximal] Maximal stability value to filter by
         * @param {boolean} [isFlaky] [Optional] If flaky is set
         * @param {boolean} [includeSteps] Boolean flag which defines if setup, steps and teardown fields must be included
         * @param {boolean} [includeLabels] Boolean flag which defines if labels field must be included
         * @param {number} [skip] Amount of items to be skipped (offset)
         * @param {number} [take] Amount of items to be taken (limit)
         * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {string} [searchField] Property name for searching
         * @param {string} [searchValue] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAutoTests: function (projectId, externalId, globalId, namespace, isNamespaceNull, classname, isClassnameNull, isDeleted, labels, stabilityMinimal, stabilityMaximal, isFlaky, includeSteps, includeLabels, skip, take, orderBy, searchField, searchValue, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllAutoTests(projectId, externalId, globalId, namespace, isNamespaceNull, classname, isClassnameNull, isDeleted, labels, stabilityMinimal, stabilityMaximal, isFlaky, includeSteps, includeLabels, skip, take, orderBy, searchField, searchValue, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System calculates pass average duration and fail average duration of autotest from all related test results  <br>System returns pass average duration and fail average duration for autotest
         * @summary Get AutoTest average duration by Id or GlobalId
         * @param {string} autoTestId autotest internal (guid format) or global  (integer format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoTestAverageDuration: function (autoTestId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAutoTestAverageDuration(autoTestId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets autotest internal or global identifier and runs method execution  <br>                      System returns autotest, which internal or global identifier equals the identifier value set in the previous                      action
         * @summary Get AutoTest by Id or GlobalId
         * @param {string} autoTestId Autotest internal identifier (guid format) or  global identifier (integer format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoTestById: function (autoTestId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAutoTestById(autoTestId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System search all test results related to autotest (with default limit equal 100)  <br>                      System orders the test results by CompletedOn property descending and then orders by CreatedDate property                      descending                    <br>System returns test result chronology for autotest
         * @summary Get AutoTest chronology by Id or GlobalId
         * @param {string} autoTestId autotest internal (guid format) or global  (integer format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoTestChronology: function (autoTestId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAutoTestChronology(autoTestId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System search for all test runs related to the autotest  <br>System returns the enumeration of test runs
         * @summary Stopped and completed TestRuns which contain AutoTest by Id or GlobalId
         * @param {string} autoTestId autotest internal (guid format) or global  (integer format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestRuns: function (autoTestId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTestRuns(autoTestId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User sets getTestResultHistoryReportQuery (listed in the example)  <br>User runs method execution  <br>System search for test results using filters set by user in getTestResultHistoryReportQuery and autoTestId  <br>System returns the enumeration of test results
         * @summary History of TestResults for AutoTest by Id or GlobalId
         * @param {string} autoTestId autotest internal (guid format) or global  (integer format) identifier
         * @param {string} [from]
         * @param {string} [to]
         * @param {Array<string>} [configurationIds]
         * @param {Array<string>} [testPlanIds]
         * @param {Array<string>} [userIds]
         * @param {Array<string>} [outcomes]
         * @param {boolean} [isAutomated]
         * @param {Array<string>} [testRunIds]
         * @param {number} [skip] Amount of items to be skipped (offset)
         * @param {number} [take] Amount of items to be taken (limit)
         * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {string} [searchField] Property name for searching
         * @param {string} [searchValue] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemResults: function (autoTestId, from, to, configurationIds, testPlanIds, userIds, outcomes, isAutomated, testRunIds, skip, take, orderBy, searchField, searchValue, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getWorkItemResults(autoTestId, from, to, configurationIds, testPlanIds, userIds, outcomes, isAutomated, testRunIds, skip, take, orderBy, searchField, searchValue, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier and runs method execution  <br>System finds the autotest by the identifier  <br>System finds all actual and not deleted WorkItems related to the found autotest  <br>System returns the enumeration of WorkItems
         * @summary Get all WorkItems Ids linked to AutoTest by Id or GlobalId
         * @param {string} autoTestId Autotest internal (guid format) or global  (integer format) identifier
         * @param {boolean} [isWorkItemDeleted] Boolean flag which defines if search must include deleted worItems
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemsLinkedToAutoTest: function (autoTestId, isWorkItemDeleted, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getWorkItemsLinkedToAutoTest(autoTestId, isWorkItemDeleted, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User sets workitem internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System finds the autotest by the autotest identifier  <br>System finds the workitem by the workitem identifier  <br>System relates the workitem with the autotest and returns no content response
         * @summary Link AutoTest to WorkItem by Id or GlobalId
         * @param {string} autoTestId Autotest internal (guid format) or global  (integer format) identifier
         * @param {WorkItemIdModel} [workItemIdModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkAutoTestToWorkItem: function (autoTestId, workItemIdModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.linkAutoTestToWorkItem(autoTestId, workItemIdModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets autotest updated parameters values (listed in the example) and runs method execution  <br>System finds the autotest by the identifier  <br>System updates autotest parameters   <br>                      [Optional] If steps enumeration is set, system creates step items, relates them to autotest                      and deletes relations with current steps( if exist)                    <br>                      [Optional] If Setup enumeration is set, system creates setup items and relates them to autotest                      and deletes relations with current Setup items (if exist)                    <br>                      [Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest                      and deletes relations with current teardown items (if exist)                    <br>                      [Optional] If label enumeration is set, system creates labels and relates them to autotest                      and deletes relations with current Labels (if exist)                    <br>                      [Optional] If link enumeration is set, system creates links and relates them to autotest                      and deletes relations with current Links (if exist)                    <br>System updates autotest and returns no content response
         * @summary Update AutoTest
         * @param {AutoTestPutModel} [autoTestPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAutoTest: function (autoTestPutModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateAutoTest(autoTestPutModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets autotest updated parameters values (listed in the example) and runs method execution  <br>System finds the autotest by the identifier  <br>System updates autotest parameters   <br>                      [Optional] If steps enumeration is set, system creates step items, relates them to autotest                      and deletes relations with current steps( if exist)                    <br>                      [Optional] If Setup enumeration is set, system creates setup items and relates them to autotest                      and deletes relations with current Setup items (if exist)                    <br>                      [Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest                      and deletes relations with current teardown items (if exist)                    <br>                      [Optional] If label enumeration is set, system creates labels and relates them to autotest                      and deletes relations with current Labels (if exist)                    <br>                      [Optional] If link enumeration is set, system creates links and relates them to autotest                      and deletes relations with current Links (if exist)                    <br>System updates autotest and returns no content response
         * @summary Update AutoTests multiple
         * @param {Array<AutoTestPutModel>} [autoTestPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMultiple: function (autoTestPutModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateMultiple(autoTestPutModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.AutoTestsApiFp = AutoTestsApiFp;
/**
 * AutoTestsApi - factory interface
 * @export
 */
var AutoTestsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AutoTestsApiFp)(configuration);
    return {
        /**
         * <br>Use case  <br>User sets autotest parameters (listed in the example) and runs method execution  <br>System creates autotest  <br>[Optional] If steps enumeration is set, system creates step items and relates them to autotest  <br>[Optional] If setup enumeration is set, system creates setup items and relates them to autotest  <br>[Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest  <br>[Optional] If label enumeration is set, system creates labels and relates them to autotest  <br>[Optional] If link enumeration is set, system creates links and relates them to autotest  <br>System returns autotest model (example listed in response parameters)
         * @summary Create AutoTest
         * @param {AutoTestPostModel} [autoTestPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAutoTest: function (autoTestPostModel, options) {
            return localVarFp.createAutoTest(autoTestPostModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets autotest parameters (listed in the example) and runs method execution  <br>System creates autotest  <br>[Optional] If steps enumeration is set, system creates step items and relates them to autotest  <br>[Optional] If setup enumeration is set, system creates setup items and relates them to autotest  <br>[Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest  <br>[Optional] If label enumeration is set, system creates labels and relates them to autotest  <br>[Optional] If link enumeration is set, system creates links and relates them to autotest  <br>System returns autotest model (example listed in response parameters)
         * @summary Create AutoTests multiple
         * @param {Array<AutoTestPostModel>} [autoTestPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMultiple: function (autoTestPostModel, options) {
            return localVarFp.createMultiple(autoTestPostModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier and runs method execution  <br>System finds the autotest by the identifier  <br>System deletes autotest and returns no content response
         * @summary Delete AutoTest by Id or GlobalId
         * @param {string} autoTestId Autotest internal (guid format) or global  (integer format) identifier \&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAutoTest: function (autoTestId, options) {
            return localVarFp.deleteAutoTest(autoTestId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>[Optional] User sets workitem internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System finds the autotest by the autotest identifier  <br>                      [Optional] if workitem id is set by User, System finds the workitem by the workitem identifier and unlinks it                      from autotest.                    <br>[Optional] Otherwise, if workitem id is not specified, System unlinks all workitems linked to autotest.  <br>System returns no content response
         * @summary Delete AutoTest link from WorkItem by Id or GlobalId  (if workItemId is not specified, then remove all links WorkItems to AutoTest)
         * @param {string} autoTestId autotest internal (guid format) or global  (integer format) identifier
         * @param {string} [workItemId] workItem internal (guid format) or global  (integer format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAutoTestLinkFromWorkItem: function (autoTestId, workItemId, options) {
            return localVarFp.deleteAutoTestLinkFromWorkItem(autoTestId, workItemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>[Optional] User sets search parameters (listed in request parameters) and runs method execution  <br>System returns all autotests, matching search criteria
         * @summary Get all AutoTests (if parameters are specified, then it\'s filtered by them.)
         * @param {string} [projectId] Project internal identifier
         * @param {string} [externalId] Autotest external identifier
         * @param {number} [globalId] Autotest global identifier
         * @param {string} [namespace] Name of abstract storage where autotest is located
         * @param {boolean} [isNamespaceNull] Boolean flag which defines if search must include autotests with null  value Namespace attribute
         * @param {string} [classname] Name of the class where autotest is located
         * @param {boolean} [isClassnameNull] Boolean flag which defines if search must include autotests with null  value Classname attribute
         * @param {boolean} [isDeleted] Boolean flag which defines if search must include deleted autotests
         * @param {Array<string>} [labels] List of autotests labels to filter by
         * @param {number} [stabilityMinimal] Minimal stability value to filter by
         * @param {number} [stabilityMaximal] Maximal stability value to filter by
         * @param {boolean} [isFlaky] [Optional] If flaky is set
         * @param {boolean} [includeSteps] Boolean flag which defines if setup, steps and teardown fields must be included
         * @param {boolean} [includeLabels] Boolean flag which defines if labels field must be included
         * @param {number} [skip] Amount of items to be skipped (offset)
         * @param {number} [take] Amount of items to be taken (limit)
         * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {string} [searchField] Property name for searching
         * @param {string} [searchValue] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAutoTests: function (projectId, externalId, globalId, namespace, isNamespaceNull, classname, isClassnameNull, isDeleted, labels, stabilityMinimal, stabilityMaximal, isFlaky, includeSteps, includeLabels, skip, take, orderBy, searchField, searchValue, options) {
            return localVarFp.getAllAutoTests(projectId, externalId, globalId, namespace, isNamespaceNull, classname, isClassnameNull, isDeleted, labels, stabilityMinimal, stabilityMaximal, isFlaky, includeSteps, includeLabels, skip, take, orderBy, searchField, searchValue, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System calculates pass average duration and fail average duration of autotest from all related test results  <br>System returns pass average duration and fail average duration for autotest
         * @summary Get AutoTest average duration by Id or GlobalId
         * @param {string} autoTestId autotest internal (guid format) or global  (integer format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoTestAverageDuration: function (autoTestId, options) {
            return localVarFp.getAutoTestAverageDuration(autoTestId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets autotest internal or global identifier and runs method execution  <br>                      System returns autotest, which internal or global identifier equals the identifier value set in the previous                      action
         * @summary Get AutoTest by Id or GlobalId
         * @param {string} autoTestId Autotest internal identifier (guid format) or  global identifier (integer format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoTestById: function (autoTestId, options) {
            return localVarFp.getAutoTestById(autoTestId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System search all test results related to autotest (with default limit equal 100)  <br>                      System orders the test results by CompletedOn property descending and then orders by CreatedDate property                      descending                    <br>System returns test result chronology for autotest
         * @summary Get AutoTest chronology by Id or GlobalId
         * @param {string} autoTestId autotest internal (guid format) or global  (integer format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoTestChronology: function (autoTestId, options) {
            return localVarFp.getAutoTestChronology(autoTestId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System search for all test runs related to the autotest  <br>System returns the enumeration of test runs
         * @summary Stopped and completed TestRuns which contain AutoTest by Id or GlobalId
         * @param {string} autoTestId autotest internal (guid format) or global  (integer format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestRuns: function (autoTestId, options) {
            return localVarFp.getTestRuns(autoTestId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User sets getTestResultHistoryReportQuery (listed in the example)  <br>User runs method execution  <br>System search for test results using filters set by user in getTestResultHistoryReportQuery and autoTestId  <br>System returns the enumeration of test results
         * @summary History of TestResults for AutoTest by Id or GlobalId
         * @param {string} autoTestId autotest internal (guid format) or global  (integer format) identifier
         * @param {string} [from]
         * @param {string} [to]
         * @param {Array<string>} [configurationIds]
         * @param {Array<string>} [testPlanIds]
         * @param {Array<string>} [userIds]
         * @param {Array<string>} [outcomes]
         * @param {boolean} [isAutomated]
         * @param {Array<string>} [testRunIds]
         * @param {number} [skip] Amount of items to be skipped (offset)
         * @param {number} [take] Amount of items to be taken (limit)
         * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {string} [searchField] Property name for searching
         * @param {string} [searchValue] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemResults: function (autoTestId, from, to, configurationIds, testPlanIds, userIds, outcomes, isAutomated, testRunIds, skip, take, orderBy, searchField, searchValue, options) {
            return localVarFp.getWorkItemResults(autoTestId, from, to, configurationIds, testPlanIds, userIds, outcomes, isAutomated, testRunIds, skip, take, orderBy, searchField, searchValue, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier and runs method execution  <br>System finds the autotest by the identifier  <br>System finds all actual and not deleted WorkItems related to the found autotest  <br>System returns the enumeration of WorkItems
         * @summary Get all WorkItems Ids linked to AutoTest by Id or GlobalId
         * @param {string} autoTestId Autotest internal (guid format) or global  (integer format) identifier
         * @param {boolean} [isWorkItemDeleted] Boolean flag which defines if search must include deleted worItems
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemsLinkedToAutoTest: function (autoTestId, isWorkItemDeleted, options) {
            return localVarFp.getWorkItemsLinkedToAutoTest(autoTestId, isWorkItemDeleted, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User sets workitem internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System finds the autotest by the autotest identifier  <br>System finds the workitem by the workitem identifier  <br>System relates the workitem with the autotest and returns no content response
         * @summary Link AutoTest to WorkItem by Id or GlobalId
         * @param {string} autoTestId Autotest internal (guid format) or global  (integer format) identifier
         * @param {WorkItemIdModel} [workItemIdModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkAutoTestToWorkItem: function (autoTestId, workItemIdModel, options) {
            return localVarFp.linkAutoTestToWorkItem(autoTestId, workItemIdModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets autotest updated parameters values (listed in the example) and runs method execution  <br>System finds the autotest by the identifier  <br>System updates autotest parameters   <br>                      [Optional] If steps enumeration is set, system creates step items, relates them to autotest                      and deletes relations with current steps( if exist)                    <br>                      [Optional] If Setup enumeration is set, system creates setup items and relates them to autotest                      and deletes relations with current Setup items (if exist)                    <br>                      [Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest                      and deletes relations with current teardown items (if exist)                    <br>                      [Optional] If label enumeration is set, system creates labels and relates them to autotest                      and deletes relations with current Labels (if exist)                    <br>                      [Optional] If link enumeration is set, system creates links and relates them to autotest                      and deletes relations with current Links (if exist)                    <br>System updates autotest and returns no content response
         * @summary Update AutoTest
         * @param {AutoTestPutModel} [autoTestPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAutoTest: function (autoTestPutModel, options) {
            return localVarFp.updateAutoTest(autoTestPutModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets autotest updated parameters values (listed in the example) and runs method execution  <br>System finds the autotest by the identifier  <br>System updates autotest parameters   <br>                      [Optional] If steps enumeration is set, system creates step items, relates them to autotest                      and deletes relations with current steps( if exist)                    <br>                      [Optional] If Setup enumeration is set, system creates setup items and relates them to autotest                      and deletes relations with current Setup items (if exist)                    <br>                      [Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest                      and deletes relations with current teardown items (if exist)                    <br>                      [Optional] If label enumeration is set, system creates labels and relates them to autotest                      and deletes relations with current Labels (if exist)                    <br>                      [Optional] If link enumeration is set, system creates links and relates them to autotest                      and deletes relations with current Links (if exist)                    <br>System updates autotest and returns no content response
         * @summary Update AutoTests multiple
         * @param {Array<AutoTestPutModel>} [autoTestPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMultiple: function (autoTestPutModel, options) {
            return localVarFp.updateMultiple(autoTestPutModel, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AutoTestsApiFactory = AutoTestsApiFactory;
/**
 * AutoTestsApi - object-oriented interface
 * @export
 * @class AutoTestsApi
 * @extends {BaseAPI}
 */
var AutoTestsApi = /** @class */ (function (_super) {
    __extends(AutoTestsApi, _super);
    function AutoTestsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * <br>Use case  <br>User sets autotest parameters (listed in the example) and runs method execution  <br>System creates autotest  <br>[Optional] If steps enumeration is set, system creates step items and relates them to autotest  <br>[Optional] If setup enumeration is set, system creates setup items and relates them to autotest  <br>[Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest  <br>[Optional] If label enumeration is set, system creates labels and relates them to autotest  <br>[Optional] If link enumeration is set, system creates links and relates them to autotest  <br>System returns autotest model (example listed in response parameters)
     * @summary Create AutoTest
     * @param {AutoTestPostModel} [autoTestPostModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoTestsApi
     */
    AutoTestsApi.prototype.createAutoTest = function (autoTestPostModel, options) {
        var _this = this;
        return (0, exports.AutoTestsApiFp)(this.configuration).createAutoTest(autoTestPostModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets autotest parameters (listed in the example) and runs method execution  <br>System creates autotest  <br>[Optional] If steps enumeration is set, system creates step items and relates them to autotest  <br>[Optional] If setup enumeration is set, system creates setup items and relates them to autotest  <br>[Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest  <br>[Optional] If label enumeration is set, system creates labels and relates them to autotest  <br>[Optional] If link enumeration is set, system creates links and relates them to autotest  <br>System returns autotest model (example listed in response parameters)
     * @summary Create AutoTests multiple
     * @param {Array<AutoTestPostModel>} [autoTestPostModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoTestsApi
     */
    AutoTestsApi.prototype.createMultiple = function (autoTestPostModel, options) {
        var _this = this;
        return (0, exports.AutoTestsApiFp)(this.configuration).createMultiple(autoTestPostModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier and runs method execution  <br>System finds the autotest by the identifier  <br>System deletes autotest and returns no content response
     * @summary Delete AutoTest by Id or GlobalId
     * @param {string} autoTestId Autotest internal (guid format) or global  (integer format) identifier \&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoTestsApi
     */
    AutoTestsApi.prototype.deleteAutoTest = function (autoTestId, options) {
        var _this = this;
        return (0, exports.AutoTestsApiFp)(this.configuration).deleteAutoTest(autoTestId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>[Optional] User sets workitem internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System finds the autotest by the autotest identifier  <br>                      [Optional] if workitem id is set by User, System finds the workitem by the workitem identifier and unlinks it                      from autotest.                    <br>[Optional] Otherwise, if workitem id is not specified, System unlinks all workitems linked to autotest.  <br>System returns no content response
     * @summary Delete AutoTest link from WorkItem by Id or GlobalId  (if workItemId is not specified, then remove all links WorkItems to AutoTest)
     * @param {string} autoTestId autotest internal (guid format) or global  (integer format) identifier
     * @param {string} [workItemId] workItem internal (guid format) or global  (integer format) identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoTestsApi
     */
    AutoTestsApi.prototype.deleteAutoTestLinkFromWorkItem = function (autoTestId, workItemId, options) {
        var _this = this;
        return (0, exports.AutoTestsApiFp)(this.configuration).deleteAutoTestLinkFromWorkItem(autoTestId, workItemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>[Optional] User sets search parameters (listed in request parameters) and runs method execution  <br>System returns all autotests, matching search criteria
     * @summary Get all AutoTests (if parameters are specified, then it\'s filtered by them.)
     * @param {string} [projectId] Project internal identifier
     * @param {string} [externalId] Autotest external identifier
     * @param {number} [globalId] Autotest global identifier
     * @param {string} [namespace] Name of abstract storage where autotest is located
     * @param {boolean} [isNamespaceNull] Boolean flag which defines if search must include autotests with null  value Namespace attribute
     * @param {string} [classname] Name of the class where autotest is located
     * @param {boolean} [isClassnameNull] Boolean flag which defines if search must include autotests with null  value Classname attribute
     * @param {boolean} [isDeleted] Boolean flag which defines if search must include deleted autotests
     * @param {Array<string>} [labels] List of autotests labels to filter by
     * @param {number} [stabilityMinimal] Minimal stability value to filter by
     * @param {number} [stabilityMaximal] Maximal stability value to filter by
     * @param {boolean} [isFlaky] [Optional] If flaky is set
     * @param {boolean} [includeSteps] Boolean flag which defines if setup, steps and teardown fields must be included
     * @param {boolean} [includeLabels] Boolean flag which defines if labels field must be included
     * @param {number} [skip] Amount of items to be skipped (offset)
     * @param {number} [take] Amount of items to be taken (limit)
     * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {string} [searchField] Property name for searching
     * @param {string} [searchValue] Value for searching
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoTestsApi
     */
    AutoTestsApi.prototype.getAllAutoTests = function (projectId, externalId, globalId, namespace, isNamespaceNull, classname, isClassnameNull, isDeleted, labels, stabilityMinimal, stabilityMaximal, isFlaky, includeSteps, includeLabels, skip, take, orderBy, searchField, searchValue, options) {
        var _this = this;
        return (0, exports.AutoTestsApiFp)(this.configuration).getAllAutoTests(projectId, externalId, globalId, namespace, isNamespaceNull, classname, isClassnameNull, isDeleted, labels, stabilityMinimal, stabilityMaximal, isFlaky, includeSteps, includeLabels, skip, take, orderBy, searchField, searchValue, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System calculates pass average duration and fail average duration of autotest from all related test results  <br>System returns pass average duration and fail average duration for autotest
     * @summary Get AutoTest average duration by Id or GlobalId
     * @param {string} autoTestId autotest internal (guid format) or global  (integer format) identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoTestsApi
     */
    AutoTestsApi.prototype.getAutoTestAverageDuration = function (autoTestId, options) {
        var _this = this;
        return (0, exports.AutoTestsApiFp)(this.configuration).getAutoTestAverageDuration(autoTestId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets autotest internal or global identifier and runs method execution  <br>                      System returns autotest, which internal or global identifier equals the identifier value set in the previous                      action
     * @summary Get AutoTest by Id or GlobalId
     * @param {string} autoTestId Autotest internal identifier (guid format) or  global identifier (integer format)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoTestsApi
     */
    AutoTestsApi.prototype.getAutoTestById = function (autoTestId, options) {
        var _this = this;
        return (0, exports.AutoTestsApiFp)(this.configuration).getAutoTestById(autoTestId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System search all test results related to autotest (with default limit equal 100)  <br>                      System orders the test results by CompletedOn property descending and then orders by CreatedDate property                      descending                    <br>System returns test result chronology for autotest
     * @summary Get AutoTest chronology by Id or GlobalId
     * @param {string} autoTestId autotest internal (guid format) or global  (integer format) identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoTestsApi
     */
    AutoTestsApi.prototype.getAutoTestChronology = function (autoTestId, options) {
        var _this = this;
        return (0, exports.AutoTestsApiFp)(this.configuration).getAutoTestChronology(autoTestId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System search for all test runs related to the autotest  <br>System returns the enumeration of test runs
     * @summary Stopped and completed TestRuns which contain AutoTest by Id or GlobalId
     * @param {string} autoTestId autotest internal (guid format) or global  (integer format) identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoTestsApi
     */
    AutoTestsApi.prototype.getTestRuns = function (autoTestId, options) {
        var _this = this;
        return (0, exports.AutoTestsApiFp)(this.configuration).getTestRuns(autoTestId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User sets getTestResultHistoryReportQuery (listed in the example)  <br>User runs method execution  <br>System search for test results using filters set by user in getTestResultHistoryReportQuery and autoTestId  <br>System returns the enumeration of test results
     * @summary History of TestResults for AutoTest by Id or GlobalId
     * @param {string} autoTestId autotest internal (guid format) or global  (integer format) identifier
     * @param {string} [from]
     * @param {string} [to]
     * @param {Array<string>} [configurationIds]
     * @param {Array<string>} [testPlanIds]
     * @param {Array<string>} [userIds]
     * @param {Array<string>} [outcomes]
     * @param {boolean} [isAutomated]
     * @param {Array<string>} [testRunIds]
     * @param {number} [skip] Amount of items to be skipped (offset)
     * @param {number} [take] Amount of items to be taken (limit)
     * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {string} [searchField] Property name for searching
     * @param {string} [searchValue] Value for searching
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoTestsApi
     */
    AutoTestsApi.prototype.getWorkItemResults = function (autoTestId, from, to, configurationIds, testPlanIds, userIds, outcomes, isAutomated, testRunIds, skip, take, orderBy, searchField, searchValue, options) {
        var _this = this;
        return (0, exports.AutoTestsApiFp)(this.configuration).getWorkItemResults(autoTestId, from, to, configurationIds, testPlanIds, userIds, outcomes, isAutomated, testRunIds, skip, take, orderBy, searchField, searchValue, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier and runs method execution  <br>System finds the autotest by the identifier  <br>System finds all actual and not deleted WorkItems related to the found autotest  <br>System returns the enumeration of WorkItems
     * @summary Get all WorkItems Ids linked to AutoTest by Id or GlobalId
     * @param {string} autoTestId Autotest internal (guid format) or global  (integer format) identifier
     * @param {boolean} [isWorkItemDeleted] Boolean flag which defines if search must include deleted worItems
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoTestsApi
     */
    AutoTestsApi.prototype.getWorkItemsLinkedToAutoTest = function (autoTestId, isWorkItemDeleted, options) {
        var _this = this;
        return (0, exports.AutoTestsApiFp)(this.configuration).getWorkItemsLinkedToAutoTest(autoTestId, isWorkItemDeleted, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets autotest internal (guid format) or global (integer format) identifier  <br>User sets workitem internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System finds the autotest by the autotest identifier  <br>System finds the workitem by the workitem identifier  <br>System relates the workitem with the autotest and returns no content response
     * @summary Link AutoTest to WorkItem by Id or GlobalId
     * @param {string} autoTestId Autotest internal (guid format) or global  (integer format) identifier
     * @param {WorkItemIdModel} [workItemIdModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoTestsApi
     */
    AutoTestsApi.prototype.linkAutoTestToWorkItem = function (autoTestId, workItemIdModel, options) {
        var _this = this;
        return (0, exports.AutoTestsApiFp)(this.configuration).linkAutoTestToWorkItem(autoTestId, workItemIdModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets autotest updated parameters values (listed in the example) and runs method execution  <br>System finds the autotest by the identifier  <br>System updates autotest parameters   <br>                      [Optional] If steps enumeration is set, system creates step items, relates them to autotest                      and deletes relations with current steps( if exist)                    <br>                      [Optional] If Setup enumeration is set, system creates setup items and relates them to autotest                      and deletes relations with current Setup items (if exist)                    <br>                      [Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest                      and deletes relations with current teardown items (if exist)                    <br>                      [Optional] If label enumeration is set, system creates labels and relates them to autotest                      and deletes relations with current Labels (if exist)                    <br>                      [Optional] If link enumeration is set, system creates links and relates them to autotest                      and deletes relations with current Links (if exist)                    <br>System updates autotest and returns no content response
     * @summary Update AutoTest
     * @param {AutoTestPutModel} [autoTestPutModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoTestsApi
     */
    AutoTestsApi.prototype.updateAutoTest = function (autoTestPutModel, options) {
        var _this = this;
        return (0, exports.AutoTestsApiFp)(this.configuration).updateAutoTest(autoTestPutModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets autotest updated parameters values (listed in the example) and runs method execution  <br>System finds the autotest by the identifier  <br>System updates autotest parameters   <br>                      [Optional] If steps enumeration is set, system creates step items, relates them to autotest                      and deletes relations with current steps( if exist)                    <br>                      [Optional] If Setup enumeration is set, system creates setup items and relates them to autotest                      and deletes relations with current Setup items (if exist)                    <br>                      [Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest                      and deletes relations with current teardown items (if exist)                    <br>                      [Optional] If label enumeration is set, system creates labels and relates them to autotest                      and deletes relations with current Labels (if exist)                    <br>                      [Optional] If link enumeration is set, system creates links and relates them to autotest                      and deletes relations with current Links (if exist)                    <br>System updates autotest and returns no content response
     * @summary Update AutoTests multiple
     * @param {Array<AutoTestPutModel>} [autoTestPutModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoTestsApi
     */
    AutoTestsApi.prototype.updateMultiple = function (autoTestPutModel, options) {
        var _this = this;
        return (0, exports.AutoTestsApiFp)(this.configuration).updateMultiple(autoTestPutModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AutoTestsApi;
}(base_1.BaseAPI));
exports.AutoTestsApi = AutoTestsApi;
/**
 * ConfigurationsApi - axios parameter creator
 * @export
 */
var ConfigurationsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * <br>Use case  <br>User sets configuration model (listed in the request example)  <br>User runs method execution  <br>System creates configuration  <br>System returns created configuration (listed in the response example)
         * @summary Create Configuration
         * @param {ConfigurationPostModel} [configurationPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConfiguration: function (configurationPostModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/configurations";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(configurationPostModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets configuration internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System search configuration using the identifier  <br>System returns configuration
         * @summary Get Configuration by Id or GlobalId
         * @param {string} configurationId Configuration internal (guid format) or global (integer format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurationById: function (configurationId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'configurationId' is not null or undefined
                            (0, common_1.assertParamExists)('getConfigurationById', 'configurationId', configurationId);
                            localVarPath = "/api/v2/configurations/{configurationId}"
                                .replace("{".concat("configurationId", "}"), encodeURIComponent(String(configurationId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets configuration updated properties(listed in the request example)  <br>User runs method execution  <br>System updated configuration using updated properties  <br>System returns no content response
         * @summary Update Configuration
         * @param {ConfigurationPutModel} [configurationPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConfiguration: function (configurationPutModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/configurations";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(configurationPutModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ConfigurationsApiAxiosParamCreator = ConfigurationsApiAxiosParamCreator;
/**
 * ConfigurationsApi - functional programming interface
 * @export
 */
var ConfigurationsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ConfigurationsApiAxiosParamCreator)(configuration);
    return {
        /**
         * <br>Use case  <br>User sets configuration model (listed in the request example)  <br>User runs method execution  <br>System creates configuration  <br>System returns created configuration (listed in the response example)
         * @summary Create Configuration
         * @param {ConfigurationPostModel} [configurationPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConfiguration: function (configurationPostModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createConfiguration(configurationPostModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets configuration internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System search configuration using the identifier  <br>System returns configuration
         * @summary Get Configuration by Id or GlobalId
         * @param {string} configurationId Configuration internal (guid format) or global (integer format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurationById: function (configurationId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getConfigurationById(configurationId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets configuration updated properties(listed in the request example)  <br>User runs method execution  <br>System updated configuration using updated properties  <br>System returns no content response
         * @summary Update Configuration
         * @param {ConfigurationPutModel} [configurationPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConfiguration: function (configurationPutModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateConfiguration(configurationPutModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ConfigurationsApiFp = ConfigurationsApiFp;
/**
 * ConfigurationsApi - factory interface
 * @export
 */
var ConfigurationsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ConfigurationsApiFp)(configuration);
    return {
        /**
         * <br>Use case  <br>User sets configuration model (listed in the request example)  <br>User runs method execution  <br>System creates configuration  <br>System returns created configuration (listed in the response example)
         * @summary Create Configuration
         * @param {ConfigurationPostModel} [configurationPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConfiguration: function (configurationPostModel, options) {
            return localVarFp.createConfiguration(configurationPostModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets configuration internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System search configuration using the identifier  <br>System returns configuration
         * @summary Get Configuration by Id or GlobalId
         * @param {string} configurationId Configuration internal (guid format) or global (integer format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurationById: function (configurationId, options) {
            return localVarFp.getConfigurationById(configurationId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets configuration updated properties(listed in the request example)  <br>User runs method execution  <br>System updated configuration using updated properties  <br>System returns no content response
         * @summary Update Configuration
         * @param {ConfigurationPutModel} [configurationPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConfiguration: function (configurationPutModel, options) {
            return localVarFp.updateConfiguration(configurationPutModel, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ConfigurationsApiFactory = ConfigurationsApiFactory;
/**
 * ConfigurationsApi - object-oriented interface
 * @export
 * @class ConfigurationsApi
 * @extends {BaseAPI}
 */
var ConfigurationsApi = /** @class */ (function (_super) {
    __extends(ConfigurationsApi, _super);
    function ConfigurationsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * <br>Use case  <br>User sets configuration model (listed in the request example)  <br>User runs method execution  <br>System creates configuration  <br>System returns created configuration (listed in the response example)
     * @summary Create Configuration
     * @param {ConfigurationPostModel} [configurationPostModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    ConfigurationsApi.prototype.createConfiguration = function (configurationPostModel, options) {
        var _this = this;
        return (0, exports.ConfigurationsApiFp)(this.configuration).createConfiguration(configurationPostModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets configuration internal (guid format) or global (integer format) identifier  <br>User runs method execution  <br>System search configuration using the identifier  <br>System returns configuration
     * @summary Get Configuration by Id or GlobalId
     * @param {string} configurationId Configuration internal (guid format) or global (integer format) identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    ConfigurationsApi.prototype.getConfigurationById = function (configurationId, options) {
        var _this = this;
        return (0, exports.ConfigurationsApiFp)(this.configuration).getConfigurationById(configurationId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets configuration updated properties(listed in the request example)  <br>User runs method execution  <br>System updated configuration using updated properties  <br>System returns no content response
     * @summary Update Configuration
     * @param {ConfigurationPutModel} [configurationPutModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    ConfigurationsApi.prototype.updateConfiguration = function (configurationPutModel, options) {
        var _this = this;
        return (0, exports.ConfigurationsApiFp)(this.configuration).updateConfiguration(configurationPutModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ConfigurationsApi;
}(base_1.BaseAPI));
exports.ConfigurationsApi = ConfigurationsApi;
/**
 * ParametersApi - axios parameter creator
 * @export
 */
var ParametersApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * <br>Use case  <br>User sets parameter model (listed in the request example)  <br>User runs method execution  <br>System creates parameter  <br>System returns parameter model
         * @summary Create parameter
         * @param {ParameterPostModel} [parameterPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createParameter: function (parameterPostModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/parameters";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(parameterPostModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Deletes parameter and all it\'s values
         * @summary Delete parameter by name
         * @param {string} name Name of the parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByName: function (name, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'name' is not null or undefined
                            (0, common_1.assertParamExists)('deleteByName', 'name', name);
                            localVarPath = "/api/v2/parameters/name/{name}"
                                .replace("{".concat("name", "}"), encodeURIComponent(String(name)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets parameter internal (guid format) identifier  <br>System search and delete parameter  <br>System returns deleted parameter
         * @summary Delete parameter by id
         * @param {string} parameterId Parameter internal(guid format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteParameter: function (parameterId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'parameterId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteParameter', 'parameterId', parameterId);
                            localVarPath = "/api/v2/parameters/{parameterId}"
                                .replace("{".concat("parameterId", "}"), encodeURIComponent(String(parameterId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>[Optional] User sets isDeleted field value  <br>[Optional] If User sets isDeleted field value as true, System search all deleted parameters  <br>[Optional] If User sets isDeleted field value as false, System search all parameters which are not deleted  <br>If User did not set isDeleted field value, System search all parameters  <br>System returns array of all found parameters(listed in response model)
         * @summary Get all parameters (if isDeleted is true, return deleted parameters)
         * @param {boolean} [isDeleted] Boolean flag which defines if search must include deleted parameters
         * @param {number} [skip] Amount of items to be skipped (offset)
         * @param {number} [take] Amount of items to be taken (limit)
         * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {string} [searchField] Property name for searching
         * @param {string} [searchValue] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllParameters: function (isDeleted, skip, take, orderBy, searchField, searchValue, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/parameters";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (isDeleted !== undefined) {
                                localVarQueryParameter['isDeleted'] = isDeleted;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['Skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['Take'] = take;
                            }
                            if (orderBy !== undefined) {
                                localVarQueryParameter['OrderBy'] = orderBy;
                            }
                            if (searchField !== undefined) {
                                localVarQueryParameter['SearchField'] = searchField;
                            }
                            if (searchValue !== undefined) {
                                localVarQueryParameter['SearchValue'] = searchValue;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets parameter internal (guid format) identifier  <br>User runs method execution  <br>System search parameter using the identifier  <br>System returns parameter
         * @summary Get parameter by id
         * @param {string} parameterId Parameter internal (guid format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParameterById: function (parameterId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'parameterId' is not null or undefined
                            (0, common_1.assertParamExists)('getParameterById', 'parameterId', parameterId);
                            localVarPath = "/api/v2/parameters/{parameterId}"
                                .replace("{".concat("parameterId", "}"), encodeURIComponent(String(parameterId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets parameter name (string format)  <br>System search and delete parameter  <br>System returns no content response
         * @summary Delete parameters by name
         * @param {string} [name] Parameter name(string format)
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        obsoleteDeleteByName: function (name, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/parameters/deleteByName";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets parameter updated properties(listed in the request example)  <br>User runs method execution  <br>System updated parameter using updated properties  <br>System returns no content response
         * @summary Update parameter
         * @param {ParameterPutModel} [parameterPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParameter: function (parameterPutModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/parameters";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(parameterPutModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ParametersApiAxiosParamCreator = ParametersApiAxiosParamCreator;
/**
 * ParametersApi - functional programming interface
 * @export
 */
var ParametersApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ParametersApiAxiosParamCreator)(configuration);
    return {
        /**
         * <br>Use case  <br>User sets parameter model (listed in the request example)  <br>User runs method execution  <br>System creates parameter  <br>System returns parameter model
         * @summary Create parameter
         * @param {ParameterPostModel} [parameterPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createParameter: function (parameterPostModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createParameter(parameterPostModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes parameter and all it\'s values
         * @summary Delete parameter by name
         * @param {string} name Name of the parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByName: function (name, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteByName(name, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets parameter internal (guid format) identifier  <br>System search and delete parameter  <br>System returns deleted parameter
         * @summary Delete parameter by id
         * @param {string} parameterId Parameter internal(guid format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteParameter: function (parameterId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteParameter(parameterId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>[Optional] User sets isDeleted field value  <br>[Optional] If User sets isDeleted field value as true, System search all deleted parameters  <br>[Optional] If User sets isDeleted field value as false, System search all parameters which are not deleted  <br>If User did not set isDeleted field value, System search all parameters  <br>System returns array of all found parameters(listed in response model)
         * @summary Get all parameters (if isDeleted is true, return deleted parameters)
         * @param {boolean} [isDeleted] Boolean flag which defines if search must include deleted parameters
         * @param {number} [skip] Amount of items to be skipped (offset)
         * @param {number} [take] Amount of items to be taken (limit)
         * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {string} [searchField] Property name for searching
         * @param {string} [searchValue] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllParameters: function (isDeleted, skip, take, orderBy, searchField, searchValue, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllParameters(isDeleted, skip, take, orderBy, searchField, searchValue, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets parameter internal (guid format) identifier  <br>User runs method execution  <br>System search parameter using the identifier  <br>System returns parameter
         * @summary Get parameter by id
         * @param {string} parameterId Parameter internal (guid format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParameterById: function (parameterId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getParameterById(parameterId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets parameter name (string format)  <br>System search and delete parameter  <br>System returns no content response
         * @summary Delete parameters by name
         * @param {string} [name] Parameter name(string format)
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        obsoleteDeleteByName: function (name, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.obsoleteDeleteByName(name, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets parameter updated properties(listed in the request example)  <br>User runs method execution  <br>System updated parameter using updated properties  <br>System returns no content response
         * @summary Update parameter
         * @param {ParameterPutModel} [parameterPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParameter: function (parameterPutModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateParameter(parameterPutModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ParametersApiFp = ParametersApiFp;
/**
 * ParametersApi - factory interface
 * @export
 */
var ParametersApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ParametersApiFp)(configuration);
    return {
        /**
         * <br>Use case  <br>User sets parameter model (listed in the request example)  <br>User runs method execution  <br>System creates parameter  <br>System returns parameter model
         * @summary Create parameter
         * @param {ParameterPostModel} [parameterPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createParameter: function (parameterPostModel, options) {
            return localVarFp.createParameter(parameterPostModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes parameter and all it\'s values
         * @summary Delete parameter by name
         * @param {string} name Name of the parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByName: function (name, options) {
            return localVarFp.deleteByName(name, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets parameter internal (guid format) identifier  <br>System search and delete parameter  <br>System returns deleted parameter
         * @summary Delete parameter by id
         * @param {string} parameterId Parameter internal(guid format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteParameter: function (parameterId, options) {
            return localVarFp.deleteParameter(parameterId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>[Optional] User sets isDeleted field value  <br>[Optional] If User sets isDeleted field value as true, System search all deleted parameters  <br>[Optional] If User sets isDeleted field value as false, System search all parameters which are not deleted  <br>If User did not set isDeleted field value, System search all parameters  <br>System returns array of all found parameters(listed in response model)
         * @summary Get all parameters (if isDeleted is true, return deleted parameters)
         * @param {boolean} [isDeleted] Boolean flag which defines if search must include deleted parameters
         * @param {number} [skip] Amount of items to be skipped (offset)
         * @param {number} [take] Amount of items to be taken (limit)
         * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {string} [searchField] Property name for searching
         * @param {string} [searchValue] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllParameters: function (isDeleted, skip, take, orderBy, searchField, searchValue, options) {
            return localVarFp.getAllParameters(isDeleted, skip, take, orderBy, searchField, searchValue, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets parameter internal (guid format) identifier  <br>User runs method execution  <br>System search parameter using the identifier  <br>System returns parameter
         * @summary Get parameter by id
         * @param {string} parameterId Parameter internal (guid format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParameterById: function (parameterId, options) {
            return localVarFp.getParameterById(parameterId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets parameter name (string format)  <br>System search and delete parameter  <br>System returns no content response
         * @summary Delete parameters by name
         * @param {string} [name] Parameter name(string format)
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        obsoleteDeleteByName: function (name, options) {
            return localVarFp.obsoleteDeleteByName(name, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets parameter updated properties(listed in the request example)  <br>User runs method execution  <br>System updated parameter using updated properties  <br>System returns no content response
         * @summary Update parameter
         * @param {ParameterPutModel} [parameterPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParameter: function (parameterPutModel, options) {
            return localVarFp.updateParameter(parameterPutModel, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ParametersApiFactory = ParametersApiFactory;
/**
 * ParametersApi - object-oriented interface
 * @export
 * @class ParametersApi
 * @extends {BaseAPI}
 */
var ParametersApi = /** @class */ (function (_super) {
    __extends(ParametersApi, _super);
    function ParametersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * <br>Use case  <br>User sets parameter model (listed in the request example)  <br>User runs method execution  <br>System creates parameter  <br>System returns parameter model
     * @summary Create parameter
     * @param {ParameterPostModel} [parameterPostModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametersApi
     */
    ParametersApi.prototype.createParameter = function (parameterPostModel, options) {
        var _this = this;
        return (0, exports.ParametersApiFp)(this.configuration).createParameter(parameterPostModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes parameter and all it\'s values
     * @summary Delete parameter by name
     * @param {string} name Name of the parameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametersApi
     */
    ParametersApi.prototype.deleteByName = function (name, options) {
        var _this = this;
        return (0, exports.ParametersApiFp)(this.configuration).deleteByName(name, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets parameter internal (guid format) identifier  <br>System search and delete parameter  <br>System returns deleted parameter
     * @summary Delete parameter by id
     * @param {string} parameterId Parameter internal(guid format) identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametersApi
     */
    ParametersApi.prototype.deleteParameter = function (parameterId, options) {
        var _this = this;
        return (0, exports.ParametersApiFp)(this.configuration).deleteParameter(parameterId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>[Optional] User sets isDeleted field value  <br>[Optional] If User sets isDeleted field value as true, System search all deleted parameters  <br>[Optional] If User sets isDeleted field value as false, System search all parameters which are not deleted  <br>If User did not set isDeleted field value, System search all parameters  <br>System returns array of all found parameters(listed in response model)
     * @summary Get all parameters (if isDeleted is true, return deleted parameters)
     * @param {boolean} [isDeleted] Boolean flag which defines if search must include deleted parameters
     * @param {number} [skip] Amount of items to be skipped (offset)
     * @param {number} [take] Amount of items to be taken (limit)
     * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {string} [searchField] Property name for searching
     * @param {string} [searchValue] Value for searching
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametersApi
     */
    ParametersApi.prototype.getAllParameters = function (isDeleted, skip, take, orderBy, searchField, searchValue, options) {
        var _this = this;
        return (0, exports.ParametersApiFp)(this.configuration).getAllParameters(isDeleted, skip, take, orderBy, searchField, searchValue, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets parameter internal (guid format) identifier  <br>User runs method execution  <br>System search parameter using the identifier  <br>System returns parameter
     * @summary Get parameter by id
     * @param {string} parameterId Parameter internal (guid format) identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametersApi
     */
    ParametersApi.prototype.getParameterById = function (parameterId, options) {
        var _this = this;
        return (0, exports.ParametersApiFp)(this.configuration).getParameterById(parameterId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets parameter name (string format)  <br>System search and delete parameter  <br>System returns no content response
     * @summary Delete parameters by name
     * @param {string} [name] Parameter name(string format)
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ParametersApi
     */
    ParametersApi.prototype.obsoleteDeleteByName = function (name, options) {
        var _this = this;
        return (0, exports.ParametersApiFp)(this.configuration).obsoleteDeleteByName(name, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets parameter updated properties(listed in the request example)  <br>User runs method execution  <br>System updated parameter using updated properties  <br>System returns no content response
     * @summary Update parameter
     * @param {ParameterPutModel} [parameterPutModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParametersApi
     */
    ParametersApi.prototype.updateParameter = function (parameterPutModel, options) {
        var _this = this;
        return (0, exports.ParametersApiFp)(this.configuration).updateParameter(parameterPutModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ParametersApi;
}(base_1.BaseAPI));
exports.ParametersApi = ParametersApi;
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
var ProjectsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * <br>Use case  <br>User sets project internal or global identifier  <br>User runs method execution  <br>System search project  <br>                      System returns project data as json file, containing project data, related attributes, sections and                      workitems
         * @summary Export Project with tests, sections and configurations in json file
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {boolean} [includeAttachments]
         * @param {ProjectExportQueryModel} [projectExportQueryModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _export: function (projectId, includeAttachments, projectExportQueryModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('_export', 'projectId', projectId);
                            localVarPath = "/api/v2/projects/{projectId}/export"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (includeAttachments !== undefined) {
                                localVarQueryParameter['includeAttachments'] = includeAttachments;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(projectExportQueryModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User attaches project as json file taken from export or export-by-testPlans method  <br>User runs method execution  <br>System creates project  <br>System returns no content response
         * @summary Import Project from json file  Project can be imported only once (this method or ImportToExistingProject)  Next import will sync content in previously imported project.
         * @param {string} [apiVersion]
         * @param {boolean} [includeAttachments]
         * @param {File} [file] Select file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _import: function (apiVersion, includeAttachments, file, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/projects/import";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (apiVersion !== undefined) {
                                localVarQueryParameter['apiVersion'] = apiVersion;
                            }
                            if (includeAttachments !== undefined) {
                                localVarQueryParameter['includeAttachments'] = includeAttachments;
                            }
                            if (file !== undefined) {
                                localVarFormParams.append('file', file);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier and attributes identifiers  <br>User runs method execution  <br>System updates project and add attributes to project for test plans  <br>System returns no content response
         * @summary Add attributes to project for test plans
         * @param {string} projectId
         * @param {Array<string>} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomAttributeTestPlanProjectRelations: function (projectId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('createCustomAttributeTestPlanProjectRelations', 'projectId', projectId);
                            localVarPath = "/api/v2/projects/{projectId}/testPlans/attributes"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project parameters (listed in request example) and runs method execution  <br>System creates project  <br>System returns project model (example listed in response parameters)
         * @summary Create Project
         * @param {ProjectPostModel} [projectPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject: function (projectPostModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/projects";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(projectPostModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets attribute parameters (listed in request example) and runs method execution  <br>System search project  <br>System creates attribute and relates it to the project  <br>System returns project attribute properties (example listed in response parameters)
         * @summary Create Projects Attribute
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {CustomAttributePostModel} [customAttributePostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectsAttribute: function (projectId, customAttributePostModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('createProjectsAttribute', 'projectId', projectId);
                            localVarPath = "/api/v2/projects/{projectId}/attributes"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(customAttributePostModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier and attribute identifier  <br>User runs method execution  <br>System updates project and delete attribute from project for test plans  <br>System returns no content response
         * @summary Delete attribute from project for test plans
         * @param {string} projectId
         * @param {string} attributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomAttributeTestPlanProjectRelations: function (projectId, attributeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteCustomAttributeTestPlanProjectRelations', 'projectId', projectId);
                            // verify required parameter 'attributeId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteCustomAttributeTestPlanProjectRelations', 'attributeId', attributeId);
                            localVarPath = "/api/v2/projects/{projectId}/testPlans/attribute/{attributeId}"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("attributeId", "}"), encodeURIComponent(String(attributeId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search and delete project  <br>System returns no content response
         * @summary Delete Project by Id or GlobalId
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject: function (projectId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteProject', 'projectId', projectId);
                            localVarPath = "/api/v2/projects/{projectId}"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier   <br>User runs method execution  <br>System delete all autotests from project  <br>System returns no content response
         * @summary Delete all AutoTests from Project
         * @param {string} projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectAutoTests: function (projectId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteProjectAutoTests', 'projectId', projectId);
                            localVarPath = "/api/v2/projects/{projectId}/autoTests"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project identifier and runs method execution  <br>User sets attribute identifier  <br>User runs method execution  <br>System search project  <br>System search and delete attribute  <br>System returns no content response
         * @summary Delete Projects Attribute by Id
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {string} attributeId Project attribute internal(guid format)  identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectsAttribute: function (projectId, attributeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteProjectsAttribute', 'projectId', projectId);
                            // verify required parameter 'attributeId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteProjectsAttribute', 'attributeId', attributeId);
                            localVarPath = "/api/v2/projects/{projectId}/attributes/{attributeId}"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("attributeId", "}"), encodeURIComponent(String(attributeId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier  <br>User runs method execution  <br>System search project  <br>                      System returns project data as json file, containing project data, related attributes, sections, workitems,                      test plans, test suites, test points and configurations
         * @summary Export Project with tests, sections, configurations, testPlans, testSuites and testPoints as json file
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {boolean} [includeAttachments]
         * @param {ProjectExportWithTestPlansPostModel} [projectExportWithTestPlansPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportWithTestPlansAndConfigurations: function (projectId, includeAttachments, projectExportWithTestPlansPostModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('exportWithTestPlansAndConfigurations', 'projectId', projectId);
                            localVarPath = "/api/v2/projects/{projectId}/export-by-testPlans"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (includeAttachments !== undefined) {
                                localVarQueryParameter['includeAttachments'] = includeAttachments;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(projectExportWithTestPlansPostModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>[Optional] User sets isDeleted field value  <br>[Optional] If User sets isDeleted field value as true, System search all deleted projects  <br>[Optional] If User sets isDeleted field value as false, System search all projects which are not deleted  <br>If User did not set isDeleted field value, System search all projects  <br>System returns array of all found projects(listed in response model)
         * @summary Get all Projects (if isDeleted is true, return deleted Projects)
         * @param {boolean} [isDeleted] Boolean flag which defines if search must include deleted projects
         * @param {string} [projectName]
         * @param {number} [skip] Amount of items to be skipped (offset)
         * @param {number} [take] Amount of items to be taken (limit)
         * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {string} [searchField] Property name for searching
         * @param {string} [searchValue] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjects: function (isDeleted, projectName, skip, take, orderBy, searchField, searchValue, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/projects";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (isDeleted !== undefined) {
                                localVarQueryParameter['isDeleted'] = isDeleted;
                            }
                            if (projectName !== undefined) {
                                localVarQueryParameter['projectName'] = projectName;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['Skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['Take'] = take;
                            }
                            if (orderBy !== undefined) {
                                localVarQueryParameter['OrderBy'] = orderBy;
                            }
                            if (searchField !== undefined) {
                                localVarQueryParameter['SearchField'] = searchField;
                            }
                            if (searchValue !== undefined) {
                                localVarQueryParameter['SearchValue'] = searchValue;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier  <br>User sets project attribute identifier  <br>User runs method execution  <br>System search project  <br>System search project attribute   <br>System returns project attribute (listed in response model)
         * @summary Get Projects Attribute by Id
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {string} attributeId Project attribute internal(guid format)  identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributeByProjectId: function (projectId, attributeId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('getAttributeByProjectId', 'projectId', projectId);
                            // verify required parameter 'attributeId' is not null or undefined
                            (0, common_1.assertParamExists)('getAttributeByProjectId', 'attributeId', attributeId);
                            localVarPath = "/api/v2/projects/{projectId}/attributes/{attributeId}"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("attributeId", "}"), encodeURIComponent(String(attributeId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier  <br>[Optional] User sets isDeleted field value  <br>User runs method execution  <br>System search project  <br>                      [Optional] If User sets isDeleted field value as true, System search all deleted attributes related to                      project                    <br>                      [Optional] If User sets isDeleted field value as false, System search all attributes related to project which                      are not deleted                    <br>[Optional] If User did not set isDeleted field value, System search all attributes related to project  <br>System returns array of found attributes (listed in response model)
         * @summary Get Projects Attributes by Id or GlobalId
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {boolean} [isDeleted] Boolean flag which defines if search must include deleted attributes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributesByProjectId: function (projectId, isDeleted, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('getAttributesByProjectId', 'projectId', projectId);
                            localVarPath = "/api/v2/projects/{projectId}/attributes"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (isDeleted !== undefined) {
                                localVarQueryParameter['isDeleted'] = isDeleted;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search project  <br>System search all autotest related to the project  <br>System returns array of autotest with namespaces and classnames (listed in response)
         * @summary Get AutoTests Namespaces for Project by Id or GlobalId
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoTestsNamespaces: function (projectId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('getAutoTestsNamespaces', 'projectId', projectId);
                            localVarPath = "/api/v2/projects/{projectId}/autoTestsNamespaces"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier  <br>User runs method execution  <br>System search project  <br>System search all configurations related to project  <br>System returns array of found configurations (listed in response model)
         * @summary Get Configurations for Project by Id or GlobalId
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurationsByProjectId: function (projectId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('getConfigurationsByProjectId', 'projectId', projectId);
                            localVarPath = "/api/v2/projects/{projectId}/configurations"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User runs method execution  <br>System returns project for test plans attributes by project identifier
         * @summary Get project for test plans attributes
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomAttributeTestPlanProjectRelations: function (projectId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('getCustomAttributeTestPlanProjectRelations', 'projectId', projectId);
                            localVarPath = "/api/v2/projects/{projectId}/testPlans/attributes"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search project  <br>System returns project (example listed in response parameters)
         * @summary Get Project by Id or GlobalId
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectById: function (projectId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('getProjectById', 'projectId', projectId);
                            localVarPath = "/api/v2/projects/{projectId}"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search project  <br>System search all sections related to the project  <br>System returns array of sections (listed in response)
         * @summary Get Sections for Project by Id or GlobalId
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {number} [skip] Amount of items to be skipped (offset)
         * @param {number} [take] Amount of items to be taken (limit)
         * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {string} [searchField] Property name for searching
         * @param {string} [searchValue] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSectionsByProjectId: function (projectId, skip, take, orderBy, searchField, searchValue, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('getSectionsByProjectId', 'projectId', projectId);
                            localVarPath = "/api/v2/projects/{projectId}/sections"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (skip !== undefined) {
                                localVarQueryParameter['Skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['Take'] = take;
                            }
                            if (orderBy !== undefined) {
                                localVarQueryParameter['OrderBy'] = orderBy;
                            }
                            if (searchField !== undefined) {
                                localVarQueryParameter['SearchField'] = searchField;
                            }
                            if (searchValue !== undefined) {
                                localVarQueryParameter['SearchValue'] = searchValue;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier  <br>[Optional] User sets isDeleted field value  <br>User runs method execution  <br>System search project  <br>                      [Optional] If User sets isDeleted field value as true, System search all deleted test plans related to                      project                    <br>                      [Optional] If User sets isDeleted field value as false, System search all test plans related to project which                      are not deleted                    <br>[Optional] If User did not set isDeleted field value, System search all v related to project  <br>System returns array of found test plans (listed in response model)
         * @summary Get TestPlans for Project by Id or GlobalId (if isDeleted is true, return deleted TestPlans)
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {boolean} [isDeleted] Boolean flag which defines if search must include deleted test plans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestPlansByProjectId: function (projectId, isDeleted, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('getTestPlansByProjectId', 'projectId', projectId);
                            localVarPath = "/api/v2/projects/{projectId}/testPlans"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (isDeleted !== undefined) {
                                localVarQueryParameter['isDeleted'] = isDeleted;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier  <br>User runs method execution  <br>System search project  <br>System search all test runs related to project  <br>System returns array of found test runs (listed in response model)
         * @summary Get TestRuns for Project by Id or GlobalId
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {boolean} [notStarted]
         * @param {boolean} [inProgress]
         * @param {boolean} [stopped]
         * @param {boolean} [completed]
         * @param {string} [createdDateFrom]
         * @param {string} [createdDateTo]
         * @param {string} [testPlanId]
         * @param {number} [skip] Amount of items to be skipped (offset)
         * @param {number} [take] Amount of items to be taken (limit)
         * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {string} [searchField] Property name for searching
         * @param {string} [searchValue] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestRunsByProjectId: function (projectId, notStarted, inProgress, stopped, completed, createdDateFrom, createdDateTo, testPlanId, skip, take, orderBy, searchField, searchValue, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('getTestRunsByProjectId', 'projectId', projectId);
                            localVarPath = "/api/v2/projects/{projectId}/testRuns"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (notStarted !== undefined) {
                                localVarQueryParameter['NotStarted'] = notStarted;
                            }
                            if (inProgress !== undefined) {
                                localVarQueryParameter['InProgress'] = inProgress;
                            }
                            if (stopped !== undefined) {
                                localVarQueryParameter['Stopped'] = stopped;
                            }
                            if (completed !== undefined) {
                                localVarQueryParameter['Completed'] = completed;
                            }
                            if (createdDateFrom !== undefined) {
                                localVarQueryParameter['CreatedDateFrom'] = (createdDateFrom instanceof Date) ?
                                    createdDateFrom.toISOString() :
                                    createdDateFrom;
                            }
                            if (createdDateTo !== undefined) {
                                localVarQueryParameter['CreatedDateTo'] = (createdDateTo instanceof Date) ?
                                    createdDateTo.toISOString() :
                                    createdDateTo;
                            }
                            if (testPlanId !== undefined) {
                                localVarQueryParameter['TestPlanId'] = testPlanId;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['Skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['Take'] = take;
                            }
                            if (orderBy !== undefined) {
                                localVarQueryParameter['OrderBy'] = orderBy;
                            }
                            if (searchField !== undefined) {
                                localVarQueryParameter['SearchField'] = searchField;
                            }
                            if (searchValue !== undefined) {
                                localVarQueryParameter['SearchValue'] = searchValue;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier  <br>[Optional] User sets isDeleted field value  <br>User runs method execution  <br>System search project  <br>[Optional] If User sets isDeleted field value as true, System search all deleted workitems related to project  <br>                      [Optional] If User sets isDeleted field value as false, System search all workitems related to project which                      are not deleted                    <br>If User did not set isDeleted field value, System search all  workitems related to project  <br>System returns array of found workitems (listed in response model)
         * @summary Get WorkItems for Project by Id or GlobalId (if isDeleted is true, return deleted WorkItems)
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {boolean} [isDeleted] Boolean flag which defines if search must include deleted workitems
         * @param {Array<string>} [tagNames] Array of workitem tag names
         * @param {boolean} [includeIterations]
         * @param {number} [skip] Amount of items to be skipped (offset)
         * @param {number} [take] Amount of items to be taken (limit)
         * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {string} [searchField] Property name for searching
         * @param {string} [searchValue] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemsByProjectId: function (projectId, isDeleted, tagNames, includeIterations, skip, take, orderBy, searchField, searchValue, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('getWorkItemsByProjectId', 'projectId', projectId);
                            localVarPath = "/api/v2/projects/{projectId}/workItems"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (isDeleted !== undefined) {
                                localVarQueryParameter['isDeleted'] = isDeleted;
                            }
                            if (tagNames) {
                                localVarQueryParameter['tagNames'] = tagNames;
                            }
                            if (includeIterations !== undefined) {
                                localVarQueryParameter['includeIterations'] = includeIterations;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['Skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['Take'] = take;
                            }
                            if (orderBy !== undefined) {
                                localVarQueryParameter['OrderBy'] = orderBy;
                            }
                            if (searchField !== undefined) {
                                localVarQueryParameter['SearchField'] = searchField;
                            }
                            if (searchValue !== undefined) {
                                localVarQueryParameter['SearchValue'] = searchValue;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User attaches project as json file taken from export or export-by-testPlans method  <br>User runs method execution  <br>System updates project  <br>System returns no content response
         * @summary Import to existing Project from json file.  Sections can be imported in only one target project!
         * @param {string} projectId
         * @param {string} [apiVersion]
         * @param {boolean} [includeAttachments]
         * @param {File} [file] Select file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importToExistingProject: function (projectId, apiVersion, includeAttachments, file, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('importToExistingProject', 'projectId', projectId);
                            localVarPath = "/api/v2/projects/{projectId}/import"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (apiVersion !== undefined) {
                                localVarQueryParameter['apiVersion'] = apiVersion;
                            }
                            if (includeAttachments !== undefined) {
                                localVarQueryParameter['includeAttachments'] = includeAttachments;
                            }
                            if (file !== undefined) {
                                localVarFormParams.append('file', file);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search and restores deleted project  <br>System returns no content response
         * @summary Restore Project by Id or GlobalId
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreProject: function (projectId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('restoreProject', 'projectId', projectId);
                            localVarPath = "/api/v2/projects/{projectId}/restore"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier and attribute model  <br>User runs method execution  <br>System updates project and project attribute for test plan  <br>System returns no content response
         * @summary Update project attribute for test plan
         * @param {string} projectId
         * @param {CustomAttributeTestPlanProjectRelationPutModel} [customAttributeTestPlanProjectRelationPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomAttributeTestPlanProjectRelations: function (projectId, customAttributeTestPlanProjectRelationPutModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('updateCustomAttributeTestPlanProjectRelations', 'projectId', projectId);
                            localVarPath = "/api/v2/projects/{projectId}/testPlans/attribute"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(customAttributeTestPlanProjectRelationPutModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project parameters (listed in request example) and runs method execution  <br>System updates project  <br>System returns updated project model (example listed in response parameters)
         * @summary Update Project
         * @param {ProjectPutModel} [projectPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject: function (projectPutModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/projects";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(projectPutModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project parameters (listed in request example) and runs method execution  <br>System updates project  <br>System updates attribute related to the project  <br>System returns no content response
         * @summary Update Projects Attribute
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {CustomAttributeModel} [customAttributeModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectsAttribute: function (projectId, customAttributeModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('updateProjectsAttribute', 'projectId', projectId);
                            localVarPath = "/api/v2/projects/{projectId}/attributes"
                                .replace("{".concat("projectId", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(customAttributeModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ProjectsApiAxiosParamCreator = ProjectsApiAxiosParamCreator;
/**
 * ProjectsApi - functional programming interface
 * @export
 */
var ProjectsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ProjectsApiAxiosParamCreator)(configuration);
    return {
        /**
         * <br>Use case  <br>User sets project internal or global identifier  <br>User runs method execution  <br>System search project  <br>                      System returns project data as json file, containing project data, related attributes, sections and                      workitems
         * @summary Export Project with tests, sections and configurations in json file
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {boolean} [includeAttachments]
         * @param {ProjectExportQueryModel} [projectExportQueryModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _export: function (projectId, includeAttachments, projectExportQueryModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator._export(projectId, includeAttachments, projectExportQueryModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User attaches project as json file taken from export or export-by-testPlans method  <br>User runs method execution  <br>System creates project  <br>System returns no content response
         * @summary Import Project from json file  Project can be imported only once (this method or ImportToExistingProject)  Next import will sync content in previously imported project.
         * @param {string} [apiVersion]
         * @param {boolean} [includeAttachments]
         * @param {File} [file] Select file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _import: function (apiVersion, includeAttachments, file, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator._import(apiVersion, includeAttachments, file, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier and attributes identifiers  <br>User runs method execution  <br>System updates project and add attributes to project for test plans  <br>System returns no content response
         * @summary Add attributes to project for test plans
         * @param {string} projectId
         * @param {Array<string>} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomAttributeTestPlanProjectRelations: function (projectId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createCustomAttributeTestPlanProjectRelations(projectId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project parameters (listed in request example) and runs method execution  <br>System creates project  <br>System returns project model (example listed in response parameters)
         * @summary Create Project
         * @param {ProjectPostModel} [projectPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject: function (projectPostModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createProject(projectPostModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets attribute parameters (listed in request example) and runs method execution  <br>System search project  <br>System creates attribute and relates it to the project  <br>System returns project attribute properties (example listed in response parameters)
         * @summary Create Projects Attribute
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {CustomAttributePostModel} [customAttributePostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectsAttribute: function (projectId, customAttributePostModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createProjectsAttribute(projectId, customAttributePostModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier and attribute identifier  <br>User runs method execution  <br>System updates project and delete attribute from project for test plans  <br>System returns no content response
         * @summary Delete attribute from project for test plans
         * @param {string} projectId
         * @param {string} attributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomAttributeTestPlanProjectRelations: function (projectId, attributeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteCustomAttributeTestPlanProjectRelations(projectId, attributeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search and delete project  <br>System returns no content response
         * @summary Delete Project by Id or GlobalId
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject: function (projectId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteProject(projectId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier   <br>User runs method execution  <br>System delete all autotests from project  <br>System returns no content response
         * @summary Delete all AutoTests from Project
         * @param {string} projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectAutoTests: function (projectId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteProjectAutoTests(projectId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project identifier and runs method execution  <br>User sets attribute identifier  <br>User runs method execution  <br>System search project  <br>System search and delete attribute  <br>System returns no content response
         * @summary Delete Projects Attribute by Id
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {string} attributeId Project attribute internal(guid format)  identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectsAttribute: function (projectId, attributeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteProjectsAttribute(projectId, attributeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier  <br>User runs method execution  <br>System search project  <br>                      System returns project data as json file, containing project data, related attributes, sections, workitems,                      test plans, test suites, test points and configurations
         * @summary Export Project with tests, sections, configurations, testPlans, testSuites and testPoints as json file
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {boolean} [includeAttachments]
         * @param {ProjectExportWithTestPlansPostModel} [projectExportWithTestPlansPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportWithTestPlansAndConfigurations: function (projectId, includeAttachments, projectExportWithTestPlansPostModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.exportWithTestPlansAndConfigurations(projectId, includeAttachments, projectExportWithTestPlansPostModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>[Optional] User sets isDeleted field value  <br>[Optional] If User sets isDeleted field value as true, System search all deleted projects  <br>[Optional] If User sets isDeleted field value as false, System search all projects which are not deleted  <br>If User did not set isDeleted field value, System search all projects  <br>System returns array of all found projects(listed in response model)
         * @summary Get all Projects (if isDeleted is true, return deleted Projects)
         * @param {boolean} [isDeleted] Boolean flag which defines if search must include deleted projects
         * @param {string} [projectName]
         * @param {number} [skip] Amount of items to be skipped (offset)
         * @param {number} [take] Amount of items to be taken (limit)
         * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {string} [searchField] Property name for searching
         * @param {string} [searchValue] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjects: function (isDeleted, projectName, skip, take, orderBy, searchField, searchValue, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllProjects(isDeleted, projectName, skip, take, orderBy, searchField, searchValue, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier  <br>User sets project attribute identifier  <br>User runs method execution  <br>System search project  <br>System search project attribute   <br>System returns project attribute (listed in response model)
         * @summary Get Projects Attribute by Id
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {string} attributeId Project attribute internal(guid format)  identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributeByProjectId: function (projectId, attributeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAttributeByProjectId(projectId, attributeId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier  <br>[Optional] User sets isDeleted field value  <br>User runs method execution  <br>System search project  <br>                      [Optional] If User sets isDeleted field value as true, System search all deleted attributes related to                      project                    <br>                      [Optional] If User sets isDeleted field value as false, System search all attributes related to project which                      are not deleted                    <br>[Optional] If User did not set isDeleted field value, System search all attributes related to project  <br>System returns array of found attributes (listed in response model)
         * @summary Get Projects Attributes by Id or GlobalId
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {boolean} [isDeleted] Boolean flag which defines if search must include deleted attributes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributesByProjectId: function (projectId, isDeleted, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAttributesByProjectId(projectId, isDeleted, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search project  <br>System search all autotest related to the project  <br>System returns array of autotest with namespaces and classnames (listed in response)
         * @summary Get AutoTests Namespaces for Project by Id or GlobalId
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoTestsNamespaces: function (projectId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAutoTestsNamespaces(projectId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier  <br>User runs method execution  <br>System search project  <br>System search all configurations related to project  <br>System returns array of found configurations (listed in response model)
         * @summary Get Configurations for Project by Id or GlobalId
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurationsByProjectId: function (projectId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getConfigurationsByProjectId(projectId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User runs method execution  <br>System returns project for test plans attributes by project identifier
         * @summary Get project for test plans attributes
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomAttributeTestPlanProjectRelations: function (projectId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCustomAttributeTestPlanProjectRelations(projectId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search project  <br>System returns project (example listed in response parameters)
         * @summary Get Project by Id or GlobalId
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectById: function (projectId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getProjectById(projectId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search project  <br>System search all sections related to the project  <br>System returns array of sections (listed in response)
         * @summary Get Sections for Project by Id or GlobalId
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {number} [skip] Amount of items to be skipped (offset)
         * @param {number} [take] Amount of items to be taken (limit)
         * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {string} [searchField] Property name for searching
         * @param {string} [searchValue] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSectionsByProjectId: function (projectId, skip, take, orderBy, searchField, searchValue, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSectionsByProjectId(projectId, skip, take, orderBy, searchField, searchValue, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier  <br>[Optional] User sets isDeleted field value  <br>User runs method execution  <br>System search project  <br>                      [Optional] If User sets isDeleted field value as true, System search all deleted test plans related to                      project                    <br>                      [Optional] If User sets isDeleted field value as false, System search all test plans related to project which                      are not deleted                    <br>[Optional] If User did not set isDeleted field value, System search all v related to project  <br>System returns array of found test plans (listed in response model)
         * @summary Get TestPlans for Project by Id or GlobalId (if isDeleted is true, return deleted TestPlans)
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {boolean} [isDeleted] Boolean flag which defines if search must include deleted test plans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestPlansByProjectId: function (projectId, isDeleted, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTestPlansByProjectId(projectId, isDeleted, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier  <br>User runs method execution  <br>System search project  <br>System search all test runs related to project  <br>System returns array of found test runs (listed in response model)
         * @summary Get TestRuns for Project by Id or GlobalId
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {boolean} [notStarted]
         * @param {boolean} [inProgress]
         * @param {boolean} [stopped]
         * @param {boolean} [completed]
         * @param {string} [createdDateFrom]
         * @param {string} [createdDateTo]
         * @param {string} [testPlanId]
         * @param {number} [skip] Amount of items to be skipped (offset)
         * @param {number} [take] Amount of items to be taken (limit)
         * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {string} [searchField] Property name for searching
         * @param {string} [searchValue] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestRunsByProjectId: function (projectId, notStarted, inProgress, stopped, completed, createdDateFrom, createdDateTo, testPlanId, skip, take, orderBy, searchField, searchValue, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTestRunsByProjectId(projectId, notStarted, inProgress, stopped, completed, createdDateFrom, createdDateTo, testPlanId, skip, take, orderBy, searchField, searchValue, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier  <br>[Optional] User sets isDeleted field value  <br>User runs method execution  <br>System search project  <br>[Optional] If User sets isDeleted field value as true, System search all deleted workitems related to project  <br>                      [Optional] If User sets isDeleted field value as false, System search all workitems related to project which                      are not deleted                    <br>If User did not set isDeleted field value, System search all  workitems related to project  <br>System returns array of found workitems (listed in response model)
         * @summary Get WorkItems for Project by Id or GlobalId (if isDeleted is true, return deleted WorkItems)
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {boolean} [isDeleted] Boolean flag which defines if search must include deleted workitems
         * @param {Array<string>} [tagNames] Array of workitem tag names
         * @param {boolean} [includeIterations]
         * @param {number} [skip] Amount of items to be skipped (offset)
         * @param {number} [take] Amount of items to be taken (limit)
         * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {string} [searchField] Property name for searching
         * @param {string} [searchValue] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemsByProjectId: function (projectId, isDeleted, tagNames, includeIterations, skip, take, orderBy, searchField, searchValue, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getWorkItemsByProjectId(projectId, isDeleted, tagNames, includeIterations, skip, take, orderBy, searchField, searchValue, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User attaches project as json file taken from export or export-by-testPlans method  <br>User runs method execution  <br>System updates project  <br>System returns no content response
         * @summary Import to existing Project from json file.  Sections can be imported in only one target project!
         * @param {string} projectId
         * @param {string} [apiVersion]
         * @param {boolean} [includeAttachments]
         * @param {File} [file] Select file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importToExistingProject: function (projectId, apiVersion, includeAttachments, file, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.importToExistingProject(projectId, apiVersion, includeAttachments, file, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search and restores deleted project  <br>System returns no content response
         * @summary Restore Project by Id or GlobalId
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreProject: function (projectId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.restoreProject(projectId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier and attribute model  <br>User runs method execution  <br>System updates project and project attribute for test plan  <br>System returns no content response
         * @summary Update project attribute for test plan
         * @param {string} projectId
         * @param {CustomAttributeTestPlanProjectRelationPutModel} [customAttributeTestPlanProjectRelationPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomAttributeTestPlanProjectRelations: function (projectId, customAttributeTestPlanProjectRelationPutModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateCustomAttributeTestPlanProjectRelations(projectId, customAttributeTestPlanProjectRelationPutModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project parameters (listed in request example) and runs method execution  <br>System updates project  <br>System returns updated project model (example listed in response parameters)
         * @summary Update Project
         * @param {ProjectPutModel} [projectPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject: function (projectPutModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateProject(projectPutModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets project parameters (listed in request example) and runs method execution  <br>System updates project  <br>System updates attribute related to the project  <br>System returns no content response
         * @summary Update Projects Attribute
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {CustomAttributeModel} [customAttributeModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectsAttribute: function (projectId, customAttributeModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateProjectsAttribute(projectId, customAttributeModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ProjectsApiFp = ProjectsApiFp;
/**
 * ProjectsApi - factory interface
 * @export
 */
var ProjectsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ProjectsApiFp)(configuration);
    return {
        /**
         * <br>Use case  <br>User sets project internal or global identifier  <br>User runs method execution  <br>System search project  <br>                      System returns project data as json file, containing project data, related attributes, sections and                      workitems
         * @summary Export Project with tests, sections and configurations in json file
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {boolean} [includeAttachments]
         * @param {ProjectExportQueryModel} [projectExportQueryModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _export: function (projectId, includeAttachments, projectExportQueryModel, options) {
            return localVarFp._export(projectId, includeAttachments, projectExportQueryModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User attaches project as json file taken from export or export-by-testPlans method  <br>User runs method execution  <br>System creates project  <br>System returns no content response
         * @summary Import Project from json file  Project can be imported only once (this method or ImportToExistingProject)  Next import will sync content in previously imported project.
         * @param {string} [apiVersion]
         * @param {boolean} [includeAttachments]
         * @param {File} [file] Select file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _import: function (apiVersion, includeAttachments, file, options) {
            return localVarFp._import(apiVersion, includeAttachments, file, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier and attributes identifiers  <br>User runs method execution  <br>System updates project and add attributes to project for test plans  <br>System returns no content response
         * @summary Add attributes to project for test plans
         * @param {string} projectId
         * @param {Array<string>} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomAttributeTestPlanProjectRelations: function (projectId, requestBody, options) {
            return localVarFp.createCustomAttributeTestPlanProjectRelations(projectId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets project parameters (listed in request example) and runs method execution  <br>System creates project  <br>System returns project model (example listed in response parameters)
         * @summary Create Project
         * @param {ProjectPostModel} [projectPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject: function (projectPostModel, options) {
            return localVarFp.createProject(projectPostModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets attribute parameters (listed in request example) and runs method execution  <br>System search project  <br>System creates attribute and relates it to the project  <br>System returns project attribute properties (example listed in response parameters)
         * @summary Create Projects Attribute
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {CustomAttributePostModel} [customAttributePostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectsAttribute: function (projectId, customAttributePostModel, options) {
            return localVarFp.createProjectsAttribute(projectId, customAttributePostModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier and attribute identifier  <br>User runs method execution  <br>System updates project and delete attribute from project for test plans  <br>System returns no content response
         * @summary Delete attribute from project for test plans
         * @param {string} projectId
         * @param {string} attributeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomAttributeTestPlanProjectRelations: function (projectId, attributeId, options) {
            return localVarFp.deleteCustomAttributeTestPlanProjectRelations(projectId, attributeId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search and delete project  <br>System returns no content response
         * @summary Delete Project by Id or GlobalId
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject: function (projectId, options) {
            return localVarFp.deleteProject(projectId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier   <br>User runs method execution  <br>System delete all autotests from project  <br>System returns no content response
         * @summary Delete all AutoTests from Project
         * @param {string} projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectAutoTests: function (projectId, options) {
            return localVarFp.deleteProjectAutoTests(projectId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets project identifier and runs method execution  <br>User sets attribute identifier  <br>User runs method execution  <br>System search project  <br>System search and delete attribute  <br>System returns no content response
         * @summary Delete Projects Attribute by Id
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {string} attributeId Project attribute internal(guid format)  identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectsAttribute: function (projectId, attributeId, options) {
            return localVarFp.deleteProjectsAttribute(projectId, attributeId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier  <br>User runs method execution  <br>System search project  <br>                      System returns project data as json file, containing project data, related attributes, sections, workitems,                      test plans, test suites, test points and configurations
         * @summary Export Project with tests, sections, configurations, testPlans, testSuites and testPoints as json file
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {boolean} [includeAttachments]
         * @param {ProjectExportWithTestPlansPostModel} [projectExportWithTestPlansPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportWithTestPlansAndConfigurations: function (projectId, includeAttachments, projectExportWithTestPlansPostModel, options) {
            return localVarFp.exportWithTestPlansAndConfigurations(projectId, includeAttachments, projectExportWithTestPlansPostModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>[Optional] User sets isDeleted field value  <br>[Optional] If User sets isDeleted field value as true, System search all deleted projects  <br>[Optional] If User sets isDeleted field value as false, System search all projects which are not deleted  <br>If User did not set isDeleted field value, System search all projects  <br>System returns array of all found projects(listed in response model)
         * @summary Get all Projects (if isDeleted is true, return deleted Projects)
         * @param {boolean} [isDeleted] Boolean flag which defines if search must include deleted projects
         * @param {string} [projectName]
         * @param {number} [skip] Amount of items to be skipped (offset)
         * @param {number} [take] Amount of items to be taken (limit)
         * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {string} [searchField] Property name for searching
         * @param {string} [searchValue] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjects: function (isDeleted, projectName, skip, take, orderBy, searchField, searchValue, options) {
            return localVarFp.getAllProjects(isDeleted, projectName, skip, take, orderBy, searchField, searchValue, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier  <br>User sets project attribute identifier  <br>User runs method execution  <br>System search project  <br>System search project attribute   <br>System returns project attribute (listed in response model)
         * @summary Get Projects Attribute by Id
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {string} attributeId Project attribute internal(guid format)  identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributeByProjectId: function (projectId, attributeId, options) {
            return localVarFp.getAttributeByProjectId(projectId, attributeId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier  <br>[Optional] User sets isDeleted field value  <br>User runs method execution  <br>System search project  <br>                      [Optional] If User sets isDeleted field value as true, System search all deleted attributes related to                      project                    <br>                      [Optional] If User sets isDeleted field value as false, System search all attributes related to project which                      are not deleted                    <br>[Optional] If User did not set isDeleted field value, System search all attributes related to project  <br>System returns array of found attributes (listed in response model)
         * @summary Get Projects Attributes by Id or GlobalId
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {boolean} [isDeleted] Boolean flag which defines if search must include deleted attributes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributesByProjectId: function (projectId, isDeleted, options) {
            return localVarFp.getAttributesByProjectId(projectId, isDeleted, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search project  <br>System search all autotest related to the project  <br>System returns array of autotest with namespaces and classnames (listed in response)
         * @summary Get AutoTests Namespaces for Project by Id or GlobalId
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoTestsNamespaces: function (projectId, options) {
            return localVarFp.getAutoTestsNamespaces(projectId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier  <br>User runs method execution  <br>System search project  <br>System search all configurations related to project  <br>System returns array of found configurations (listed in response model)
         * @summary Get Configurations for Project by Id or GlobalId
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurationsByProjectId: function (projectId, options) {
            return localVarFp.getConfigurationsByProjectId(projectId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User runs method execution  <br>System returns project for test plans attributes by project identifier
         * @summary Get project for test plans attributes
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomAttributeTestPlanProjectRelations: function (projectId, options) {
            return localVarFp.getCustomAttributeTestPlanProjectRelations(projectId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search project  <br>System returns project (example listed in response parameters)
         * @summary Get Project by Id or GlobalId
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectById: function (projectId, options) {
            return localVarFp.getProjectById(projectId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search project  <br>System search all sections related to the project  <br>System returns array of sections (listed in response)
         * @summary Get Sections for Project by Id or GlobalId
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {} [UNKNOWN_PARAMETER_NAME] Amount of items to be skipped (offset)
         * @param {} [UNKNOWN_PARAMETER_NAME2] Amount of items to be taken (limit)
         * @param {} [UNKNOWN_PARAMETER_NAME3] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {} [UNKNOWN_PARAMETER_NAME4] Property name for searching
         * @param {} [UNKNOWN_PARAMETER_NAME5] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSectionsByProjectId: function (projectId, skip, take, orderBy, searchField, searchValue, options) {
            return localVarFp.getSectionsByProjectId(projectId, skip, take, orderBy, searchField, searchValue, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier  <br>[Optional] User sets isDeleted field value  <br>User runs method execution  <br>System search project  <br>                      [Optional] If User sets isDeleted field value as true, System search all deleted test plans related to                      project                    <br>                      [Optional] If User sets isDeleted field value as false, System search all test plans related to project which                      are not deleted                    <br>[Optional] If User did not set isDeleted field value, System search all v related to project  <br>System returns array of found test plans (listed in response model)
         * @summary Get TestPlans for Project by Id or GlobalId (if isDeleted is true, return deleted TestPlans)
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {boolean} [isDeleted] Boolean flag which defines if search must include deleted test plans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestPlansByProjectId: function (projectId, isDeleted, options) {
            return localVarFp.getTestPlansByProjectId(projectId, isDeleted, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier  <br>User runs method execution  <br>System search project  <br>System search all test runs related to project  <br>System returns array of found test runs (listed in response model)
         * @summary Get TestRuns for Project by Id or GlobalId
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {boolean} [notStarted]
         * @param {boolean} [inProgress]
         * @param {boolean} [stopped]
         * @param {boolean} [completed]
         * @param {string} [createdDateFrom]
         * @param {string} [createdDateTo]
         * @param {string} [testPlanId]
         * @param {} [UNKNOWN_PARAMETER_NAME] Amount of items to be skipped (offset)
         * @param {} [UNKNOWN_PARAMETER_NAME2] Amount of items to be taken (limit)
         * @param {} [UNKNOWN_PARAMETER_NAME3] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {} [UNKNOWN_PARAMETER_NAME4] Property name for searching
         * @param {} [UNKNOWN_PARAMETER_NAME5] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestRunsByProjectId: function (projectId, notStarted, inProgress, stopped, completed, createdDateFrom, createdDateTo, testPlanId, skip, take, orderBy, searchField, searchValue, options) {
            return localVarFp.getTestRunsByProjectId(projectId, notStarted, inProgress, stopped, completed, createdDateFrom, createdDateTo, testPlanId, skip, take, orderBy, searchField, searchValue, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier  <br>[Optional] User sets isDeleted field value  <br>User runs method execution  <br>System search project  <br>[Optional] If User sets isDeleted field value as true, System search all deleted workitems related to project  <br>                      [Optional] If User sets isDeleted field value as false, System search all workitems related to project which                      are not deleted                    <br>If User did not set isDeleted field value, System search all  workitems related to project  <br>System returns array of found workitems (listed in response model)
         * @summary Get WorkItems for Project by Id or GlobalId (if isDeleted is true, return deleted WorkItems)
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {boolean} [isDeleted] Boolean flag which defines if search must include deleted workitems
         * @param {Array<string>} [tagNames] Array of workitem tag names
         * @param {boolean} [includeIterations]
         * @param {} [UNKNOWN_PARAMETER_NAME] Amount of items to be skipped (offset)
         * @param {} [UNKNOWN_PARAMETER_NAME2] Amount of items to be taken (limit)
         * @param {} [UNKNOWN_PARAMETER_NAME3] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {} [UNKNOWN_PARAMETER_NAME4] Property name for searching
         * @param {} [UNKNOWN_PARAMETER_NAME5] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemsByProjectId: function (projectId, isDeleted, tagNames, includeIterations, skip, take, orderBy, searchField, searchValue, options) {
            return localVarFp.getWorkItemsByProjectId(projectId, isDeleted, tagNames, includeIterations, skip, take, orderBy, searchField, searchValue, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User attaches project as json file taken from export or export-by-testPlans method  <br>User runs method execution  <br>System updates project  <br>System returns no content response
         * @summary Import to existing Project from json file.  Sections can be imported in only one target project!
         * @param {string} projectId
         * @param {string} [apiVersion]
         * @param {boolean} [includeAttachments]
         * @param {File} [file] Select file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importToExistingProject: function (projectId, apiVersion, includeAttachments, file, options) {
            return localVarFp.importToExistingProject(projectId, apiVersion, includeAttachments, file, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search and restores deleted project  <br>System returns no content response
         * @summary Restore Project by Id or GlobalId
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreProject: function (projectId, options) {
            return localVarFp.restoreProject(projectId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets project internal or global identifier and attribute model  <br>User runs method execution  <br>System updates project and project attribute for test plan  <br>System returns no content response
         * @summary Update project attribute for test plan
         * @param {string} projectId
         * @param {CustomAttributeTestPlanProjectRelationPutModel} [customAttributeTestPlanProjectRelationPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomAttributeTestPlanProjectRelations: function (projectId, customAttributeTestPlanProjectRelationPutModel, options) {
            return localVarFp.updateCustomAttributeTestPlanProjectRelations(projectId, customAttributeTestPlanProjectRelationPutModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets project parameters (listed in request example) and runs method execution  <br>System updates project  <br>System returns updated project model (example listed in response parameters)
         * @summary Update Project
         * @param {ProjectPutModel} [projectPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject: function (projectPutModel, options) {
            return localVarFp.updateProject(projectPutModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets project parameters (listed in request example) and runs method execution  <br>System updates project  <br>System updates attribute related to the project  <br>System returns no content response
         * @summary Update Projects Attribute
         * @param {string} projectId Project internal(guid format) or global(int  format) identifier
         * @param {CustomAttributeModel} [customAttributeModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectsAttribute: function (projectId, customAttributeModel, options) {
            return localVarFp.updateProjectsAttribute(projectId, customAttributeModel, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ProjectsApiFactory = ProjectsApiFactory;
/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
var ProjectsApi = /** @class */ (function (_super) {
    __extends(ProjectsApi, _super);
    function ProjectsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * <br>Use case  <br>User sets project internal or global identifier  <br>User runs method execution  <br>System search project  <br>                      System returns project data as json file, containing project data, related attributes, sections and                      workitems
     * @summary Export Project with tests, sections and configurations in json file
     * @param {string} projectId Project internal(guid format) or global(int  format) identifier
     * @param {boolean} [includeAttachments]
     * @param {ProjectExportQueryModel} [projectExportQueryModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype._export = function (projectId, includeAttachments, projectExportQueryModel, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration)._export(projectId, includeAttachments, projectExportQueryModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User attaches project as json file taken from export or export-by-testPlans method  <br>User runs method execution  <br>System creates project  <br>System returns no content response
     * @summary Import Project from json file  Project can be imported only once (this method or ImportToExistingProject)  Next import will sync content in previously imported project.
     * @param {string} [apiVersion]
     * @param {boolean} [includeAttachments]
     * @param {File} [file] Select file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype._import = function (apiVersion, includeAttachments, file, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration)._import(apiVersion, includeAttachments, file, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets project internal or global identifier and attributes identifiers  <br>User runs method execution  <br>System updates project and add attributes to project for test plans  <br>System returns no content response
     * @summary Add attributes to project for test plans
     * @param {string} projectId
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.createCustomAttributeTestPlanProjectRelations = function (projectId, requestBody, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).createCustomAttributeTestPlanProjectRelations(projectId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets project parameters (listed in request example) and runs method execution  <br>System creates project  <br>System returns project model (example listed in response parameters)
     * @summary Create Project
     * @param {ProjectPostModel} [projectPostModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.createProject = function (projectPostModel, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).createProject(projectPostModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets attribute parameters (listed in request example) and runs method execution  <br>System search project  <br>System creates attribute and relates it to the project  <br>System returns project attribute properties (example listed in response parameters)
     * @summary Create Projects Attribute
     * @param {string} projectId Project internal(guid format) or global(int  format) identifier
     * @param {CustomAttributePostModel} [customAttributePostModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.createProjectsAttribute = function (projectId, customAttributePostModel, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).createProjectsAttribute(projectId, customAttributePostModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets project internal or global identifier and attribute identifier  <br>User runs method execution  <br>System updates project and delete attribute from project for test plans  <br>System returns no content response
     * @summary Delete attribute from project for test plans
     * @param {string} projectId
     * @param {string} attributeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.deleteCustomAttributeTestPlanProjectRelations = function (projectId, attributeId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).deleteCustomAttributeTestPlanProjectRelations(projectId, attributeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search and delete project  <br>System returns no content response
     * @summary Delete Project by Id or GlobalId
     * @param {string} projectId Project internal(guid format) or global(int  format) identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.deleteProject = function (projectId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).deleteProject(projectId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets project internal or global identifier   <br>User runs method execution  <br>System delete all autotests from project  <br>System returns no content response
     * @summary Delete all AutoTests from Project
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.deleteProjectAutoTests = function (projectId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).deleteProjectAutoTests(projectId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets project identifier and runs method execution  <br>User sets attribute identifier  <br>User runs method execution  <br>System search project  <br>System search and delete attribute  <br>System returns no content response
     * @summary Delete Projects Attribute by Id
     * @param {string} projectId Project internal(guid format) or global(int  format) identifier
     * @param {string} attributeId Project attribute internal(guid format)  identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.deleteProjectsAttribute = function (projectId, attributeId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).deleteProjectsAttribute(projectId, attributeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets project internal or global identifier  <br>User runs method execution  <br>System search project  <br>                      System returns project data as json file, containing project data, related attributes, sections, workitems,                      test plans, test suites, test points and configurations
     * @summary Export Project with tests, sections, configurations, testPlans, testSuites and testPoints as json file
     * @param {string} projectId Project internal(guid format) or global(int  format) identifier
     * @param {boolean} [includeAttachments]
     * @param {ProjectExportWithTestPlansPostModel} [projectExportWithTestPlansPostModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.exportWithTestPlansAndConfigurations = function (projectId, includeAttachments, projectExportWithTestPlansPostModel, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).exportWithTestPlansAndConfigurations(projectId, includeAttachments, projectExportWithTestPlansPostModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>[Optional] User sets isDeleted field value  <br>[Optional] If User sets isDeleted field value as true, System search all deleted projects  <br>[Optional] If User sets isDeleted field value as false, System search all projects which are not deleted  <br>If User did not set isDeleted field value, System search all projects  <br>System returns array of all found projects(listed in response model)
     * @summary Get all Projects (if isDeleted is true, return deleted Projects)
     * @param {boolean} [isDeleted] Boolean flag which defines if search must include deleted projects
     * @param {string} [projectName]
     * @param {} [UNKNOWN_PARAMETER_NAME] Amount of items to be skipped (offset)
     * @param {} [UNKNOWN_PARAMETER_NAME2] Amount of items to be taken (limit)
     * @param {} [UNKNOWN_PARAMETER_NAME3] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {} [UNKNOWN_PARAMETER_NAME4] Property name for searching
     * @param {} [UNKNOWN_PARAMETER_NAME5] Value for searching
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.getAllProjects = function (isDeleted, projectName, skip, take, orderBy, searchField, searchValue, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).getAllProjects(isDeleted, projectName, skip, take, orderBy, searchField, searchValue, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets project internal or global identifier  <br>User sets project attribute identifier  <br>User runs method execution  <br>System search project  <br>System search project attribute   <br>System returns project attribute (listed in response model)
     * @summary Get Projects Attribute by Id
     * @param {string} projectId Project internal(guid format) or global(int  format) identifier
     * @param {string} attributeId Project attribute internal(guid format)  identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.getAttributeByProjectId = function (projectId, attributeId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).getAttributeByProjectId(projectId, attributeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets project internal or global identifier  <br>[Optional] User sets isDeleted field value  <br>User runs method execution  <br>System search project  <br>                      [Optional] If User sets isDeleted field value as true, System search all deleted attributes related to                      project                    <br>                      [Optional] If User sets isDeleted field value as false, System search all attributes related to project which                      are not deleted                    <br>[Optional] If User did not set isDeleted field value, System search all attributes related to project  <br>System returns array of found attributes (listed in response model)
     * @summary Get Projects Attributes by Id or GlobalId
     * @param {string} projectId Project internal(guid format) or global(int  format) identifier
     * @param {boolean} [isDeleted] Boolean flag which defines if search must include deleted attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.getAttributesByProjectId = function (projectId, isDeleted, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).getAttributesByProjectId(projectId, isDeleted, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search project  <br>System search all autotest related to the project  <br>System returns array of autotest with namespaces and classnames (listed in response)
     * @summary Get AutoTests Namespaces for Project by Id or GlobalId
     * @param {string} projectId Project internal(guid format) or global(int  format) identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.getAutoTestsNamespaces = function (projectId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).getAutoTestsNamespaces(projectId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets project internal or global identifier  <br>User runs method execution  <br>System search project  <br>System search all configurations related to project  <br>System returns array of found configurations (listed in response model)
     * @summary Get Configurations for Project by Id or GlobalId
     * @param {string} projectId Project internal(guid format) or global(int  format) identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.getConfigurationsByProjectId = function (projectId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).getConfigurationsByProjectId(projectId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User runs method execution  <br>System returns project for test plans attributes by project identifier
     * @summary Get project for test plans attributes
     * @param {string} projectId Project internal(guid format) or global(int  format) identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.getCustomAttributeTestPlanProjectRelations = function (projectId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).getCustomAttributeTestPlanProjectRelations(projectId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search project  <br>System returns project (example listed in response parameters)
     * @summary Get Project by Id or GlobalId
     * @param {string} projectId Project internal(guid format) or global(int  format) identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.getProjectById = function (projectId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).getProjectById(projectId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search project  <br>System search all sections related to the project  <br>System returns array of sections (listed in response)
     * @summary Get Sections for Project by Id or GlobalId
     * @param {string} projectId Project internal(guid format) or global(int  format) identifier
     * @param {number} [skip] Amount of items to be skipped (offset)
     * @param {number} [take] Amount of items to be taken (limit)
     * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {string} [searchField] Property name for searching
     * @param {string} [searchValue] Value for searching
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.getSectionsByProjectId = function (projectId, skip, take, orderBy, searchField, searchValue, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).getSectionsByProjectId(projectId, skip, take, orderBy, searchField, searchValue, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets project internal or global identifier  <br>[Optional] User sets isDeleted field value  <br>User runs method execution  <br>System search project  <br>                      [Optional] If User sets isDeleted field value as true, System search all deleted test plans related to                      project                    <br>                      [Optional] If User sets isDeleted field value as false, System search all test plans related to project which                      are not deleted                    <br>[Optional] If User did not set isDeleted field value, System search all v related to project  <br>System returns array of found test plans (listed in response model)
     * @summary Get TestPlans for Project by Id or GlobalId (if isDeleted is true, return deleted TestPlans)
     * @param {string} projectId Project internal(guid format) or global(int  format) identifier
     * @param {boolean} [isDeleted] Boolean flag which defines if search must include deleted test plans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.getTestPlansByProjectId = function (projectId, isDeleted, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).getTestPlansByProjectId(projectId, isDeleted, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets project internal or global identifier  <br>User runs method execution  <br>System search project  <br>System search all test runs related to project  <br>System returns array of found test runs (listed in response model)
     * @summary Get TestRuns for Project by Id or GlobalId
     * @param {string} projectId Project internal(guid format) or global(int  format) identifier
     * @param {boolean} [notStarted]
     * @param {boolean} [inProgress]
     * @param {boolean} [stopped]
     * @param {boolean} [completed]
     * @param {string} [createdDateFrom]
     * @param {string} [createdDateTo]
     * @param {string} [testPlanId]
     * @param {number} [skip] Amount of items to be skipped (offset)
     * @param {number} [take] Amount of items to be taken (limit)
     * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {string} [searchField] Property name for searching
     * @param {string} [searchValue] Value for searching
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.getTestRunsByProjectId = function (projectId, notStarted, inProgress, stopped, completed, createdDateFrom, createdDateTo, testPlanId, skip, take, orderBy, searchField, searchValue, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).getTestRunsByProjectId(projectId, notStarted, inProgress, stopped, completed, createdDateFrom, createdDateTo, testPlanId, skip, take, orderBy, searchField, searchValue, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets project internal or global identifier  <br>[Optional] User sets isDeleted field value  <br>User runs method execution  <br>System search project  <br>[Optional] If User sets isDeleted field value as true, System search all deleted workitems related to project  <br>                      [Optional] If User sets isDeleted field value as false, System search all workitems related to project which                      are not deleted                    <br>If User did not set isDeleted field value, System search all  workitems related to project  <br>System returns array of found workitems (listed in response model)
     * @summary Get WorkItems for Project by Id or GlobalId (if isDeleted is true, return deleted WorkItems)
     * @param {string} projectId Project internal(guid format) or global(int  format) identifier
     * @param {boolean} [isDeleted] Boolean flag which defines if search must include deleted workitems
     * @param {Array<string>} [tagNames] Array of workitem tag names
     * @param {boolean} [includeIterations]
     * @param {number} [skip] Amount of items to be skipped (offset)
     * @param {number} [take] Amount of items to be taken (limit)
     * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {string} [searchField] Property name for searching
     * @param {string} [searchValue] Value for searching
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.getWorkItemsByProjectId = function (projectId, isDeleted, tagNames, includeIterations, skip, take, orderBy, searchField, searchValue, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).getWorkItemsByProjectId(projectId, isDeleted, tagNames, includeIterations, skip, take, orderBy, searchField, searchValue, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User attaches project as json file taken from export or export-by-testPlans method  <br>User runs method execution  <br>System updates project  <br>System returns no content response
     * @summary Import to existing Project from json file.  Sections can be imported in only one target project!
     * @param {string} projectId
     * @param {string} [apiVersion]
     * @param {boolean} [includeAttachments]
     * @param {File} [file] Select file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.importToExistingProject = function (projectId, apiVersion, includeAttachments, file, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).importToExistingProject(projectId, apiVersion, includeAttachments, file, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets project internal or global identifier and runs method execution  <br>System search and restores deleted project  <br>System returns no content response
     * @summary Restore Project by Id or GlobalId
     * @param {string} projectId Project internal(guid format) or global(int  format) identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.restoreProject = function (projectId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).restoreProject(projectId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets project internal or global identifier and attribute model  <br>User runs method execution  <br>System updates project and project attribute for test plan  <br>System returns no content response
     * @summary Update project attribute for test plan
     * @param {string} projectId
     * @param {CustomAttributeTestPlanProjectRelationPutModel} [customAttributeTestPlanProjectRelationPutModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.updateCustomAttributeTestPlanProjectRelations = function (projectId, customAttributeTestPlanProjectRelationPutModel, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).updateCustomAttributeTestPlanProjectRelations(projectId, customAttributeTestPlanProjectRelationPutModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets project parameters (listed in request example) and runs method execution  <br>System updates project  <br>System returns updated project model (example listed in response parameters)
     * @summary Update Project
     * @param {ProjectPutModel} [projectPutModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.updateProject = function (projectPutModel, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).updateProject(projectPutModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets project parameters (listed in request example) and runs method execution  <br>System updates project  <br>System updates attribute related to the project  <br>System returns no content response
     * @summary Update Projects Attribute
     * @param {string} projectId Project internal(guid format) or global(int  format) identifier
     * @param {CustomAttributeModel} [customAttributeModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.updateProjectsAttribute = function (projectId, customAttributeModel, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).updateProjectsAttribute(projectId, customAttributeModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ProjectsApi;
}(base_1.BaseAPI));
exports.ProjectsApi = ProjectsApi;
/**
 * SectionsApi - axios parameter creator
 * @export
 */
var SectionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * <br>Use case  <br>User sets section properties (listed in request example)  <br>User runs method execution  <br>System creates section property values  <br>System returns section (listed in response example)
         * @summary Create Section
         * @param {SectionPostModel} [sectionPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSection: function (sectionPostModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/sections";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sectionPostModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets section identifier  <br>User runs method execution  <br>System search section by the identifier  <br>System search and delete nested sections of the found section  <br>System search and delete workitems related to the found nested sections  <br>System deletes initial section and related workitem  <br>System returns no content response
         * @summary Delete Section by id
         * @param {string} sectionId Section internal (guid format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSection: function (sectionId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sectionId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteSection', 'sectionId', sectionId);
                            localVarPath = "/api/v2/sections/{sectionId}"
                                .replace("{".concat("sectionId", "}"), encodeURIComponent(String(sectionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets section internal (guid format) identifier  <br>User runs method execution  <br>System search section by the section identifier  <br>                      [Optional] If isDeleted flag equals false, deleted workitems are not being searched.                      If true, deleted workitems are also being searched, null for all workitems.                    <br>System returns section
         * @summary Get Section by id
         * @param {string} sectionId Section internal (guid format) identifier
         * @param {boolean} [isDeleted] Flag that defines if deleted section must be include in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSectionById: function (sectionId, isDeleted, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sectionId' is not null or undefined
                            (0, common_1.assertParamExists)('getSectionById', 'sectionId', sectionId);
                            localVarPath = "/api/v2/sections/{sectionId}"
                                .replace("{".concat("sectionId", "}"), encodeURIComponent(String(sectionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (isDeleted !== undefined) {
                                localVarQueryParameter['isDeleted'] = isDeleted;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets section identifier  <br>User runs method execution  <br>System search section by the identifier  <br>System search workitems related to the section  <br>                      [Optional] If isDeleted flag equals false, deleted workitems are not being searched.                      If true, deleted workitems are also being searched, null for all workitems.                    <br>System returns workitem collection
         * @summary Get WorkItems for Section (if isDeleted is true, return deleted WorkItems)
         * @param {string} sectionId Section internal (guid format) identifier
         * @param {boolean} [isDeleted] Flag that defines if deleted workitems must be include in the response
         * @param {Array<string>} [tagNames] Array of workitem tag names
         * @param {boolean} [includeIterations]
         * @param {number} [skip] Amount of items to be skipped (offset)
         * @param {number} [take] Amount of items to be taken (limit)
         * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {string} [searchField] Property name for searching
         * @param {string} [searchValue] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemsBySectionId: function (sectionId, isDeleted, tagNames, includeIterations, skip, take, orderBy, searchField, searchValue, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sectionId' is not null or undefined
                            (0, common_1.assertParamExists)('getWorkItemsBySectionId', 'sectionId', sectionId);
                            localVarPath = "/api/v2/sections/{sectionId}/workItems"
                                .replace("{".concat("sectionId", "}"), encodeURIComponent(String(sectionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (isDeleted !== undefined) {
                                localVarQueryParameter['isDeleted'] = isDeleted;
                            }
                            if (tagNames) {
                                localVarQueryParameter['tagNames'] = tagNames;
                            }
                            if (includeIterations !== undefined) {
                                localVarQueryParameter['includeIterations'] = includeIterations;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['Skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['Take'] = take;
                            }
                            if (orderBy !== undefined) {
                                localVarQueryParameter['OrderBy'] = orderBy;
                            }
                            if (searchField !== undefined) {
                                localVarQueryParameter['SearchField'] = searchField;
                            }
                            if (searchValue !== undefined) {
                                localVarQueryParameter['SearchValue'] = searchValue;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>                      User sets section identifier, old parent identifier, parent identifier and  next section identifier (listed                      in request example)                    <br>User runs method execution  <br>System search section by the identifier  <br>System unlink section from the old parent and links to the new one  <br>System updates section rank using the next section identifier  <br>System returns no content response
         * @summary Move Section. Can be moved inside another section. It is possible to indicate a project
         * @param {SectionMoveModel} [sectionMoveModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        move: function (sectionMoveModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/sections/move";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sectionMoveModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets section identifier and new name (listed in request example)  <br>User runs method execution  <br>System search section by the identifier  <br>System updates section name using the new name  <br>System returns no content response
         * @summary Rename Section
         * @param {SectionRenameModel} [sectionRenameModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rename: function (sectionRenameModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/sections/rename";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sectionRenameModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets section properties (listed in request example)  <br>User runs method execution  <br>System search section by the identifier  <br>System updates section using the property values  <br>System returns no content response
         * @summary Update Section
         * @param {SectionPutModel} [sectionPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSection: function (sectionPutModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/sections";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sectionPutModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SectionsApiAxiosParamCreator = SectionsApiAxiosParamCreator;
/**
 * SectionsApi - functional programming interface
 * @export
 */
var SectionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SectionsApiAxiosParamCreator)(configuration);
    return {
        /**
         * <br>Use case  <br>User sets section properties (listed in request example)  <br>User runs method execution  <br>System creates section property values  <br>System returns section (listed in response example)
         * @summary Create Section
         * @param {SectionPostModel} [sectionPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSection: function (sectionPostModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createSection(sectionPostModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets section identifier  <br>User runs method execution  <br>System search section by the identifier  <br>System search and delete nested sections of the found section  <br>System search and delete workitems related to the found nested sections  <br>System deletes initial section and related workitem  <br>System returns no content response
         * @summary Delete Section by id
         * @param {string} sectionId Section internal (guid format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSection: function (sectionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteSection(sectionId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets section internal (guid format) identifier  <br>User runs method execution  <br>System search section by the section identifier  <br>                      [Optional] If isDeleted flag equals false, deleted workitems are not being searched.                      If true, deleted workitems are also being searched, null for all workitems.                    <br>System returns section
         * @summary Get Section by id
         * @param {string} sectionId Section internal (guid format) identifier
         * @param {boolean} [isDeleted] Flag that defines if deleted section must be include in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSectionById: function (sectionId, isDeleted, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSectionById(sectionId, isDeleted, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets section identifier  <br>User runs method execution  <br>System search section by the identifier  <br>System search workitems related to the section  <br>                      [Optional] If isDeleted flag equals false, deleted workitems are not being searched.                      If true, deleted workitems are also being searched, null for all workitems.                    <br>System returns workitem collection
         * @summary Get WorkItems for Section (if isDeleted is true, return deleted WorkItems)
         * @param {string} sectionId Section internal (guid format) identifier
         * @param {boolean} [isDeleted] Flag that defines if deleted workitems must be include in the response
         * @param {Array<string>} [tagNames] Array of workitem tag names
         * @param {boolean} [includeIterations]
         * @param {number} [skip] Amount of items to be skipped (offset)
         * @param {number} [take] Amount of items to be taken (limit)
         * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {string} [searchField] Property name for searching
         * @param {string} [searchValue] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemsBySectionId: function (sectionId, isDeleted, tagNames, includeIterations, skip, take, orderBy, searchField, searchValue, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getWorkItemsBySectionId(sectionId, isDeleted, tagNames, includeIterations, skip, take, orderBy, searchField, searchValue, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>                      User sets section identifier, old parent identifier, parent identifier and  next section identifier (listed                      in request example)                    <br>User runs method execution  <br>System search section by the identifier  <br>System unlink section from the old parent and links to the new one  <br>System updates section rank using the next section identifier  <br>System returns no content response
         * @summary Move Section. Can be moved inside another section. It is possible to indicate a project
         * @param {SectionMoveModel} [sectionMoveModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        move: function (sectionMoveModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.move(sectionMoveModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets section identifier and new name (listed in request example)  <br>User runs method execution  <br>System search section by the identifier  <br>System updates section name using the new name  <br>System returns no content response
         * @summary Rename Section
         * @param {SectionRenameModel} [sectionRenameModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rename: function (sectionRenameModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.rename(sectionRenameModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets section properties (listed in request example)  <br>User runs method execution  <br>System search section by the identifier  <br>System updates section using the property values  <br>System returns no content response
         * @summary Update Section
         * @param {SectionPutModel} [sectionPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSection: function (sectionPutModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateSection(sectionPutModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.SectionsApiFp = SectionsApiFp;
/**
 * SectionsApi - factory interface
 * @export
 */
var SectionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SectionsApiFp)(configuration);
    return {
        /**
         * <br>Use case  <br>User sets section properties (listed in request example)  <br>User runs method execution  <br>System creates section property values  <br>System returns section (listed in response example)
         * @summary Create Section
         * @param {SectionPostModel} [sectionPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSection: function (sectionPostModel, options) {
            return localVarFp.createSection(sectionPostModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets section identifier  <br>User runs method execution  <br>System search section by the identifier  <br>System search and delete nested sections of the found section  <br>System search and delete workitems related to the found nested sections  <br>System deletes initial section and related workitem  <br>System returns no content response
         * @summary Delete Section by id
         * @param {string} sectionId Section internal (guid format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSection: function (sectionId, options) {
            return localVarFp.deleteSection(sectionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets section internal (guid format) identifier  <br>User runs method execution  <br>System search section by the section identifier  <br>                      [Optional] If isDeleted flag equals false, deleted workitems are not being searched.                      If true, deleted workitems are also being searched, null for all workitems.                    <br>System returns section
         * @summary Get Section by id
         * @param {string} sectionId Section internal (guid format) identifier
         * @param {boolean} [isDeleted] Flag that defines if deleted section must be include in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSectionById: function (sectionId, isDeleted, options) {
            return localVarFp.getSectionById(sectionId, isDeleted, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets section identifier  <br>User runs method execution  <br>System search section by the identifier  <br>System search workitems related to the section  <br>                      [Optional] If isDeleted flag equals false, deleted workitems are not being searched.                      If true, deleted workitems are also being searched, null for all workitems.                    <br>System returns workitem collection
         * @summary Get WorkItems for Section (if isDeleted is true, return deleted WorkItems)
         * @param {string} sectionId Section internal (guid format) identifier
         * @param {boolean} [isDeleted] Flag that defines if deleted workitems must be include in the response
         * @param {Array<string>} [tagNames] Array of workitem tag names
         * @param {boolean} [includeIterations]
         * @param {number} [skip] Amount of items to be skipped (offset)
         * @param {number} [take] Amount of items to be taken (limit)
         * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {string} [searchField] Property name for searching
         * @param {string} [searchValue] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemsBySectionId: function (sectionId, isDeleted, tagNames, includeIterations, skip, take, orderBy, searchField, searchValue, options) {
            return localVarFp.getWorkItemsBySectionId(sectionId, isDeleted, tagNames, includeIterations, skip, take, orderBy, searchField, searchValue, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>                      User sets section identifier, old parent identifier, parent identifier and  next section identifier (listed                      in request example)                    <br>User runs method execution  <br>System search section by the identifier  <br>System unlink section from the old parent and links to the new one  <br>System updates section rank using the next section identifier  <br>System returns no content response
         * @summary Move Section. Can be moved inside another section. It is possible to indicate a project
         * @param {SectionMoveModel} [sectionMoveModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        move: function (sectionMoveModel, options) {
            return localVarFp.move(sectionMoveModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets section identifier and new name (listed in request example)  <br>User runs method execution  <br>System search section by the identifier  <br>System updates section name using the new name  <br>System returns no content response
         * @summary Rename Section
         * @param {SectionRenameModel} [sectionRenameModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rename: function (sectionRenameModel, options) {
            return localVarFp.rename(sectionRenameModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets section properties (listed in request example)  <br>User runs method execution  <br>System search section by the identifier  <br>System updates section using the property values  <br>System returns no content response
         * @summary Update Section
         * @param {SectionPutModel} [sectionPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSection: function (sectionPutModel, options) {
            return localVarFp.updateSection(sectionPutModel, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SectionsApiFactory = SectionsApiFactory;
/**
 * SectionsApi - object-oriented interface
 * @export
 * @class SectionsApi
 * @extends {BaseAPI}
 */
var SectionsApi = /** @class */ (function (_super) {
    __extends(SectionsApi, _super);
    function SectionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * <br>Use case  <br>User sets section properties (listed in request example)  <br>User runs method execution  <br>System creates section property values  <br>System returns section (listed in response example)
     * @summary Create Section
     * @param {SectionPostModel} [sectionPostModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionsApi
     */
    SectionsApi.prototype.createSection = function (sectionPostModel, options) {
        var _this = this;
        return (0, exports.SectionsApiFp)(this.configuration).createSection(sectionPostModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets section identifier  <br>User runs method execution  <br>System search section by the identifier  <br>System search and delete nested sections of the found section  <br>System search and delete workitems related to the found nested sections  <br>System deletes initial section and related workitem  <br>System returns no content response
     * @summary Delete Section by id
     * @param {string} sectionId Section internal (guid format) identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionsApi
     */
    SectionsApi.prototype.deleteSection = function (sectionId, options) {
        var _this = this;
        return (0, exports.SectionsApiFp)(this.configuration).deleteSection(sectionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets section internal (guid format) identifier  <br>User runs method execution  <br>System search section by the section identifier  <br>                      [Optional] If isDeleted flag equals false, deleted workitems are not being searched.                      If true, deleted workitems are also being searched, null for all workitems.                    <br>System returns section
     * @summary Get Section by id
     * @param {string} sectionId Section internal (guid format) identifier
     * @param {boolean} [isDeleted] Flag that defines if deleted section must be include in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionsApi
     */
    SectionsApi.prototype.getSectionById = function (sectionId, isDeleted, options) {
        var _this = this;
        return (0, exports.SectionsApiFp)(this.configuration).getSectionById(sectionId, isDeleted, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets section identifier  <br>User runs method execution  <br>System search section by the identifier  <br>System search workitems related to the section  <br>                      [Optional] If isDeleted flag equals false, deleted workitems are not being searched.                      If true, deleted workitems are also being searched, null for all workitems.                    <br>System returns workitem collection
     * @summary Get WorkItems for Section (if isDeleted is true, return deleted WorkItems)
     * @param {string} sectionId Section internal (guid format) identifier
     * @param {boolean} [isDeleted] Flag that defines if deleted workitems must be include in the response
     * @param {Array<string>} [tagNames] Array of workitem tag names
     * @param {boolean} [includeIterations]
     * @param {number} [skip] Amount of items to be skipped (offset)
     * @param {number} [take] Amount of items to be taken (limit)
     * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {string} [searchField] Property name for searching
     * @param {string} [searchValue] Value for searching
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionsApi
     */
    SectionsApi.prototype.getWorkItemsBySectionId = function (sectionId, isDeleted, tagNames, includeIterations, skip, take, orderBy, searchField, searchValue, options) {
        var _this = this;
        return (0, exports.SectionsApiFp)(this.configuration).getWorkItemsBySectionId(sectionId, isDeleted, tagNames, includeIterations, skip, take, orderBy, searchField, searchValue, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>                      User sets section identifier, old parent identifier, parent identifier and  next section identifier (listed                      in request example)                    <br>User runs method execution  <br>System search section by the identifier  <br>System unlink section from the old parent and links to the new one  <br>System updates section rank using the next section identifier  <br>System returns no content response
     * @summary Move Section. Can be moved inside another section. It is possible to indicate a project
     * @param {SectionMoveModel} [sectionMoveModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionsApi
     */
    SectionsApi.prototype.move = function (sectionMoveModel, options) {
        var _this = this;
        return (0, exports.SectionsApiFp)(this.configuration).move(sectionMoveModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets section identifier and new name (listed in request example)  <br>User runs method execution  <br>System search section by the identifier  <br>System updates section name using the new name  <br>System returns no content response
     * @summary Rename Section
     * @param {SectionRenameModel} [sectionRenameModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionsApi
     */
    SectionsApi.prototype.rename = function (sectionRenameModel, options) {
        var _this = this;
        return (0, exports.SectionsApiFp)(this.configuration).rename(sectionRenameModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets section properties (listed in request example)  <br>User runs method execution  <br>System search section by the identifier  <br>System updates section using the property values  <br>System returns no content response
     * @summary Update Section
     * @param {SectionPutModel} [sectionPutModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionsApi
     */
    SectionsApi.prototype.updateSection = function (sectionPutModel, options) {
        var _this = this;
        return (0, exports.SectionsApiFp)(this.configuration).updateSection(sectionPutModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SectionsApi;
}(base_1.BaseAPI));
exports.SectionsApi = SectionsApi;
/**
 * TestPlansApi - axios parameter creator
 * @export
 */
var TestPlansApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add test-points to test suite with sections
         * @param {string} testPlanId Test suite internal identifier
         * @param {WorkItemSelectModel} [workItemSelectModel] Filter object to retrieve work items for test-suite\&#39;s project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTestPointsWithSections: function (testPlanId, workItemSelectModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testPlanId' is not null or undefined
                            (0, common_1.assertParamExists)('addTestPointsWithSections', 'testPlanId', testPlanId);
                            localVarPath = "/api/v2/testPlans/{testPlanId}/test-points/withSections"
                                .replace("{".concat("testPlanId", "}"), encodeURIComponent(String(testPlanId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(workItemSelectModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets TestPlan identifier  <br>User sets WorkItem identifiers (listed in request example)  <br>User runs method execution  <br>System added WorkItems and Sections to TestPlan  <br>System returns no content response
         * @summary Add WorkItems to TestPlan with Sections as TestSuites
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {Set<string>} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWorkItemsWithSections: function (testPlanId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testPlanId' is not null or undefined
                            (0, common_1.assertParamExists)('addWorkItemsWithSections', 'testPlanId', testPlanId);
                            localVarPath = "/api/v2/testPlans/{testPlanId}/workItems/withSections"
                                .replace("{".concat("testPlanId", "}"), encodeURIComponent(String(testPlanId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System clones test plan  <br>System returns test plan (listed in response example)
         * @summary Clone TestPlan
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clone: function (testPlanId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testPlanId' is not null or undefined
                            (0, common_1.assertParamExists)('clone', 'testPlanId', testPlanId);
                            localVarPath = "/api/v2/testPlans/{testPlanId}/clone"
                                .replace("{".concat("testPlanId", "}"), encodeURIComponent(String(testPlanId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System completes the test plan and updates test plan status  <br>System returns no content response
         * @summary Complete TestPlan
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complete: function (testPlanId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testPlanId' is not null or undefined
                            (0, common_1.assertParamExists)('complete', 'testPlanId', testPlanId);
                            localVarPath = "/api/v2/testPlans/{testPlanId}/complete"
                                .replace("{".concat("testPlanId", "}"), encodeURIComponent(String(testPlanId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test plan properties (listed in request example)  <br>User runs method execution  <br>System creates test plan  <br>System returns test plan (listed in response example)
         * @summary Create TestPlan
         * @param {TestPlanPostModel} [testPlanPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestPlan: function (testPlanPostModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/testPlans";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(testPlanPostModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System delete test plan  <br>System returns no content response
         * @summary Delete TestPlan
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTestPlan: function (testPlanId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testPlanId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteTestPlan', 'testPlanId', testPlanId);
                            localVarPath = "/api/v2/testPlans/{testPlanId}"
                                .replace("{".concat("testPlanId", "}"), encodeURIComponent(String(testPlanId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System search  test plan by the identifier  <br>System returns test plan
         * @summary Get TestPlan by Id
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestPlanById: function (testPlanId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testPlanId' is not null or undefined
                            (0, common_1.assertParamExists)('getTestPlanById', 'testPlanId', testPlanId);
                            localVarPath = "/api/v2/testPlans/{testPlanId}"
                                .replace("{".concat("testPlanId", "}"), encodeURIComponent(String(testPlanId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System finds test suites related to the test plan  <br>System returns test suites as a tree model (listed in response example)
         * @summary Get TestSuites Tree By Id
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestSuitesById: function (testPlanId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testPlanId' is not null or undefined
                            (0, common_1.assertParamExists)('getTestSuitesById', 'testPlanId', testPlanId);
                            localVarPath = "/api/v2/testPlans/{testPlanId}/testSuites"
                                .replace("{".concat("testPlanId", "}"), encodeURIComponent(String(testPlanId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System pauses the test plan and updates test plan status  <br>System returns no content response
         * @summary Pause TestPlan
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pause: function (testPlanId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testPlanId' is not null or undefined
                            (0, common_1.assertParamExists)('pause', 'testPlanId', testPlanId);
                            localVarPath = "/api/v2/testPlans/{testPlanId}/pause"
                                .replace("{".concat("testPlanId", "}"), encodeURIComponent(String(testPlanId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System restores test plan  <br>System returns no content response
         * @summary Restore TestPlan
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreTestPlan: function (testPlanId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testPlanId' is not null or undefined
                            (0, common_1.assertParamExists)('restoreTestPlan', 'testPlanId', testPlanId);
                            localVarPath = "/api/v2/testPlans/{testPlanId}/restore"
                                .replace("{".concat("testPlanId", "}"), encodeURIComponent(String(testPlanId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System starts the test plan and updates test plan status  <br>System returns no content response
         * @summary Start TestPlan
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        start: function (testPlanId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testPlanId' is not null or undefined
                            (0, common_1.assertParamExists)('start', 'testPlanId', testPlanId);
                            localVarPath = "/api/v2/testPlans/{testPlanId}/start"
                                .replace("{".concat("testPlanId", "}"), encodeURIComponent(String(testPlanId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test plan properties(listed in request example)  <br>User runs method execution  <br>System updates test plan  <br>System returns no content response
         * @summary Update TestPlan
         * @param {TestPlanPutModel} [testPlanPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTestPlan: function (testPlanPutModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/testPlans";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(testPlanPutModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.TestPlansApiAxiosParamCreator = TestPlansApiAxiosParamCreator;
/**
 * TestPlansApi - functional programming interface
 * @export
 */
var TestPlansApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TestPlansApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Add test-points to test suite with sections
         * @param {string} testPlanId Test suite internal identifier
         * @param {WorkItemSelectModel} [workItemSelectModel] Filter object to retrieve work items for test-suite\&#39;s project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTestPointsWithSections: function (testPlanId, workItemSelectModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addTestPointsWithSections(testPlanId, workItemSelectModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets TestPlan identifier  <br>User sets WorkItem identifiers (listed in request example)  <br>User runs method execution  <br>System added WorkItems and Sections to TestPlan  <br>System returns no content response
         * @summary Add WorkItems to TestPlan with Sections as TestSuites
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {Set<string>} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWorkItemsWithSections: function (testPlanId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addWorkItemsWithSections(testPlanId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System clones test plan  <br>System returns test plan (listed in response example)
         * @summary Clone TestPlan
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clone: function (testPlanId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.clone(testPlanId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System completes the test plan and updates test plan status  <br>System returns no content response
         * @summary Complete TestPlan
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complete: function (testPlanId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.complete(testPlanId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test plan properties (listed in request example)  <br>User runs method execution  <br>System creates test plan  <br>System returns test plan (listed in response example)
         * @summary Create TestPlan
         * @param {TestPlanPostModel} [testPlanPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestPlan: function (testPlanPostModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createTestPlan(testPlanPostModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System delete test plan  <br>System returns no content response
         * @summary Delete TestPlan
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTestPlan: function (testPlanId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteTestPlan(testPlanId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System search  test plan by the identifier  <br>System returns test plan
         * @summary Get TestPlan by Id
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestPlanById: function (testPlanId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTestPlanById(testPlanId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System finds test suites related to the test plan  <br>System returns test suites as a tree model (listed in response example)
         * @summary Get TestSuites Tree By Id
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestSuitesById: function (testPlanId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTestSuitesById(testPlanId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System pauses the test plan and updates test plan status  <br>System returns no content response
         * @summary Pause TestPlan
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pause: function (testPlanId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.pause(testPlanId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System restores test plan  <br>System returns no content response
         * @summary Restore TestPlan
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreTestPlan: function (testPlanId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.restoreTestPlan(testPlanId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System starts the test plan and updates test plan status  <br>System returns no content response
         * @summary Start TestPlan
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        start: function (testPlanId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.start(testPlanId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test plan properties(listed in request example)  <br>User runs method execution  <br>System updates test plan  <br>System returns no content response
         * @summary Update TestPlan
         * @param {TestPlanPutModel} [testPlanPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTestPlan: function (testPlanPutModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateTestPlan(testPlanPutModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.TestPlansApiFp = TestPlansApiFp;
/**
 * TestPlansApi - factory interface
 * @export
 */
var TestPlansApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TestPlansApiFp)(configuration);
    return {
        /**
         *
         * @summary Add test-points to test suite with sections
         * @param {string} testPlanId Test suite internal identifier
         * @param {WorkItemSelectModel} [workItemSelectModel] Filter object to retrieve work items for test-suite\&#39;s project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTestPointsWithSections: function (testPlanId, workItemSelectModel, options) {
            return localVarFp.addTestPointsWithSections(testPlanId, workItemSelectModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets TestPlan identifier  <br>User sets WorkItem identifiers (listed in request example)  <br>User runs method execution  <br>System added WorkItems and Sections to TestPlan  <br>System returns no content response
         * @summary Add WorkItems to TestPlan with Sections as TestSuites
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {Set<string>} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWorkItemsWithSections: function (testPlanId, requestBody, options) {
            return localVarFp.addWorkItemsWithSections(testPlanId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System clones test plan  <br>System returns test plan (listed in response example)
         * @summary Clone TestPlan
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clone: function (testPlanId, options) {
            return localVarFp.clone(testPlanId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System completes the test plan and updates test plan status  <br>System returns no content response
         * @summary Complete TestPlan
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complete: function (testPlanId, options) {
            return localVarFp.complete(testPlanId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test plan properties (listed in request example)  <br>User runs method execution  <br>System creates test plan  <br>System returns test plan (listed in response example)
         * @summary Create TestPlan
         * @param {TestPlanPostModel} [testPlanPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestPlan: function (testPlanPostModel, options) {
            return localVarFp.createTestPlan(testPlanPostModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System delete test plan  <br>System returns no content response
         * @summary Delete TestPlan
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTestPlan: function (testPlanId, options) {
            return localVarFp.deleteTestPlan(testPlanId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System search  test plan by the identifier  <br>System returns test plan
         * @summary Get TestPlan by Id
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestPlanById: function (testPlanId, options) {
            return localVarFp.getTestPlanById(testPlanId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System finds test suites related to the test plan  <br>System returns test suites as a tree model (listed in response example)
         * @summary Get TestSuites Tree By Id
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestSuitesById: function (testPlanId, options) {
            return localVarFp.getTestSuitesById(testPlanId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System pauses the test plan and updates test plan status  <br>System returns no content response
         * @summary Pause TestPlan
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pause: function (testPlanId, options) {
            return localVarFp.pause(testPlanId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System restores test plan  <br>System returns no content response
         * @summary Restore TestPlan
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreTestPlan: function (testPlanId, options) {
            return localVarFp.restoreTestPlan(testPlanId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System starts the test plan and updates test plan status  <br>System returns no content response
         * @summary Start TestPlan
         * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        start: function (testPlanId, options) {
            return localVarFp.start(testPlanId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test plan properties(listed in request example)  <br>User runs method execution  <br>System updates test plan  <br>System returns no content response
         * @summary Update TestPlan
         * @param {TestPlanPutModel} [testPlanPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTestPlan: function (testPlanPutModel, options) {
            return localVarFp.updateTestPlan(testPlanPutModel, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TestPlansApiFactory = TestPlansApiFactory;
/**
 * TestPlansApi - object-oriented interface
 * @export
 * @class TestPlansApi
 * @extends {BaseAPI}
 */
var TestPlansApi = /** @class */ (function (_super) {
    __extends(TestPlansApi, _super);
    function TestPlansApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add test-points to test suite with sections
     * @param {string} testPlanId Test suite internal identifier
     * @param {WorkItemSelectModel} [workItemSelectModel] Filter object to retrieve work items for test-suite\&#39;s project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestPlansApi
     */
    TestPlansApi.prototype.addTestPointsWithSections = function (testPlanId, workItemSelectModel, options) {
        var _this = this;
        return (0, exports.TestPlansApiFp)(this.configuration).addTestPointsWithSections(testPlanId, workItemSelectModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets TestPlan identifier  <br>User sets WorkItem identifiers (listed in request example)  <br>User runs method execution  <br>System added WorkItems and Sections to TestPlan  <br>System returns no content response
     * @summary Add WorkItems to TestPlan with Sections as TestSuites
     * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
     * @param {Set<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestPlansApi
     */
    TestPlansApi.prototype.addWorkItemsWithSections = function (testPlanId, requestBody, options) {
        var _this = this;
        return (0, exports.TestPlansApiFp)(this.configuration).addWorkItemsWithSections(testPlanId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System clones test plan  <br>System returns test plan (listed in response example)
     * @summary Clone TestPlan
     * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestPlansApi
     */
    TestPlansApi.prototype.clone = function (testPlanId, options) {
        var _this = this;
        return (0, exports.TestPlansApiFp)(this.configuration).clone(testPlanId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System completes the test plan and updates test plan status  <br>System returns no content response
     * @summary Complete TestPlan
     * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestPlansApi
     */
    TestPlansApi.prototype.complete = function (testPlanId, options) {
        var _this = this;
        return (0, exports.TestPlansApiFp)(this.configuration).complete(testPlanId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test plan properties (listed in request example)  <br>User runs method execution  <br>System creates test plan  <br>System returns test plan (listed in response example)
     * @summary Create TestPlan
     * @param {TestPlanPostModel} [testPlanPostModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestPlansApi
     */
    TestPlansApi.prototype.createTestPlan = function (testPlanPostModel, options) {
        var _this = this;
        return (0, exports.TestPlansApiFp)(this.configuration).createTestPlan(testPlanPostModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System delete test plan  <br>System returns no content response
     * @summary Delete TestPlan
     * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestPlansApi
     */
    TestPlansApi.prototype.deleteTestPlan = function (testPlanId, options) {
        var _this = this;
        return (0, exports.TestPlansApiFp)(this.configuration).deleteTestPlan(testPlanId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System search  test plan by the identifier  <br>System returns test plan
     * @summary Get TestPlan by Id
     * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestPlansApi
     */
    TestPlansApi.prototype.getTestPlanById = function (testPlanId, options) {
        var _this = this;
        return (0, exports.TestPlansApiFp)(this.configuration).getTestPlanById(testPlanId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System finds test suites related to the test plan  <br>System returns test suites as a tree model (listed in response example)
     * @summary Get TestSuites Tree By Id
     * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestPlansApi
     */
    TestPlansApi.prototype.getTestSuitesById = function (testPlanId, options) {
        var _this = this;
        return (0, exports.TestPlansApiFp)(this.configuration).getTestSuitesById(testPlanId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System pauses the test plan and updates test plan status  <br>System returns no content response
     * @summary Pause TestPlan
     * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestPlansApi
     */
    TestPlansApi.prototype.pause = function (testPlanId, options) {
        var _this = this;
        return (0, exports.TestPlansApiFp)(this.configuration).pause(testPlanId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System restores test plan  <br>System returns no content response
     * @summary Restore TestPlan
     * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestPlansApi
     */
    TestPlansApi.prototype.restoreTestPlan = function (testPlanId, options) {
        var _this = this;
        return (0, exports.TestPlansApiFp)(this.configuration).restoreTestPlan(testPlanId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test plan identifier  <br>User runs method execution  <br>System starts the test plan and updates test plan status  <br>System returns no content response
     * @summary Start TestPlan
     * @param {string} testPlanId Test plan internal (guid format) or global (int  format) identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestPlansApi
     */
    TestPlansApi.prototype.start = function (testPlanId, options) {
        var _this = this;
        return (0, exports.TestPlansApiFp)(this.configuration).start(testPlanId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test plan properties(listed in request example)  <br>User runs method execution  <br>System updates test plan  <br>System returns no content response
     * @summary Update TestPlan
     * @param {TestPlanPutModel} [testPlanPutModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestPlansApi
     */
    TestPlansApi.prototype.updateTestPlan = function (testPlanPutModel, options) {
        var _this = this;
        return (0, exports.TestPlansApiFp)(this.configuration).updateTestPlan(testPlanPutModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TestPlansApi;
}(base_1.BaseAPI));
exports.TestPlansApi = TestPlansApi;
/**
 * TestResultsApi - axios parameter creator
 * @export
 */
var TestResultsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * <br>Use case  <br>User sets testResultId  <br>User attaches a file  <br>System creates attachment and links it to the test result  <br>System returns attachment identifier
         * @summary Upload and link attachment to TestResult
         * @param {string} testResultId Test result internal identifier (guid format)
         * @param {File} [file] Select file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttachment: function (testResultId, file, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testResultId' is not null or undefined
                            (0, common_1.assertParamExists)('createAttachment', 'testResultId', testResultId);
                            localVarPath = "/api/v2/testResults/{testResultId}/attachments"
                                .replace("{".concat("testResultId", "}"), encodeURIComponent(String(testResultId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (file !== undefined) {
                                localVarFormParams.append('file', file);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets testResultId and attachmentId  <br>User attaches a file  <br>User runs method execution  <br>System deletes attachment and unlinks it from the test result  <br>System returns attachment identifier
         * @summary Remove attachment and unlink from TestResult
         * @param {string} testResultId Test result internal identifier (guid format)
         * @param {string} attachmentId Attachment internal identifier (guid format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttachment: function (testResultId, attachmentId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testResultId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteAttachment', 'testResultId', testResultId);
                            // verify required parameter 'attachmentId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteAttachment', 'attachmentId', attachmentId);
                            localVarPath = "/api/v2/testResults/{testResultId}/attachments/{attachmentId}"
                                .replace("{".concat("testResultId", "}"), encodeURIComponent(String(testResultId)))
                                .replace("{".concat("attachmentId", "}"), encodeURIComponent(String(attachmentId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets attachmentId and testResultId  <br>[Optional] User sets resize configuration  <br>User runs method execution  <br>System search attachments by the attachmentId and the testResultId  <br>                      [Optional] If resize configuration is set, System resizes the attachment according to the resize                      configuration                    <br>[Optional] Otherwise, System does not resize the attachment  <br>System returns attachment as a file
         * @summary Get attachment of TestResult
         * @param {string} attachmentId Attachment internal identifier (guid format)
         * @param {string} testResultId Test result internal identifier (guid format)
         * @param {number} [width]
         * @param {number} [height]
         * @param {ImageResizeOption} [resizeOption]
         * @param {string} [backgroundColor]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAttachment: function (attachmentId, testResultId, width, height, resizeOption, backgroundColor, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'attachmentId' is not null or undefined
                            (0, common_1.assertParamExists)('downloadAttachment', 'attachmentId', attachmentId);
                            // verify required parameter 'testResultId' is not null or undefined
                            (0, common_1.assertParamExists)('downloadAttachment', 'testResultId', testResultId);
                            localVarPath = "/api/v2/testResults/{testResultId}/attachments/{attachmentId}"
                                .replace("{".concat("attachmentId", "}"), encodeURIComponent(String(attachmentId)))
                                .replace("{".concat("testResultId", "}"), encodeURIComponent(String(testResultId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (width !== undefined) {
                                localVarQueryParameter['Width'] = width;
                            }
                            if (height !== undefined) {
                                localVarQueryParameter['Height'] = height;
                            }
                            if (resizeOption !== undefined) {
                                localVarQueryParameter['ResizeOption'] = resizeOption;
                            }
                            if (backgroundColor !== undefined) {
                                localVarQueryParameter['BackgroundColor'] = backgroundColor;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets attachmentId and testResultId  <br>User runs method execution  <br>System search attachment by the attachmentId and the testResultId  <br>System returns attachment data
         * @summary Get Metadata of TestResult\'s attachment
         * @param {string} attachmentId Attachment internal identifier (guid format)
         * @param {string} testResultId Test result internal identifier (guid format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachment: function (attachmentId, testResultId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'attachmentId' is not null or undefined
                            (0, common_1.assertParamExists)('getAttachment', 'attachmentId', attachmentId);
                            // verify required parameter 'testResultId' is not null or undefined
                            (0, common_1.assertParamExists)('getAttachment', 'testResultId', testResultId);
                            localVarPath = "/api/v2/testResults/{testResultId}/attachments/{attachmentId}/info"
                                .replace("{".concat("attachmentId", "}"), encodeURIComponent(String(attachmentId)))
                                .replace("{".concat("testResultId", "}"), encodeURIComponent(String(testResultId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets testResultId  <br>User runs method execution  <br>System search all attachments of the test result  <br>System returns attachments enumeration
         * @summary Get all attachments of TestResult
         * @param {string} testResultId Test result internal identifier (guid format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachments: function (testResultId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testResultId' is not null or undefined
                            (0, common_1.assertParamExists)('getAttachments', 'testResultId', testResultId);
                            localVarPath = "/api/v2/testResults/{testResultId}/attachments"
                                .replace("{".concat("testResultId", "}"), encodeURIComponent(String(testResultId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Set result for AutoTest (Obsolete).  The new endpoint is [POST]/api/v2/testRuns/{testRunId}/testResults
         * @param {AutoTestResultPostModel} [autoTestResultPostModel]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        setAutoTestResults: function (autoTestResultPostModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/testResults";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(autoTestResultPostModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.TestResultsApiAxiosParamCreator = TestResultsApiAxiosParamCreator;
/**
 * TestResultsApi - functional programming interface
 * @export
 */
var TestResultsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TestResultsApiAxiosParamCreator)(configuration);
    return {
        /**
         * <br>Use case  <br>User sets testResultId  <br>User attaches a file  <br>System creates attachment and links it to the test result  <br>System returns attachment identifier
         * @summary Upload and link attachment to TestResult
         * @param {string} testResultId Test result internal identifier (guid format)
         * @param {File} [file] Select file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttachment: function (testResultId, file, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createAttachment(testResultId, file, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets testResultId and attachmentId  <br>User attaches a file  <br>User runs method execution  <br>System deletes attachment and unlinks it from the test result  <br>System returns attachment identifier
         * @summary Remove attachment and unlink from TestResult
         * @param {string} testResultId Test result internal identifier (guid format)
         * @param {string} attachmentId Attachment internal identifier (guid format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttachment: function (testResultId, attachmentId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteAttachment(testResultId, attachmentId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets attachmentId and testResultId  <br>[Optional] User sets resize configuration  <br>User runs method execution  <br>System search attachments by the attachmentId and the testResultId  <br>                      [Optional] If resize configuration is set, System resizes the attachment according to the resize                      configuration                    <br>[Optional] Otherwise, System does not resize the attachment  <br>System returns attachment as a file
         * @summary Get attachment of TestResult
         * @param {string} attachmentId Attachment internal identifier (guid format)
         * @param {string} testResultId Test result internal identifier (guid format)
         * @param {number} [width]
         * @param {number} [height]
         * @param {ImageResizeOption} [resizeOption]
         * @param {string} [backgroundColor]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAttachment: function (attachmentId, testResultId, width, height, resizeOption, backgroundColor, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.downloadAttachment(attachmentId, testResultId, width, height, resizeOption, backgroundColor, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets attachmentId and testResultId  <br>User runs method execution  <br>System search attachment by the attachmentId and the testResultId  <br>System returns attachment data
         * @summary Get Metadata of TestResult\'s attachment
         * @param {string} attachmentId Attachment internal identifier (guid format)
         * @param {string} testResultId Test result internal identifier (guid format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachment: function (attachmentId, testResultId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAttachment(attachmentId, testResultId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets testResultId  <br>User runs method execution  <br>System search all attachments of the test result  <br>System returns attachments enumeration
         * @summary Get all attachments of TestResult
         * @param {string} testResultId Test result internal identifier (guid format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachments: function (testResultId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAttachments(testResultId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Set result for AutoTest (Obsolete).  The new endpoint is [POST]/api/v2/testRuns/{testRunId}/testResults
         * @param {AutoTestResultPostModel} [autoTestResultPostModel]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        setAutoTestResults: function (autoTestResultPostModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setAutoTestResults(autoTestResultPostModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.TestResultsApiFp = TestResultsApiFp;
/**
 * TestResultsApi - factory interface
 * @export
 */
var TestResultsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TestResultsApiFp)(configuration);
    return {
        /**
         * <br>Use case  <br>User sets testResultId  <br>User attaches a file  <br>System creates attachment and links it to the test result  <br>System returns attachment identifier
         * @summary Upload and link attachment to TestResult
         * @param {string} testResultId Test result internal identifier (guid format)
         * @param {File} [file] Select file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttachment: function (testResultId, file, options) {
            return localVarFp.createAttachment(testResultId, file, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets testResultId and attachmentId  <br>User attaches a file  <br>User runs method execution  <br>System deletes attachment and unlinks it from the test result  <br>System returns attachment identifier
         * @summary Remove attachment and unlink from TestResult
         * @param {string} testResultId Test result internal identifier (guid format)
         * @param {string} attachmentId Attachment internal identifier (guid format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttachment: function (testResultId, attachmentId, options) {
            return localVarFp.deleteAttachment(testResultId, attachmentId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets attachmentId and testResultId  <br>[Optional] User sets resize configuration  <br>User runs method execution  <br>System search attachments by the attachmentId and the testResultId  <br>                      [Optional] If resize configuration is set, System resizes the attachment according to the resize                      configuration                    <br>[Optional] Otherwise, System does not resize the attachment  <br>System returns attachment as a file
         * @summary Get attachment of TestResult
         * @param {string} attachmentId Attachment internal identifier (guid format)
         * @param {string} testResultId Test result internal identifier (guid format)
         * @param {number} [width]
         * @param {number} [height]
         * @param {ImageResizeOption} [resizeOption]
         * @param {string} [backgroundColor]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadAttachment: function (attachmentId, testResultId, width, height, resizeOption, backgroundColor, options) {
            return localVarFp.downloadAttachment(attachmentId, testResultId, width, height, resizeOption, backgroundColor, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets attachmentId and testResultId  <br>User runs method execution  <br>System search attachment by the attachmentId and the testResultId  <br>System returns attachment data
         * @summary Get Metadata of TestResult\'s attachment
         * @param {string} attachmentId Attachment internal identifier (guid format)
         * @param {string} testResultId Test result internal identifier (guid format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachment: function (attachmentId, testResultId, options) {
            return localVarFp.getAttachment(attachmentId, testResultId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets testResultId  <br>User runs method execution  <br>System search all attachments of the test result  <br>System returns attachments enumeration
         * @summary Get all attachments of TestResult
         * @param {string} testResultId Test result internal identifier (guid format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachments: function (testResultId, options) {
            return localVarFp.getAttachments(testResultId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Set result for AutoTest (Obsolete).  The new endpoint is [POST]/api/v2/testRuns/{testRunId}/testResults
         * @param {AutoTestResultPostModel} [autoTestResultPostModel]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        setAutoTestResults: function (autoTestResultPostModel, options) {
            return localVarFp.setAutoTestResults(autoTestResultPostModel, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TestResultsApiFactory = TestResultsApiFactory;
/**
 * TestResultsApi - object-oriented interface
 * @export
 * @class TestResultsApi
 * @extends {BaseAPI}
 */
var TestResultsApi = /** @class */ (function (_super) {
    __extends(TestResultsApi, _super);
    function TestResultsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * <br>Use case  <br>User sets testResultId  <br>User attaches a file  <br>System creates attachment and links it to the test result  <br>System returns attachment identifier
     * @summary Upload and link attachment to TestResult
     * @param {string} testResultId Test result internal identifier (guid format)
     * @param {File} [file] Select file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestResultsApi
     */
    TestResultsApi.prototype.createAttachment = function (testResultId, file, options) {
        var _this = this;
        return (0, exports.TestResultsApiFp)(this.configuration).createAttachment(testResultId, file, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets testResultId and attachmentId  <br>User attaches a file  <br>User runs method execution  <br>System deletes attachment and unlinks it from the test result  <br>System returns attachment identifier
     * @summary Remove attachment and unlink from TestResult
     * @param {string} testResultId Test result internal identifier (guid format)
     * @param {string} attachmentId Attachment internal identifier (guid format)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestResultsApi
     */
    TestResultsApi.prototype.deleteAttachment = function (testResultId, attachmentId, options) {
        var _this = this;
        return (0, exports.TestResultsApiFp)(this.configuration).deleteAttachment(testResultId, attachmentId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets attachmentId and testResultId  <br>[Optional] User sets resize configuration  <br>User runs method execution  <br>System search attachments by the attachmentId and the testResultId  <br>                      [Optional] If resize configuration is set, System resizes the attachment according to the resize                      configuration                    <br>[Optional] Otherwise, System does not resize the attachment  <br>System returns attachment as a file
     * @summary Get attachment of TestResult
     * @param {string} attachmentId Attachment internal identifier (guid format)
     * @param {string} testResultId Test result internal identifier (guid format)
     * @param {number} [width]
     * @param {number} [height]
     * @param {ImageResizeOption} [resizeOption]
     * @param {string} [backgroundColor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestResultsApi
     */
    TestResultsApi.prototype.downloadAttachment = function (attachmentId, testResultId, width, height, resizeOption, backgroundColor, options) {
        var _this = this;
        return (0, exports.TestResultsApiFp)(this.configuration).downloadAttachment(attachmentId, testResultId, width, height, resizeOption, backgroundColor, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets attachmentId and testResultId  <br>User runs method execution  <br>System search attachment by the attachmentId and the testResultId  <br>System returns attachment data
     * @summary Get Metadata of TestResult\'s attachment
     * @param {string} attachmentId Attachment internal identifier (guid format)
     * @param {string} testResultId Test result internal identifier (guid format)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestResultsApi
     */
    TestResultsApi.prototype.getAttachment = function (attachmentId, testResultId, options) {
        var _this = this;
        return (0, exports.TestResultsApiFp)(this.configuration).getAttachment(attachmentId, testResultId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets testResultId  <br>User runs method execution  <br>System search all attachments of the test result  <br>System returns attachments enumeration
     * @summary Get all attachments of TestResult
     * @param {string} testResultId Test result internal identifier (guid format)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestResultsApi
     */
    TestResultsApi.prototype.getAttachments = function (testResultId, options) {
        var _this = this;
        return (0, exports.TestResultsApiFp)(this.configuration).getAttachments(testResultId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Set result for AutoTest (Obsolete).  The new endpoint is [POST]/api/v2/testRuns/{testRunId}/testResults
     * @param {AutoTestResultPostModel} [autoTestResultPostModel]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof TestResultsApi
     */
    TestResultsApi.prototype.setAutoTestResults = function (autoTestResultPostModel, options) {
        var _this = this;
        return (0, exports.TestResultsApiFp)(this.configuration).setAutoTestResults(autoTestResultPostModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TestResultsApi;
}(base_1.BaseAPI));
exports.TestResultsApi = TestResultsApi;
/**
 * TestRunsApi - axios parameter creator
 * @export
 */
var TestRunsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * <br>Use case  <br>User sets test run identifier  <br>User runs method execution  <br>System completes test run  <br>System returns no content response
         * @summary Complete TestRun
         * @param {string} testRunId Test Run internal identifier (GUID format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeTestRun: function (testRunId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testRunId' is not null or undefined
                            (0, common_1.assertParamExists)('completeTestRun', 'testRunId', testRunId);
                            localVarPath = "/api/v2/testRuns/{testRunId}/complete"
                                .replace("{".concat("testRunId", "}"), encodeURIComponent(String(testRunId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test run properties (listed in the request example)  <br>User sets relative configuration and workitem ids  <br>User runs method execution  <br>System creates test run  <br>System finds autotests and configurations using ids listed by user  <br>System creates test result by test points which use autotests and configurations  <br>System returns test run model
         * @summary Create TestRun without TestPoints using ConfigurationIds and AutoTestIds
         * @param {TestRunFillByAutoTestsPostModel} [testRunFillByAutoTestsPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndFillByAutoTests: function (testRunFillByAutoTestsPostModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/testRuns/byAutoTests";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(testRunFillByAutoTestsPostModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test run properties (listed in the request example)  <br>User sets relative configuration and workitem ids  <br>User runs method execution  <br>System creates test run  <br>System finds workitems and configurations using ids listed by user  <br>System creates test result by test points which use workitems and configurations  <br>System returns test run model
         * @summary Create TestRun with TestPointSelectors based on ConfigurationId and WorkItem Ids
         * @param {TestRunFillByConfigurationsPostModel} [testRunFillByConfigurationsPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndFillByConfigurations: function (testRunFillByConfigurationsPostModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/testRuns/byConfigurations";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(testRunFillByConfigurationsPostModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test run properties (listed in the request example)  <br>User sets relative configuration and workitem ids  <br>User runs method execution  <br>System creates test run  <br>System finds workitems and configurations using ids listed by user  <br>System creates test result by test points which use workitems and configurations  <br>System returns test run model
         * @summary Create TestRun with TestPoints selected using ConfigurationIds and WorkItem Ids
         * @param {TestRunFillByWorkItemsPostModel} [testRunFillByWorkItemsPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndFillByWorkItems: function (testRunFillByWorkItemsPostModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/testRuns/byWorkItems";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(testRunFillByWorkItemsPostModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test run model (listed in the request example)  <br>User runs method execution  <br>System creates test run  <br>System returns test run model
         * @summary Create empty TestRun
         * @param {TestRunV2PostShortModel} [testRunV2PostShortModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmpty: function (testRunV2PostShortModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/testRuns";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(testRunV2PostShortModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test run identifier  <br>User runs method execution  <br>System finds test run  <br>System returns test run
         * @summary Get TestRun by Id
         * @param {string} testRunId Test Run internal identifier (GUID format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestRunById: function (testRunId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testRunId' is not null or undefined
                            (0, common_1.assertParamExists)('getTestRunById', 'testRunId', testRunId);
                            localVarPath = "/api/v2/testRuns/{testRunId}"
                                .replace("{".concat("testRunId", "}"), encodeURIComponent(String(testRunId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test run identifier  <br>User sets test result model (listed in request parameters)   <br>User runs method execution  <br>System sets test results of autotest listed in request in test run  <br>System returns array of test results identifiers
         * @summary Set AutoTest Results For TestRun
         * @param {string} testRunId Test Run internal identifier (GUID format)
         * @param {Array<AutoTestResultsForTestRunModel>} [autoTestResultsForTestRunModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAutoTestResultsForTestRun: function (testRunId, autoTestResultsForTestRunModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testRunId' is not null or undefined
                            (0, common_1.assertParamExists)('setAutoTestResultsForTestRun', 'testRunId', testRunId);
                            localVarPath = "/api/v2/testRuns/{testRunId}/testResults"
                                .replace("{".concat("testRunId", "}"), encodeURIComponent(String(testRunId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(autoTestResultsForTestRunModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test run identifier  <br>User runs method execution  <br>System starts test run  <br>System returns no content response
         * @summary Start TestRun
         * @param {string} testRunId Test Run internal identifier (GUID format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startTestRun: function (testRunId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testRunId' is not null or undefined
                            (0, common_1.assertParamExists)('startTestRun', 'testRunId', testRunId);
                            localVarPath = "/api/v2/testRuns/{testRunId}/start"
                                .replace("{".concat("testRunId", "}"), encodeURIComponent(String(testRunId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test run identifier  <br>User runs method execution  <br>System stops test run  <br>System returns no content response
         * @summary Stop TestRun
         * @param {string} testRunId Test Run internal identifier (GUID format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopTestRun: function (testRunId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testRunId' is not null or undefined
                            (0, common_1.assertParamExists)('stopTestRun', 'testRunId', testRunId);
                            localVarPath = "/api/v2/testRuns/{testRunId}/stop"
                                .replace("{".concat("testRunId", "}"), encodeURIComponent(String(testRunId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test run properties (listed in the request example)  <br>User runs method execution  <br>System updates test run  <br>System returns returns no content response
         * @summary Update empty TestRun
         * @param {TestRunV2PutModel} [testRunV2PutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmpty: function (testRunV2PutModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/testRuns";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(testRunV2PutModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.TestRunsApiAxiosParamCreator = TestRunsApiAxiosParamCreator;
/**
 * TestRunsApi - functional programming interface
 * @export
 */
var TestRunsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TestRunsApiAxiosParamCreator)(configuration);
    return {
        /**
         * <br>Use case  <br>User sets test run identifier  <br>User runs method execution  <br>System completes test run  <br>System returns no content response
         * @summary Complete TestRun
         * @param {string} testRunId Test Run internal identifier (GUID format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeTestRun: function (testRunId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.completeTestRun(testRunId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test run properties (listed in the request example)  <br>User sets relative configuration and workitem ids  <br>User runs method execution  <br>System creates test run  <br>System finds autotests and configurations using ids listed by user  <br>System creates test result by test points which use autotests and configurations  <br>System returns test run model
         * @summary Create TestRun without TestPoints using ConfigurationIds and AutoTestIds
         * @param {TestRunFillByAutoTestsPostModel} [testRunFillByAutoTestsPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndFillByAutoTests: function (testRunFillByAutoTestsPostModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createAndFillByAutoTests(testRunFillByAutoTestsPostModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test run properties (listed in the request example)  <br>User sets relative configuration and workitem ids  <br>User runs method execution  <br>System creates test run  <br>System finds workitems and configurations using ids listed by user  <br>System creates test result by test points which use workitems and configurations  <br>System returns test run model
         * @summary Create TestRun with TestPointSelectors based on ConfigurationId and WorkItem Ids
         * @param {TestRunFillByConfigurationsPostModel} [testRunFillByConfigurationsPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndFillByConfigurations: function (testRunFillByConfigurationsPostModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createAndFillByConfigurations(testRunFillByConfigurationsPostModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test run properties (listed in the request example)  <br>User sets relative configuration and workitem ids  <br>User runs method execution  <br>System creates test run  <br>System finds workitems and configurations using ids listed by user  <br>System creates test result by test points which use workitems and configurations  <br>System returns test run model
         * @summary Create TestRun with TestPoints selected using ConfigurationIds and WorkItem Ids
         * @param {TestRunFillByWorkItemsPostModel} [testRunFillByWorkItemsPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndFillByWorkItems: function (testRunFillByWorkItemsPostModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createAndFillByWorkItems(testRunFillByWorkItemsPostModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test run model (listed in the request example)  <br>User runs method execution  <br>System creates test run  <br>System returns test run model
         * @summary Create empty TestRun
         * @param {TestRunV2PostShortModel} [testRunV2PostShortModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmpty: function (testRunV2PostShortModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createEmpty(testRunV2PostShortModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test run identifier  <br>User runs method execution  <br>System finds test run  <br>System returns test run
         * @summary Get TestRun by Id
         * @param {string} testRunId Test Run internal identifier (GUID format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestRunById: function (testRunId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTestRunById(testRunId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test run identifier  <br>User sets test result model (listed in request parameters)   <br>User runs method execution  <br>System sets test results of autotest listed in request in test run  <br>System returns array of test results identifiers
         * @summary Set AutoTest Results For TestRun
         * @param {string} testRunId Test Run internal identifier (GUID format)
         * @param {Array<AutoTestResultsForTestRunModel>} [autoTestResultsForTestRunModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAutoTestResultsForTestRun: function (testRunId, autoTestResultsForTestRunModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setAutoTestResultsForTestRun(testRunId, autoTestResultsForTestRunModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test run identifier  <br>User runs method execution  <br>System starts test run  <br>System returns no content response
         * @summary Start TestRun
         * @param {string} testRunId Test Run internal identifier (GUID format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startTestRun: function (testRunId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.startTestRun(testRunId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test run identifier  <br>User runs method execution  <br>System stops test run  <br>System returns no content response
         * @summary Stop TestRun
         * @param {string} testRunId Test Run internal identifier (GUID format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopTestRun: function (testRunId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stopTestRun(testRunId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test run properties (listed in the request example)  <br>User runs method execution  <br>System updates test run  <br>System returns returns no content response
         * @summary Update empty TestRun
         * @param {TestRunV2PutModel} [testRunV2PutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmpty: function (testRunV2PutModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateEmpty(testRunV2PutModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.TestRunsApiFp = TestRunsApiFp;
/**
 * TestRunsApi - factory interface
 * @export
 */
var TestRunsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TestRunsApiFp)(configuration);
    return {
        /**
         * <br>Use case  <br>User sets test run identifier  <br>User runs method execution  <br>System completes test run  <br>System returns no content response
         * @summary Complete TestRun
         * @param {string} testRunId Test Run internal identifier (GUID format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeTestRun: function (testRunId, options) {
            return localVarFp.completeTestRun(testRunId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test run properties (listed in the request example)  <br>User sets relative configuration and workitem ids  <br>User runs method execution  <br>System creates test run  <br>System finds autotests and configurations using ids listed by user  <br>System creates test result by test points which use autotests and configurations  <br>System returns test run model
         * @summary Create TestRun without TestPoints using ConfigurationIds and AutoTestIds
         * @param {TestRunFillByAutoTestsPostModel} [testRunFillByAutoTestsPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndFillByAutoTests: function (testRunFillByAutoTestsPostModel, options) {
            return localVarFp.createAndFillByAutoTests(testRunFillByAutoTestsPostModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test run properties (listed in the request example)  <br>User sets relative configuration and workitem ids  <br>User runs method execution  <br>System creates test run  <br>System finds workitems and configurations using ids listed by user  <br>System creates test result by test points which use workitems and configurations  <br>System returns test run model
         * @summary Create TestRun with TestPointSelectors based on ConfigurationId and WorkItem Ids
         * @param {TestRunFillByConfigurationsPostModel} [testRunFillByConfigurationsPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndFillByConfigurations: function (testRunFillByConfigurationsPostModel, options) {
            return localVarFp.createAndFillByConfigurations(testRunFillByConfigurationsPostModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test run properties (listed in the request example)  <br>User sets relative configuration and workitem ids  <br>User runs method execution  <br>System creates test run  <br>System finds workitems and configurations using ids listed by user  <br>System creates test result by test points which use workitems and configurations  <br>System returns test run model
         * @summary Create TestRun with TestPoints selected using ConfigurationIds and WorkItem Ids
         * @param {TestRunFillByWorkItemsPostModel} [testRunFillByWorkItemsPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAndFillByWorkItems: function (testRunFillByWorkItemsPostModel, options) {
            return localVarFp.createAndFillByWorkItems(testRunFillByWorkItemsPostModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test run model (listed in the request example)  <br>User runs method execution  <br>System creates test run  <br>System returns test run model
         * @summary Create empty TestRun
         * @param {TestRunV2PostShortModel} [testRunV2PostShortModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmpty: function (testRunV2PostShortModel, options) {
            return localVarFp.createEmpty(testRunV2PostShortModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test run identifier  <br>User runs method execution  <br>System finds test run  <br>System returns test run
         * @summary Get TestRun by Id
         * @param {string} testRunId Test Run internal identifier (GUID format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestRunById: function (testRunId, options) {
            return localVarFp.getTestRunById(testRunId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test run identifier  <br>User sets test result model (listed in request parameters)   <br>User runs method execution  <br>System sets test results of autotest listed in request in test run  <br>System returns array of test results identifiers
         * @summary Set AutoTest Results For TestRun
         * @param {string} testRunId Test Run internal identifier (GUID format)
         * @param {Array<AutoTestResultsForTestRunModel>} [autoTestResultsForTestRunModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAutoTestResultsForTestRun: function (testRunId, autoTestResultsForTestRunModel, options) {
            return localVarFp.setAutoTestResultsForTestRun(testRunId, autoTestResultsForTestRunModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test run identifier  <br>User runs method execution  <br>System starts test run  <br>System returns no content response
         * @summary Start TestRun
         * @param {string} testRunId Test Run internal identifier (GUID format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startTestRun: function (testRunId, options) {
            return localVarFp.startTestRun(testRunId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test run identifier  <br>User runs method execution  <br>System stops test run  <br>System returns no content response
         * @summary Stop TestRun
         * @param {string} testRunId Test Run internal identifier (GUID format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopTestRun: function (testRunId, options) {
            return localVarFp.stopTestRun(testRunId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test run properties (listed in the request example)  <br>User runs method execution  <br>System updates test run  <br>System returns returns no content response
         * @summary Update empty TestRun
         * @param {TestRunV2PutModel} [testRunV2PutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmpty: function (testRunV2PutModel, options) {
            return localVarFp.updateEmpty(testRunV2PutModel, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TestRunsApiFactory = TestRunsApiFactory;
/**
 * TestRunsApi - object-oriented interface
 * @export
 * @class TestRunsApi
 * @extends {BaseAPI}
 */
var TestRunsApi = /** @class */ (function (_super) {
    __extends(TestRunsApi, _super);
    function TestRunsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * <br>Use case  <br>User sets test run identifier  <br>User runs method execution  <br>System completes test run  <br>System returns no content response
     * @summary Complete TestRun
     * @param {string} testRunId Test Run internal identifier (GUID format)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestRunsApi
     */
    TestRunsApi.prototype.completeTestRun = function (testRunId, options) {
        var _this = this;
        return (0, exports.TestRunsApiFp)(this.configuration).completeTestRun(testRunId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test run properties (listed in the request example)  <br>User sets relative configuration and workitem ids  <br>User runs method execution  <br>System creates test run  <br>System finds autotests and configurations using ids listed by user  <br>System creates test result by test points which use autotests and configurations  <br>System returns test run model
     * @summary Create TestRun without TestPoints using ConfigurationIds and AutoTestIds
     * @param {TestRunFillByAutoTestsPostModel} [testRunFillByAutoTestsPostModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestRunsApi
     */
    TestRunsApi.prototype.createAndFillByAutoTests = function (testRunFillByAutoTestsPostModel, options) {
        var _this = this;
        return (0, exports.TestRunsApiFp)(this.configuration).createAndFillByAutoTests(testRunFillByAutoTestsPostModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test run properties (listed in the request example)  <br>User sets relative configuration and workitem ids  <br>User runs method execution  <br>System creates test run  <br>System finds workitems and configurations using ids listed by user  <br>System creates test result by test points which use workitems and configurations  <br>System returns test run model
     * @summary Create TestRun with TestPointSelectors based on ConfigurationId and WorkItem Ids
     * @param {TestRunFillByConfigurationsPostModel} [testRunFillByConfigurationsPostModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestRunsApi
     */
    TestRunsApi.prototype.createAndFillByConfigurations = function (testRunFillByConfigurationsPostModel, options) {
        var _this = this;
        return (0, exports.TestRunsApiFp)(this.configuration).createAndFillByConfigurations(testRunFillByConfigurationsPostModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test run properties (listed in the request example)  <br>User sets relative configuration and workitem ids  <br>User runs method execution  <br>System creates test run  <br>System finds workitems and configurations using ids listed by user  <br>System creates test result by test points which use workitems and configurations  <br>System returns test run model
     * @summary Create TestRun with TestPoints selected using ConfigurationIds and WorkItem Ids
     * @param {TestRunFillByWorkItemsPostModel} [testRunFillByWorkItemsPostModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestRunsApi
     */
    TestRunsApi.prototype.createAndFillByWorkItems = function (testRunFillByWorkItemsPostModel, options) {
        var _this = this;
        return (0, exports.TestRunsApiFp)(this.configuration).createAndFillByWorkItems(testRunFillByWorkItemsPostModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test run model (listed in the request example)  <br>User runs method execution  <br>System creates test run  <br>System returns test run model
     * @summary Create empty TestRun
     * @param {TestRunV2PostShortModel} [testRunV2PostShortModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestRunsApi
     */
    TestRunsApi.prototype.createEmpty = function (testRunV2PostShortModel, options) {
        var _this = this;
        return (0, exports.TestRunsApiFp)(this.configuration).createEmpty(testRunV2PostShortModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test run identifier  <br>User runs method execution  <br>System finds test run  <br>System returns test run
     * @summary Get TestRun by Id
     * @param {string} testRunId Test Run internal identifier (GUID format)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestRunsApi
     */
    TestRunsApi.prototype.getTestRunById = function (testRunId, options) {
        var _this = this;
        return (0, exports.TestRunsApiFp)(this.configuration).getTestRunById(testRunId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test run identifier  <br>User sets test result model (listed in request parameters)   <br>User runs method execution  <br>System sets test results of autotest listed in request in test run  <br>System returns array of test results identifiers
     * @summary Set AutoTest Results For TestRun
     * @param {string} testRunId Test Run internal identifier (GUID format)
     * @param {Array<AutoTestResultsForTestRunModel>} [autoTestResultsForTestRunModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestRunsApi
     */
    TestRunsApi.prototype.setAutoTestResultsForTestRun = function (testRunId, autoTestResultsForTestRunModel, options) {
        var _this = this;
        return (0, exports.TestRunsApiFp)(this.configuration).setAutoTestResultsForTestRun(testRunId, autoTestResultsForTestRunModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test run identifier  <br>User runs method execution  <br>System starts test run  <br>System returns no content response
     * @summary Start TestRun
     * @param {string} testRunId Test Run internal identifier (GUID format)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestRunsApi
     */
    TestRunsApi.prototype.startTestRun = function (testRunId, options) {
        var _this = this;
        return (0, exports.TestRunsApiFp)(this.configuration).startTestRun(testRunId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test run identifier  <br>User runs method execution  <br>System stops test run  <br>System returns no content response
     * @summary Stop TestRun
     * @param {string} testRunId Test Run internal identifier (GUID format)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestRunsApi
     */
    TestRunsApi.prototype.stopTestRun = function (testRunId, options) {
        var _this = this;
        return (0, exports.TestRunsApiFp)(this.configuration).stopTestRun(testRunId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test run properties (listed in the request example)  <br>User runs method execution  <br>System updates test run  <br>System returns returns no content response
     * @summary Update empty TestRun
     * @param {TestRunV2PutModel} [testRunV2PutModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestRunsApi
     */
    TestRunsApi.prototype.updateEmpty = function (testRunV2PutModel, options) {
        var _this = this;
        return (0, exports.TestRunsApiFp)(this.configuration).updateEmpty(testRunV2PutModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TestRunsApi;
}(base_1.BaseAPI));
exports.TestRunsApi = TestRunsApi;
/**
 * TestSuitesApi - axios parameter creator
 * @export
 */
var TestSuitesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add test-points to test suite
         * @param {string} testSuiteId Test suite internal identifier
         * @param {WorkItemSelectModel} [workItemSelectModel] Filter object to retrieve work items for test-suite\&#39;s project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTestPointsToTestSuite: function (testSuiteId, workItemSelectModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testSuiteId' is not null or undefined
                            (0, common_1.assertParamExists)('addTestPointsToTestSuite', 'testSuiteId', testSuiteId);
                            localVarPath = "/api/v2/testSuites/{testSuiteId}/test-points"
                                .replace("{".concat("testSuiteId", "}"), encodeURIComponent(String(testSuiteId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(workItemSelectModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test suite model (listed in request parameters)  <br>User runs method execution  <br>System creates test suite  <br>System returns test suite
         * @summary Create TestSuite
         * @param {TestSuiteV2PostModel} [testSuiteV2PostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestSuite: function (testSuiteV2PostModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/testSuites";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(testSuiteV2PostModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System deletes test suite  <br>System returns no content response
         * @summary Delete TestSuite
         * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTestSuite: function (testSuiteId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testSuiteId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteTestSuite', 'testSuiteId', testSuiteId);
                            localVarPath = "/api/v2/testSuites/{testSuiteId}"
                                .replace("{".concat("testSuiteId", "}"), encodeURIComponent(String(testSuiteId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search configurations related to the test points  <br>System returns configurations array
         * @summary Get Configurations By Id
         * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurationsByTestSuiteId: function (testSuiteId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testSuiteId' is not null or undefined
                            (0, common_1.assertParamExists)('getConfigurationsByTestSuiteId', 'testSuiteId', testSuiteId);
                            localVarPath = "/api/v2/testSuites/{testSuiteId}/configurations"
                                .replace("{".concat("testSuiteId", "}"), encodeURIComponent(String(testSuiteId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System returns test points array
         * @summary Get TestPoints By Id
         * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestPointsById: function (testSuiteId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testSuiteId' is not null or undefined
                            (0, common_1.assertParamExists)('getTestPointsById', 'testSuiteId', testSuiteId);
                            localVarPath = "/api/v2/testSuites/{testSuiteId}/testPoints"
                                .replace("{".concat("testSuiteId", "}"), encodeURIComponent(String(testSuiteId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search test results related to the test points  <br>System returns test results array
         * @summary Get TestResults By Id
         * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestResultsById: function (testSuiteId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testSuiteId' is not null or undefined
                            (0, common_1.assertParamExists)('getTestResultsById', 'testSuiteId', testSuiteId);
                            localVarPath = "/api/v2/testSuites/{testSuiteId}/testResults"
                                .replace("{".concat("testSuiteId", "}"), encodeURIComponent(String(testSuiteId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System returns test suite
         * @summary Get TestSuite by Id
         * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestSuiteById: function (testSuiteId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testSuiteId' is not null or undefined
                            (0, common_1.assertParamExists)('getTestSuiteById', 'testSuiteId', testSuiteId);
                            localVarPath = "/api/v2/testSuites/{testSuiteId}"
                                .replace("{".concat("testSuiteId", "}"), encodeURIComponent(String(testSuiteId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test suite identifier  <br>[Optional] User sets isDeleted property as true  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search workitems related to the test points  <br>                      [Optional] User sets isDeleted property is set as true, System includes deleted workitems                      Otherwise, system applies filter which excludes deleted workitems from all found workitems                    <br>System returns workitems array
         * @summary Get WorkItems By Id
         * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
         * @param {boolean} [isDeleted] Flag that defines if deleted workitems must be include in the response
         * @param {Array<string>} [tagNames] Array of workitem tag names
         * @param {number} [skip] Amount of items to be skipped (offset)
         * @param {number} [take] Amount of items to be taken (limit)
         * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {string} [searchField] Property name for searching
         * @param {string} [searchValue] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemsById: function (testSuiteId, isDeleted, tagNames, skip, take, orderBy, searchField, searchValue, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testSuiteId' is not null or undefined
                            (0, common_1.assertParamExists)('getWorkItemsById', 'testSuiteId', testSuiteId);
                            localVarPath = "/api/v2/testSuites/{testSuiteId}/workItems"
                                .replace("{".concat("testSuiteId", "}"), encodeURIComponent(String(testSuiteId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (isDeleted !== undefined) {
                                localVarQueryParameter['isDeleted'] = isDeleted;
                            }
                            if (tagNames) {
                                localVarQueryParameter['tagNames'] = tagNames;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['Skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['Take'] = take;
                            }
                            if (orderBy !== undefined) {
                                localVarQueryParameter['OrderBy'] = orderBy;
                            }
                            if (searchField !== undefined) {
                                localVarQueryParameter['SearchField'] = searchField;
                            }
                            if (searchValue !== undefined) {
                                localVarQueryParameter['SearchValue'] = searchValue;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test suite identifier  <br>User sets collection of configuration identifiers  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search configuration  <br>System restores(if exist) or creates test points with listed configuration  <br>System returns no content response
         * @summary Set Configurations By TestSuite Id
         * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
         * @param {Set<string>} [requestBody] Collection of configuration identifiers\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setConfigurationsByTestSuiteId: function (testSuiteId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testSuiteId' is not null or undefined
                            (0, common_1.assertParamExists)('setConfigurationsByTestSuiteId', 'testSuiteId', testSuiteId);
                            localVarPath = "/api/v2/testSuites/{testSuiteId}/configurations"
                                .replace("{".concat("testSuiteId", "}"), encodeURIComponent(String(testSuiteId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test suite identifier  <br>User sets collection of workitems identifiers  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search workitems  <br>System restores(if exist) or creates test points with listed workitems  <br>System returns no content response
         * @summary Set WorkItems By TestSuite Id
         * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
         * @param {Set<string>} [requestBody] Collection of workitem identifiers\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkItemsByTestSuiteId: function (testSuiteId, requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testSuiteId' is not null or undefined
                            (0, common_1.assertParamExists)('setWorkItemsByTestSuiteId', 'testSuiteId', testSuiteId);
                            localVarPath = "/api/v2/testSuites/{testSuiteId}/workItems"
                                .replace("{".concat("testSuiteId", "}"), encodeURIComponent(String(testSuiteId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test suite model (listed in request parameters)  <br>User runs method execution  <br>System updates test suite  <br>System returns test suite
         * @summary Update TestSuite
         * @param {TestSuiteV2PutModel} [testSuiteV2PutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTestSuite: function (testSuiteV2PutModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/testSuites";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(testSuiteV2PutModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.TestSuitesApiAxiosParamCreator = TestSuitesApiAxiosParamCreator;
/**
 * TestSuitesApi - functional programming interface
 * @export
 */
var TestSuitesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TestSuitesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Add test-points to test suite
         * @param {string} testSuiteId Test suite internal identifier
         * @param {WorkItemSelectModel} [workItemSelectModel] Filter object to retrieve work items for test-suite\&#39;s project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTestPointsToTestSuite: function (testSuiteId, workItemSelectModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addTestPointsToTestSuite(testSuiteId, workItemSelectModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test suite model (listed in request parameters)  <br>User runs method execution  <br>System creates test suite  <br>System returns test suite
         * @summary Create TestSuite
         * @param {TestSuiteV2PostModel} [testSuiteV2PostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestSuite: function (testSuiteV2PostModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createTestSuite(testSuiteV2PostModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System deletes test suite  <br>System returns no content response
         * @summary Delete TestSuite
         * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTestSuite: function (testSuiteId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteTestSuite(testSuiteId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search configurations related to the test points  <br>System returns configurations array
         * @summary Get Configurations By Id
         * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurationsByTestSuiteId: function (testSuiteId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getConfigurationsByTestSuiteId(testSuiteId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System returns test points array
         * @summary Get TestPoints By Id
         * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestPointsById: function (testSuiteId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTestPointsById(testSuiteId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search test results related to the test points  <br>System returns test results array
         * @summary Get TestResults By Id
         * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestResultsById: function (testSuiteId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTestResultsById(testSuiteId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System returns test suite
         * @summary Get TestSuite by Id
         * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestSuiteById: function (testSuiteId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTestSuiteById(testSuiteId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test suite identifier  <br>[Optional] User sets isDeleted property as true  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search workitems related to the test points  <br>                      [Optional] User sets isDeleted property is set as true, System includes deleted workitems                      Otherwise, system applies filter which excludes deleted workitems from all found workitems                    <br>System returns workitems array
         * @summary Get WorkItems By Id
         * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
         * @param {boolean} [isDeleted] Flag that defines if deleted workitems must be include in the response
         * @param {Array<string>} [tagNames] Array of workitem tag names
         * @param {number} [skip] Amount of items to be skipped (offset)
         * @param {number} [take] Amount of items to be taken (limit)
         * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {string} [searchField] Property name for searching
         * @param {string} [searchValue] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemsById: function (testSuiteId, isDeleted, tagNames, skip, take, orderBy, searchField, searchValue, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getWorkItemsById(testSuiteId, isDeleted, tagNames, skip, take, orderBy, searchField, searchValue, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test suite identifier  <br>User sets collection of configuration identifiers  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search configuration  <br>System restores(if exist) or creates test points with listed configuration  <br>System returns no content response
         * @summary Set Configurations By TestSuite Id
         * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
         * @param {Set<string>} [requestBody] Collection of configuration identifiers\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setConfigurationsByTestSuiteId: function (testSuiteId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setConfigurationsByTestSuiteId(testSuiteId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test suite identifier  <br>User sets collection of workitems identifiers  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search workitems  <br>System restores(if exist) or creates test points with listed workitems  <br>System returns no content response
         * @summary Set WorkItems By TestSuite Id
         * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
         * @param {Set<string>} [requestBody] Collection of workitem identifiers\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkItemsByTestSuiteId: function (testSuiteId, requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setWorkItemsByTestSuiteId(testSuiteId, requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets test suite model (listed in request parameters)  <br>User runs method execution  <br>System updates test suite  <br>System returns test suite
         * @summary Update TestSuite
         * @param {TestSuiteV2PutModel} [testSuiteV2PutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTestSuite: function (testSuiteV2PutModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateTestSuite(testSuiteV2PutModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.TestSuitesApiFp = TestSuitesApiFp;
/**
 * TestSuitesApi - factory interface
 * @export
 */
var TestSuitesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TestSuitesApiFp)(configuration);
    return {
        /**
         *
         * @summary Add test-points to test suite
         * @param {string} testSuiteId Test suite internal identifier
         * @param {WorkItemSelectModel} [workItemSelectModel] Filter object to retrieve work items for test-suite\&#39;s project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTestPointsToTestSuite: function (testSuiteId, workItemSelectModel, options) {
            return localVarFp.addTestPointsToTestSuite(testSuiteId, workItemSelectModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test suite model (listed in request parameters)  <br>User runs method execution  <br>System creates test suite  <br>System returns test suite
         * @summary Create TestSuite
         * @param {TestSuiteV2PostModel} [testSuiteV2PostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestSuite: function (testSuiteV2PostModel, options) {
            return localVarFp.createTestSuite(testSuiteV2PostModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System deletes test suite  <br>System returns no content response
         * @summary Delete TestSuite
         * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTestSuite: function (testSuiteId, options) {
            return localVarFp.deleteTestSuite(testSuiteId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search configurations related to the test points  <br>System returns configurations array
         * @summary Get Configurations By Id
         * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurationsByTestSuiteId: function (testSuiteId, options) {
            return localVarFp.getConfigurationsByTestSuiteId(testSuiteId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System returns test points array
         * @summary Get TestPoints By Id
         * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestPointsById: function (testSuiteId, options) {
            return localVarFp.getTestPointsById(testSuiteId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search test results related to the test points  <br>System returns test results array
         * @summary Get TestResults By Id
         * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestResultsById: function (testSuiteId, options) {
            return localVarFp.getTestResultsById(testSuiteId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System returns test suite
         * @summary Get TestSuite by Id
         * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestSuiteById: function (testSuiteId, options) {
            return localVarFp.getTestSuiteById(testSuiteId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test suite identifier  <br>[Optional] User sets isDeleted property as true  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search workitems related to the test points  <br>                      [Optional] User sets isDeleted property is set as true, System includes deleted workitems                      Otherwise, system applies filter which excludes deleted workitems from all found workitems                    <br>System returns workitems array
         * @summary Get WorkItems By Id
         * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
         * @param {boolean} [isDeleted] Flag that defines if deleted workitems must be include in the response
         * @param {Array<string>} [tagNames] Array of workitem tag names
         * @param {number} [skip] Amount of items to be skipped (offset)
         * @param {number} [take] Amount of items to be taken (limit)
         * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
         * @param {string} [searchField] Property name for searching
         * @param {string} [searchValue] Value for searching
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemsById: function (testSuiteId, isDeleted, tagNames, skip, take, orderBy, searchField, searchValue, options) {
            return localVarFp.getWorkItemsById(testSuiteId, isDeleted, tagNames, skip, take, orderBy, searchField, searchValue, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test suite identifier  <br>User sets collection of configuration identifiers  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search configuration  <br>System restores(if exist) or creates test points with listed configuration  <br>System returns no content response
         * @summary Set Configurations By TestSuite Id
         * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
         * @param {Set<string>} [requestBody] Collection of configuration identifiers\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setConfigurationsByTestSuiteId: function (testSuiteId, requestBody, options) {
            return localVarFp.setConfigurationsByTestSuiteId(testSuiteId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test suite identifier  <br>User sets collection of workitems identifiers  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search workitems  <br>System restores(if exist) or creates test points with listed workitems  <br>System returns no content response
         * @summary Set WorkItems By TestSuite Id
         * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
         * @param {Set<string>} [requestBody] Collection of workitem identifiers\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkItemsByTestSuiteId: function (testSuiteId, requestBody, options) {
            return localVarFp.setWorkItemsByTestSuiteId(testSuiteId, requestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets test suite model (listed in request parameters)  <br>User runs method execution  <br>System updates test suite  <br>System returns test suite
         * @summary Update TestSuite
         * @param {TestSuiteV2PutModel} [testSuiteV2PutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTestSuite: function (testSuiteV2PutModel, options) {
            return localVarFp.updateTestSuite(testSuiteV2PutModel, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TestSuitesApiFactory = TestSuitesApiFactory;
/**
 * TestSuitesApi - object-oriented interface
 * @export
 * @class TestSuitesApi
 * @extends {BaseAPI}
 */
var TestSuitesApi = /** @class */ (function (_super) {
    __extends(TestSuitesApi, _super);
    function TestSuitesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add test-points to test suite
     * @param {string} testSuiteId Test suite internal identifier
     * @param {WorkItemSelectModel} [workItemSelectModel] Filter object to retrieve work items for test-suite\&#39;s project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestSuitesApi
     */
    TestSuitesApi.prototype.addTestPointsToTestSuite = function (testSuiteId, workItemSelectModel, options) {
        var _this = this;
        return (0, exports.TestSuitesApiFp)(this.configuration).addTestPointsToTestSuite(testSuiteId, workItemSelectModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test suite model (listed in request parameters)  <br>User runs method execution  <br>System creates test suite  <br>System returns test suite
     * @summary Create TestSuite
     * @param {TestSuiteV2PostModel} [testSuiteV2PostModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestSuitesApi
     */
    TestSuitesApi.prototype.createTestSuite = function (testSuiteV2PostModel, options) {
        var _this = this;
        return (0, exports.TestSuitesApiFp)(this.configuration).createTestSuite(testSuiteV2PostModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System deletes test suite  <br>System returns no content response
     * @summary Delete TestSuite
     * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestSuitesApi
     */
    TestSuitesApi.prototype.deleteTestSuite = function (testSuiteId, options) {
        var _this = this;
        return (0, exports.TestSuitesApiFp)(this.configuration).deleteTestSuite(testSuiteId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search configurations related to the test points  <br>System returns configurations array
     * @summary Get Configurations By Id
     * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestSuitesApi
     */
    TestSuitesApi.prototype.getConfigurationsByTestSuiteId = function (testSuiteId, options) {
        var _this = this;
        return (0, exports.TestSuitesApiFp)(this.configuration).getConfigurationsByTestSuiteId(testSuiteId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System returns test points array
     * @summary Get TestPoints By Id
     * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestSuitesApi
     */
    TestSuitesApi.prototype.getTestPointsById = function (testSuiteId, options) {
        var _this = this;
        return (0, exports.TestSuitesApiFp)(this.configuration).getTestPointsById(testSuiteId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search test results related to the test points  <br>System returns test results array
     * @summary Get TestResults By Id
     * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestSuitesApi
     */
    TestSuitesApi.prototype.getTestResultsById = function (testSuiteId, options) {
        var _this = this;
        return (0, exports.TestSuitesApiFp)(this.configuration).getTestResultsById(testSuiteId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test suite identifier  <br>User runs method execution  <br>System search test suite by identifier  <br>System returns test suite
     * @summary Get TestSuite by Id
     * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestSuitesApi
     */
    TestSuitesApi.prototype.getTestSuiteById = function (testSuiteId, options) {
        var _this = this;
        return (0, exports.TestSuitesApiFp)(this.configuration).getTestSuiteById(testSuiteId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test suite identifier  <br>[Optional] User sets isDeleted property as true  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search workitems related to the test points  <br>                      [Optional] User sets isDeleted property is set as true, System includes deleted workitems                      Otherwise, system applies filter which excludes deleted workitems from all found workitems                    <br>System returns workitems array
     * @summary Get WorkItems By Id
     * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
     * @param {boolean} [isDeleted] Flag that defines if deleted workitems must be include in the response
     * @param {Array<string>} [tagNames] Array of workitem tag names
     * @param {number} [skip] Amount of items to be skipped (offset)
     * @param {number} [take] Amount of items to be taken (limit)
     * @param {string} [orderBy] SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
     * @param {string} [searchField] Property name for searching
     * @param {string} [searchValue] Value for searching
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestSuitesApi
     */
    TestSuitesApi.prototype.getWorkItemsById = function (testSuiteId, isDeleted, tagNames, skip, take, orderBy, searchField, searchValue, options) {
        var _this = this;
        return (0, exports.TestSuitesApiFp)(this.configuration).getWorkItemsById(testSuiteId, isDeleted, tagNames, skip, take, orderBy, searchField, searchValue, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test suite identifier  <br>User sets collection of configuration identifiers  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search configuration  <br>System restores(if exist) or creates test points with listed configuration  <br>System returns no content response
     * @summary Set Configurations By TestSuite Id
     * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
     * @param {Set<string>} [requestBody] Collection of configuration identifiers\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestSuitesApi
     */
    TestSuitesApi.prototype.setConfigurationsByTestSuiteId = function (testSuiteId, requestBody, options) {
        var _this = this;
        return (0, exports.TestSuitesApiFp)(this.configuration).setConfigurationsByTestSuiteId(testSuiteId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test suite identifier  <br>User sets collection of workitems identifiers  <br>User runs method execution  <br>System search test suite by identifier  <br>System search test points related to the test suite  <br>System search workitems  <br>System restores(if exist) or creates test points with listed workitems  <br>System returns no content response
     * @summary Set WorkItems By TestSuite Id
     * @param {string} testSuiteId Test suite internal (guid format) identifier\&quot;
     * @param {Set<string>} [requestBody] Collection of workitem identifiers\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestSuitesApi
     */
    TestSuitesApi.prototype.setWorkItemsByTestSuiteId = function (testSuiteId, requestBody, options) {
        var _this = this;
        return (0, exports.TestSuitesApiFp)(this.configuration).setWorkItemsByTestSuiteId(testSuiteId, requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets test suite model (listed in request parameters)  <br>User runs method execution  <br>System updates test suite  <br>System returns test suite
     * @summary Update TestSuite
     * @param {TestSuiteV2PutModel} [testSuiteV2PutModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestSuitesApi
     */
    TestSuitesApi.prototype.updateTestSuite = function (testSuiteV2PutModel, options) {
        var _this = this;
        return (0, exports.TestSuitesApiFp)(this.configuration).updateTestSuite(testSuiteV2PutModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TestSuitesApi;
}(base_1.BaseAPI));
exports.TestSuitesApi = TestSuitesApi;
/**
 * WorkItemsApi - axios parameter creator
 * @export
 */
var WorkItemsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * <br>Use case  <br>User sets workitem properties (listed in request parameters)  <br>User runs method execution  <br>System creates workitem by identifier  <br>System returns workitem model (listed in response parameters)
         * @summary Create Test Case, Checklist or Shared Step
         * @param {WorkItemPostModel} [workItemPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkItem: function (workItemPostModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/workItems";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(workItemPostModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets workitem identifier  <br>User runs method execution  <br>System search workitem by identifier  <br>System search and delete all autotests, related to found workitem  <br>System returns no content response
         * @summary Delete all links AutoTests from WorkItem by Id or GlobalId
         * @param {string} workItemId WorkItem internal (guid format) or  global(integer format) identifier\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllWorkItemsFromAutoTest: function (workItemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'workItemId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteAllWorkItemsFromAutoTest', 'workItemId', workItemId);
                            localVarPath = "/api/v2/workItems/{workItemId}/autoTests"
                                .replace("{".concat("workItemId", "}"), encodeURIComponent(String(workItemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets workitem identifier  <br>User runs method execution  <br>System deletes workitem  <br>System returns no content response
         * @summary Delete Test Case, Checklist or Shared Step by Id or GlobalId
         * @param {string} workItemId WorkItem internal (guid format) or  global(integer format) identifier\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkItem: function (workItemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'workItemId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteWorkItem', 'workItemId', workItemId);
                            localVarPath = "/api/v2/workItems/{workItemId}"
                                .replace("{".concat("workItemId", "}"), encodeURIComponent(String(workItemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets workitem identifier  <br>User runs method execution  <br>System search workitem by identifier  <br>System search all autotests, related to found workitem  <br>System returns list of found autotests
         * @summary Get all AutoTests linked to WorkItem by Id or GlobalId
         * @param {string} workItemId WorkItem internal (guid format) or  global(integer format) identifier\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoTestsForWorkItem: function (workItemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'workItemId' is not null or undefined
                            (0, common_1.assertParamExists)('getAutoTestsForWorkItem', 'workItemId', workItemId);
                            localVarPath = "/api/v2/workItems/{workItemId}/autoTests"
                                .replace("{".concat("workItemId", "}"), encodeURIComponent(String(workItemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get iterations by workitem Id or GlobalId
         * @param {string} workItemId WorkItem internal (guid format) or  global(integer format) identifier\&quot;
         * @param {string} [versionId] WorkItem version (guid format) identifier
         * @param {number} [versionNumber] WorkItem version number (0 is the last version)\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIterations: function (workItemId, versionId, versionNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'workItemId' is not null or undefined
                            (0, common_1.assertParamExists)('getIterations', 'workItemId', workItemId);
                            localVarPath = "/api/v2/workItems/{workItemId}/iterations"
                                .replace("{".concat("workItemId", "}"), encodeURIComponent(String(workItemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (versionId !== undefined) {
                                localVarQueryParameter['versionId'] = versionId;
                            }
                            if (versionNumber !== undefined) {
                                localVarQueryParameter['versionNumber'] = versionNumber;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets workitem identifier  <br>[Optional] User sets workitem version identifier  <br>[Optional] User sets workitem version number  <br>User runs method execution  <br>System search workitem by identifier  <br>[Optional] if User sets workitem version identifier, system search workitem version by identifier.  <br>[Optional] if user sets workitem version number, system search workitem version by number  <br>Otherwise, system search last workitem version  <br>System returns workitem
         * @summary Get Test Case, Checklist or Shared Step by Id or GlobalId
         * @param {string} workItemId WorkItem internal (guid format) or  global(integer format) identifier\&quot;
         * @param {string} [versionId] WorkItem version (guid format) identifier\&quot;
         * @param {number} [versionNumber] WorkItem version number (0 is the last version)\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemById: function (workItemId, versionId, versionNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'workItemId' is not null or undefined
                            (0, common_1.assertParamExists)('getWorkItemById', 'workItemId', workItemId);
                            localVarPath = "/api/v2/workItems/{workItemId}"
                                .replace("{".concat("workItemId", "}"), encodeURIComponent(String(workItemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (versionId !== undefined) {
                                localVarQueryParameter['versionId'] = versionId;
                            }
                            if (versionNumber !== undefined) {
                                localVarQueryParameter['versionNumber'] = versionNumber;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets workitem identifier  <br>User runs method execution  <br>System search workitem by identifier  <br>System search test results of all autotests, related to found workitem  <br>System sort results by CompletedOn ascending, then by CreatedDate ascending  <br>System returns sorted collection of test results
         * @summary Get WorkItem chronology by Id or GlobalId
         * @param {string} workItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemChronology: function (workItemId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'workItemId' is not null or undefined
                            (0, common_1.assertParamExists)('getWorkItemChronology', 'workItemId', workItemId);
                            localVarPath = "/api/v2/workItems/{workItemId}/chronology"
                                .replace("{".concat("workItemId", "}"), encodeURIComponent(String(workItemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets workitem identifier  <br>[Optional] User sets workitem version identifier  <br>User runs method execution  <br>System search workitem by identifier  <br>                      [Optional] If User set workitem version identifier, System search workitem version by version identifier                      Otherwise, system search all version of workitem                    <br>System returns array of workitem version models (listed in response example)
         * @summary Get WorkItem versions
         * @param {string} workItemId WorkItem internal (guid format) or  global(integer format) identifier\&quot;
         * @param {string} [workItemVersionId] WorkItem version (guid format)  identifier\&quot;
         * @param {number} [versionNumber] WorkItem version (integer format)  number\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemVersions: function (workItemId, workItemVersionId, versionNumber, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'workItemId' is not null or undefined
                            (0, common_1.assertParamExists)('getWorkItemVersions', 'workItemId', workItemId);
                            localVarPath = "/api/v2/workItems/{workItemId}/versions"
                                .replace("{".concat("workItemId", "}"), encodeURIComponent(String(workItemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            if (workItemVersionId !== undefined) {
                                localVarQueryParameter['workItemVersionId'] = workItemVersionId;
                            }
                            if (versionNumber !== undefined) {
                                localVarQueryParameter['versionNumber'] = versionNumber;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets workitem properties (listed in request parameters)  <br>User runs method execution  <br>System updates workitem by identifier  <br>System returns updated workitem model (listed in response parameters)
         * @summary Update Test Case, Checklist or Shared Step
         * @param {WorkItemPutModel} [workItemPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkItem: function (workItemPutModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/api/v2/workItems";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer or PrivateToken required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer or PrivateToken required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(workItemPutModel, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.WorkItemsApiAxiosParamCreator = WorkItemsApiAxiosParamCreator;
/**
 * WorkItemsApi - functional programming interface
 * @export
 */
var WorkItemsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.WorkItemsApiAxiosParamCreator)(configuration);
    return {
        /**
         * <br>Use case  <br>User sets workitem properties (listed in request parameters)  <br>User runs method execution  <br>System creates workitem by identifier  <br>System returns workitem model (listed in response parameters)
         * @summary Create Test Case, Checklist or Shared Step
         * @param {WorkItemPostModel} [workItemPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkItem: function (workItemPostModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createWorkItem(workItemPostModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets workitem identifier  <br>User runs method execution  <br>System search workitem by identifier  <br>System search and delete all autotests, related to found workitem  <br>System returns no content response
         * @summary Delete all links AutoTests from WorkItem by Id or GlobalId
         * @param {string} workItemId WorkItem internal (guid format) or  global(integer format) identifier\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllWorkItemsFromAutoTest: function (workItemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteAllWorkItemsFromAutoTest(workItemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets workitem identifier  <br>User runs method execution  <br>System deletes workitem  <br>System returns no content response
         * @summary Delete Test Case, Checklist or Shared Step by Id or GlobalId
         * @param {string} workItemId WorkItem internal (guid format) or  global(integer format) identifier\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkItem: function (workItemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteWorkItem(workItemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets workitem identifier  <br>User runs method execution  <br>System search workitem by identifier  <br>System search all autotests, related to found workitem  <br>System returns list of found autotests
         * @summary Get all AutoTests linked to WorkItem by Id or GlobalId
         * @param {string} workItemId WorkItem internal (guid format) or  global(integer format) identifier\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoTestsForWorkItem: function (workItemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAutoTestsForWorkItem(workItemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get iterations by workitem Id or GlobalId
         * @param {string} workItemId WorkItem internal (guid format) or  global(integer format) identifier\&quot;
         * @param {string} [versionId] WorkItem version (guid format) identifier
         * @param {number} [versionNumber] WorkItem version number (0 is the last version)\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIterations: function (workItemId, versionId, versionNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getIterations(workItemId, versionId, versionNumber, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets workitem identifier  <br>[Optional] User sets workitem version identifier  <br>[Optional] User sets workitem version number  <br>User runs method execution  <br>System search workitem by identifier  <br>[Optional] if User sets workitem version identifier, system search workitem version by identifier.  <br>[Optional] if user sets workitem version number, system search workitem version by number  <br>Otherwise, system search last workitem version  <br>System returns workitem
         * @summary Get Test Case, Checklist or Shared Step by Id or GlobalId
         * @param {string} workItemId WorkItem internal (guid format) or  global(integer format) identifier\&quot;
         * @param {string} [versionId] WorkItem version (guid format) identifier\&quot;
         * @param {number} [versionNumber] WorkItem version number (0 is the last version)\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemById: function (workItemId, versionId, versionNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getWorkItemById(workItemId, versionId, versionNumber, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets workitem identifier  <br>User runs method execution  <br>System search workitem by identifier  <br>System search test results of all autotests, related to found workitem  <br>System sort results by CompletedOn ascending, then by CreatedDate ascending  <br>System returns sorted collection of test results
         * @summary Get WorkItem chronology by Id or GlobalId
         * @param {string} workItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemChronology: function (workItemId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getWorkItemChronology(workItemId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets workitem identifier  <br>[Optional] User sets workitem version identifier  <br>User runs method execution  <br>System search workitem by identifier  <br>                      [Optional] If User set workitem version identifier, System search workitem version by version identifier                      Otherwise, system search all version of workitem                    <br>System returns array of workitem version models (listed in response example)
         * @summary Get WorkItem versions
         * @param {string} workItemId WorkItem internal (guid format) or  global(integer format) identifier\&quot;
         * @param {string} [workItemVersionId] WorkItem version (guid format)  identifier\&quot;
         * @param {number} [versionNumber] WorkItem version (integer format)  number\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemVersions: function (workItemId, workItemVersionId, versionNumber, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getWorkItemVersions(workItemId, workItemVersionId, versionNumber, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * <br>Use case  <br>User sets workitem properties (listed in request parameters)  <br>User runs method execution  <br>System updates workitem by identifier  <br>System returns updated workitem model (listed in response parameters)
         * @summary Update Test Case, Checklist or Shared Step
         * @param {WorkItemPutModel} [workItemPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkItem: function (workItemPutModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateWorkItem(workItemPutModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.WorkItemsApiFp = WorkItemsApiFp;
/**
 * WorkItemsApi - factory interface
 * @export
 */
var WorkItemsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.WorkItemsApiFp)(configuration);
    return {
        /**
         * <br>Use case  <br>User sets workitem properties (listed in request parameters)  <br>User runs method execution  <br>System creates workitem by identifier  <br>System returns workitem model (listed in response parameters)
         * @summary Create Test Case, Checklist or Shared Step
         * @param {WorkItemPostModel} [workItemPostModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkItem: function (workItemPostModel, options) {
            return localVarFp.createWorkItem(workItemPostModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets workitem identifier  <br>User runs method execution  <br>System search workitem by identifier  <br>System search and delete all autotests, related to found workitem  <br>System returns no content response
         * @summary Delete all links AutoTests from WorkItem by Id or GlobalId
         * @param {string} workItemId WorkItem internal (guid format) or  global(integer format) identifier\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllWorkItemsFromAutoTest: function (workItemId, options) {
            return localVarFp.deleteAllWorkItemsFromAutoTest(workItemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets workitem identifier  <br>User runs method execution  <br>System deletes workitem  <br>System returns no content response
         * @summary Delete Test Case, Checklist or Shared Step by Id or GlobalId
         * @param {string} workItemId WorkItem internal (guid format) or  global(integer format) identifier\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkItem: function (workItemId, options) {
            return localVarFp.deleteWorkItem(workItemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets workitem identifier  <br>User runs method execution  <br>System search workitem by identifier  <br>System search all autotests, related to found workitem  <br>System returns list of found autotests
         * @summary Get all AutoTests linked to WorkItem by Id or GlobalId
         * @param {string} workItemId WorkItem internal (guid format) or  global(integer format) identifier\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoTestsForWorkItem: function (workItemId, options) {
            return localVarFp.getAutoTestsForWorkItem(workItemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get iterations by workitem Id or GlobalId
         * @param {string} workItemId WorkItem internal (guid format) or  global(integer format) identifier\&quot;
         * @param {string} [versionId] WorkItem version (guid format) identifier
         * @param {number} [versionNumber] WorkItem version number (0 is the last version)\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIterations: function (workItemId, versionId, versionNumber, options) {
            return localVarFp.getIterations(workItemId, versionId, versionNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets workitem identifier  <br>[Optional] User sets workitem version identifier  <br>[Optional] User sets workitem version number  <br>User runs method execution  <br>System search workitem by identifier  <br>[Optional] if User sets workitem version identifier, system search workitem version by identifier.  <br>[Optional] if user sets workitem version number, system search workitem version by number  <br>Otherwise, system search last workitem version  <br>System returns workitem
         * @summary Get Test Case, Checklist or Shared Step by Id or GlobalId
         * @param {string} workItemId WorkItem internal (guid format) or  global(integer format) identifier\&quot;
         * @param {string} [versionId] WorkItem version (guid format) identifier\&quot;
         * @param {number} [versionNumber] WorkItem version number (0 is the last version)\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemById: function (workItemId, versionId, versionNumber, options) {
            return localVarFp.getWorkItemById(workItemId, versionId, versionNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets workitem identifier  <br>User runs method execution  <br>System search workitem by identifier  <br>System search test results of all autotests, related to found workitem  <br>System sort results by CompletedOn ascending, then by CreatedDate ascending  <br>System returns sorted collection of test results
         * @summary Get WorkItem chronology by Id or GlobalId
         * @param {string} workItemId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemChronology: function (workItemId, options) {
            return localVarFp.getWorkItemChronology(workItemId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets workitem identifier  <br>[Optional] User sets workitem version identifier  <br>User runs method execution  <br>System search workitem by identifier  <br>                      [Optional] If User set workitem version identifier, System search workitem version by version identifier                      Otherwise, system search all version of workitem                    <br>System returns array of workitem version models (listed in response example)
         * @summary Get WorkItem versions
         * @param {string} workItemId WorkItem internal (guid format) or  global(integer format) identifier\&quot;
         * @param {string} [workItemVersionId] WorkItem version (guid format)  identifier\&quot;
         * @param {number} [versionNumber] WorkItem version (integer format)  number\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemVersions: function (workItemId, workItemVersionId, versionNumber, options) {
            return localVarFp.getWorkItemVersions(workItemId, workItemVersionId, versionNumber, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * <br>Use case  <br>User sets workitem properties (listed in request parameters)  <br>User runs method execution  <br>System updates workitem by identifier  <br>System returns updated workitem model (listed in response parameters)
         * @summary Update Test Case, Checklist or Shared Step
         * @param {WorkItemPutModel} [workItemPutModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkItem: function (workItemPutModel, options) {
            return localVarFp.updateWorkItem(workItemPutModel, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.WorkItemsApiFactory = WorkItemsApiFactory;
/**
 * WorkItemsApi - object-oriented interface
 * @export
 * @class WorkItemsApi
 * @extends {BaseAPI}
 */
var WorkItemsApi = /** @class */ (function (_super) {
    __extends(WorkItemsApi, _super);
    function WorkItemsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * <br>Use case  <br>User sets workitem properties (listed in request parameters)  <br>User runs method execution  <br>System creates workitem by identifier  <br>System returns workitem model (listed in response parameters)
     * @summary Create Test Case, Checklist or Shared Step
     * @param {WorkItemPostModel} [workItemPostModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsApi
     */
    WorkItemsApi.prototype.createWorkItem = function (workItemPostModel, options) {
        var _this = this;
        return (0, exports.WorkItemsApiFp)(this.configuration).createWorkItem(workItemPostModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets workitem identifier  <br>User runs method execution  <br>System search workitem by identifier  <br>System search and delete all autotests, related to found workitem  <br>System returns no content response
     * @summary Delete all links AutoTests from WorkItem by Id or GlobalId
     * @param {string} workItemId WorkItem internal (guid format) or  global(integer format) identifier\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsApi
     */
    WorkItemsApi.prototype.deleteAllWorkItemsFromAutoTest = function (workItemId, options) {
        var _this = this;
        return (0, exports.WorkItemsApiFp)(this.configuration).deleteAllWorkItemsFromAutoTest(workItemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets workitem identifier  <br>User runs method execution  <br>System deletes workitem  <br>System returns no content response
     * @summary Delete Test Case, Checklist or Shared Step by Id or GlobalId
     * @param {string} workItemId WorkItem internal (guid format) or  global(integer format) identifier\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsApi
     */
    WorkItemsApi.prototype.deleteWorkItem = function (workItemId, options) {
        var _this = this;
        return (0, exports.WorkItemsApiFp)(this.configuration).deleteWorkItem(workItemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets workitem identifier  <br>User runs method execution  <br>System search workitem by identifier  <br>System search all autotests, related to found workitem  <br>System returns list of found autotests
     * @summary Get all AutoTests linked to WorkItem by Id or GlobalId
     * @param {string} workItemId WorkItem internal (guid format) or  global(integer format) identifier\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsApi
     */
    WorkItemsApi.prototype.getAutoTestsForWorkItem = function (workItemId, options) {
        var _this = this;
        return (0, exports.WorkItemsApiFp)(this.configuration).getAutoTestsForWorkItem(workItemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get iterations by workitem Id or GlobalId
     * @param {string} workItemId WorkItem internal (guid format) or  global(integer format) identifier\&quot;
     * @param {string} [versionId] WorkItem version (guid format) identifier
     * @param {number} [versionNumber] WorkItem version number (0 is the last version)\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsApi
     */
    WorkItemsApi.prototype.getIterations = function (workItemId, versionId, versionNumber, options) {
        var _this = this;
        return (0, exports.WorkItemsApiFp)(this.configuration).getIterations(workItemId, versionId, versionNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets workitem identifier  <br>[Optional] User sets workitem version identifier  <br>[Optional] User sets workitem version number  <br>User runs method execution  <br>System search workitem by identifier  <br>[Optional] if User sets workitem version identifier, system search workitem version by identifier.  <br>[Optional] if user sets workitem version number, system search workitem version by number  <br>Otherwise, system search last workitem version  <br>System returns workitem
     * @summary Get Test Case, Checklist or Shared Step by Id or GlobalId
     * @param {string} workItemId WorkItem internal (guid format) or  global(integer format) identifier\&quot;
     * @param {string} [versionId] WorkItem version (guid format) identifier\&quot;
     * @param {number} [versionNumber] WorkItem version number (0 is the last version)\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsApi
     */
    WorkItemsApi.prototype.getWorkItemById = function (workItemId, versionId, versionNumber, options) {
        var _this = this;
        return (0, exports.WorkItemsApiFp)(this.configuration).getWorkItemById(workItemId, versionId, versionNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets workitem identifier  <br>User runs method execution  <br>System search workitem by identifier  <br>System search test results of all autotests, related to found workitem  <br>System sort results by CompletedOn ascending, then by CreatedDate ascending  <br>System returns sorted collection of test results
     * @summary Get WorkItem chronology by Id or GlobalId
     * @param {string} workItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsApi
     */
    WorkItemsApi.prototype.getWorkItemChronology = function (workItemId, options) {
        var _this = this;
        return (0, exports.WorkItemsApiFp)(this.configuration).getWorkItemChronology(workItemId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets workitem identifier  <br>[Optional] User sets workitem version identifier  <br>User runs method execution  <br>System search workitem by identifier  <br>                      [Optional] If User set workitem version identifier, System search workitem version by version identifier                      Otherwise, system search all version of workitem                    <br>System returns array of workitem version models (listed in response example)
     * @summary Get WorkItem versions
     * @param {string} workItemId WorkItem internal (guid format) or  global(integer format) identifier\&quot;
     * @param {string} [workItemVersionId] WorkItem version (guid format)  identifier\&quot;
     * @param {number} [versionNumber] WorkItem version (integer format)  number\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsApi
     */
    WorkItemsApi.prototype.getWorkItemVersions = function (workItemId, workItemVersionId, versionNumber, options) {
        var _this = this;
        return (0, exports.WorkItemsApiFp)(this.configuration).getWorkItemVersions(workItemId, workItemVersionId, versionNumber, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <br>Use case  <br>User sets workitem properties (listed in request parameters)  <br>User runs method execution  <br>System updates workitem by identifier  <br>System returns updated workitem model (listed in response parameters)
     * @summary Update Test Case, Checklist or Shared Step
     * @param {WorkItemPutModel} [workItemPutModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsApi
     */
    WorkItemsApi.prototype.updateWorkItem = function (workItemPutModel, options) {
        var _this = this;
        return (0, exports.WorkItemsApiFp)(this.configuration).updateWorkItem(workItemPutModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return WorkItemsApi;
}(base_1.BaseAPI));
exports.WorkItemsApi = WorkItemsApi;
